
C_files/aes.elf:     format de fichier elf32-littleriscv
architecture: riscv:rv32, fanions 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
adresse de départ 0x00000084

Sections :
Idx Name          Taille    VMA       LMA       Off fich  Algn
  0 .vectors      00000084  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000bd8  00000084  00000084  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017b  00000c5c  00000c5c  00001c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000001  00000dd7  00000dd7  00001dd7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000010  00000dd8  00000dd8  00001dd8  2**3
                  ALLOC
  5 .stack        00002000  000f8000  000f8000  00002000  2**0
                  ALLOC
  6 .debug_info   000008c7  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047e  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000088  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f9c  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000435  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00003f79  2**0
                  CONTENTS, READONLY
 12 .riscv.attributes 00000021  00000000  00000000  00003f8a  2**0
                  CONTENTS, READONLY
 13 .debug_frame  0000031c  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  000042c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Déassemblage de la section .vectors :

00000000 <_stack_start-0x100000>:

  // All unimplemented interrupts/exceptions go to the default_exc_handler.
  .org 0x00
  .rept 7
  jal x0, default_exc_handler
  .endr
   0:	3cf0006f          	j	bce <default_exc_handler>
   4:	3cb0006f          	j	bce <default_exc_handler>
   8:	3c70006f          	j	bce <default_exc_handler>
   c:	3c30006f          	j	bce <default_exc_handler>
  10:	3bf0006f          	j	bce <default_exc_handler>
  14:	3bb0006f          	j	bce <default_exc_handler>
  18:	3b70006f          	j	bce <default_exc_handler>
  jal x0, timer_handler
  1c:	3b70006f          	j	bd2 <timer_handler>
  .rept 23
  jal x0, default_exc_handler
  .endr
  20:	3af0006f          	j	bce <default_exc_handler>
  24:	3ab0006f          	j	bce <default_exc_handler>
  28:	3a70006f          	j	bce <default_exc_handler>
  2c:	3a30006f          	j	bce <default_exc_handler>
  30:	39f0006f          	j	bce <default_exc_handler>
  34:	39b0006f          	j	bce <default_exc_handler>
  38:	3970006f          	j	bce <default_exc_handler>
  3c:	3930006f          	j	bce <default_exc_handler>
  40:	38f0006f          	j	bce <default_exc_handler>
  44:	38b0006f          	j	bce <default_exc_handler>
  48:	3870006f          	j	bce <default_exc_handler>
  4c:	3830006f          	j	bce <default_exc_handler>
  50:	37f0006f          	j	bce <default_exc_handler>
  54:	37b0006f          	j	bce <default_exc_handler>
  58:	3770006f          	j	bce <default_exc_handler>
  5c:	3730006f          	j	bce <default_exc_handler>
  60:	36f0006f          	j	bce <default_exc_handler>
  64:	36b0006f          	j	bce <default_exc_handler>
  68:	3670006f          	j	bce <default_exc_handler>
  6c:	3630006f          	j	bce <default_exc_handler>
  70:	35f0006f          	j	bce <default_exc_handler>
  74:	35b0006f          	j	bce <default_exc_handler>
  78:	3570006f          	j	bce <default_exc_handler>
  7c:	0000                	unimp
  7e:	0000                	unimp

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	3570006f          	j	bd6 <reset_handler>

Déassemblage de la section .text :

00000084 <putchar>:
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#include "simple_system_common.h"

int putchar(int c) {
  84:	1141                	addi	sp,sp,-16
  86:	c62a                	sw	a0,12(sp)
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	47b2                	lw	a5,12(sp)
  8a:	0ff7f713          	andi	a4,a5,255
  8e:	000207b7          	lui	a5,0x20
  92:	c398                	sw	a4,0(a5)

  return c;
  94:	47b2                	lw	a5,12(sp)
}
  96:	853e                	mv	a0,a5
  98:	0141                	addi	sp,sp,16
  9a:	8082                	ret

0000009c <puts>:

int puts(const char *str) {
  9c:	1101                	addi	sp,sp,-32
  9e:	ce06                	sw	ra,28(sp)
  a0:	c62a                	sw	a0,12(sp)
  while (*str) {
  a2:	a809                	j	b4 <puts+0x18>
    putchar(*str++);
  a4:	47b2                	lw	a5,12(sp)
  a6:	00178713          	addi	a4,a5,1 # 20001 <_stack_len+0x18001>
  aa:	c63a                	sw	a4,12(sp)
  ac:	0007c783          	lbu	a5,0(a5)
  b0:	853e                	mv	a0,a5
  b2:	3fc9                	jal	84 <putchar>
  while (*str) {
  b4:	47b2                	lw	a5,12(sp)
  b6:	0007c783          	lbu	a5,0(a5)
  ba:	f7ed                	bnez	a5,a4 <puts+0x8>
  }

  return 0;
  bc:	4781                	li	a5,0
}
  be:	853e                	mv	a0,a5
  c0:	40f2                	lw	ra,28(sp)
  c2:	6105                	addi	sp,sp,32
  c4:	8082                	ret

000000c6 <puthex>:

void puthex(uint32_t h) {
  c6:	7179                	addi	sp,sp,-48
  c8:	d606                	sw	ra,44(sp)
  ca:	c62a                	sw	a0,12(sp)
  int cur_digit;
  // Iterate through h taking top 4 bits each time and outputting ASCII of hex
  // digit for those 4 bits
  for (int i = 0; i < 8; i++) {
  cc:	ce02                	sw	zero,28(sp)
  ce:	a80d                	j	100 <puthex+0x3a>
    cur_digit = h >> 28;
  d0:	47b2                	lw	a5,12(sp)
  d2:	83f1                	srli	a5,a5,0x1c
  d4:	cc3e                	sw	a5,24(sp)

    if (cur_digit < 10)
  d6:	4762                	lw	a4,24(sp)
  d8:	47a5                	li	a5,9
  da:	00e7c863          	blt	a5,a4,ea <puthex+0x24>
      putchar('0' + cur_digit);
  de:	47e2                	lw	a5,24(sp)
  e0:	03078793          	addi	a5,a5,48
  e4:	853e                	mv	a0,a5
  e6:	3f79                	jal	84 <putchar>
  e8:	a031                	j	f4 <puthex+0x2e>
    else
      putchar('A' - 10 + cur_digit);
  ea:	47e2                	lw	a5,24(sp)
  ec:	03778793          	addi	a5,a5,55
  f0:	853e                	mv	a0,a5
  f2:	3f49                	jal	84 <putchar>

    h <<= 4;
  f4:	47b2                	lw	a5,12(sp)
  f6:	0792                	slli	a5,a5,0x4
  f8:	c63e                	sw	a5,12(sp)
  for (int i = 0; i < 8; i++) {
  fa:	47f2                	lw	a5,28(sp)
  fc:	0785                	addi	a5,a5,1
  fe:	ce3e                	sw	a5,28(sp)
 100:	4772                	lw	a4,28(sp)
 102:	479d                	li	a5,7
 104:	fce7d6e3          	bge	a5,a4,d0 <puthex+0xa>
  }
}
 108:	0001                	nop
 10a:	0001                	nop
 10c:	50b2                	lw	ra,44(sp)
 10e:	6145                	addi	sp,sp,48
 110:	8082                	ret

00000112 <sim_halt>:

void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	000207b7          	lui	a5,0x20
 116:	0791                	addi	a5,a5,4
 118:	4705                	li	a4,1
 11a:	c398                	sw	a4,0(a5)
 11c:	0001                	nop
 11e:	8082                	ret

00000120 <pcount_reset>:

void pcount_reset() {
  asm volatile(
 120:	b0201073          	csrw	minstret,zero
 124:	b0001073          	csrw	mcycle,zero
 128:	b0301073          	csrw	mhpmcounter3,zero
 12c:	b0401073          	csrw	mhpmcounter4,zero
 130:	b0501073          	csrw	mhpmcounter5,zero
 134:	b0601073          	csrw	mhpmcounter6,zero
 138:	b0701073          	csrw	mhpmcounter7,zero
 13c:	b0801073          	csrw	mhpmcounter8,zero
 140:	b0901073          	csrw	mhpmcounter9,zero
 144:	b0a01073          	csrw	mhpmcounter10,zero
 148:	b0b01073          	csrw	mhpmcounter11,zero
 14c:	b0c01073          	csrw	mhpmcounter12,zero
 150:	b0d01073          	csrw	mhpmcounter13,zero
 154:	b0e01073          	csrw	mhpmcounter14,zero
 158:	b0f01073          	csrw	mhpmcounter15,zero
 15c:	b1001073          	csrw	mhpmcounter16,zero
 160:	b1101073          	csrw	mhpmcounter17,zero
 164:	b1201073          	csrw	mhpmcounter18,zero
 168:	b1301073          	csrw	mhpmcounter19,zero
 16c:	b1401073          	csrw	mhpmcounter20,zero
 170:	b1501073          	csrw	mhpmcounter21,zero
 174:	b1601073          	csrw	mhpmcounter22,zero
 178:	b1701073          	csrw	mhpmcounter23,zero
 17c:	b1801073          	csrw	mhpmcounter24,zero
 180:	b1901073          	csrw	mhpmcounter25,zero
 184:	b1a01073          	csrw	mhpmcounter26,zero
 188:	b1b01073          	csrw	mhpmcounter27,zero
 18c:	b1c01073          	csrw	mhpmcounter28,zero
 190:	b1d01073          	csrw	mhpmcounter29,zero
 194:	b1e01073          	csrw	mhpmcounter30,zero
 198:	b1f01073          	csrw	mhpmcounter31,zero
 19c:	b8201073          	csrw	minstreth,zero
 1a0:	b8001073          	csrw	mcycleh,zero
 1a4:	b8301073          	csrw	mhpmcounter3h,zero
 1a8:	b8401073          	csrw	mhpmcounter4h,zero
 1ac:	b8501073          	csrw	mhpmcounter5h,zero
 1b0:	b8601073          	csrw	mhpmcounter6h,zero
 1b4:	b8701073          	csrw	mhpmcounter7h,zero
 1b8:	b8801073          	csrw	mhpmcounter8h,zero
 1bc:	b8901073          	csrw	mhpmcounter9h,zero
 1c0:	b8a01073          	csrw	mhpmcounter10h,zero
 1c4:	b8b01073          	csrw	mhpmcounter11h,zero
 1c8:	b8c01073          	csrw	mhpmcounter12h,zero
 1cc:	b8d01073          	csrw	mhpmcounter13h,zero
 1d0:	b8e01073          	csrw	mhpmcounter14h,zero
 1d4:	b8f01073          	csrw	mhpmcounter15h,zero
 1d8:	b9001073          	csrw	mhpmcounter16h,zero
 1dc:	b9101073          	csrw	mhpmcounter17h,zero
 1e0:	b9201073          	csrw	mhpmcounter18h,zero
 1e4:	b9301073          	csrw	mhpmcounter19h,zero
 1e8:	b9401073          	csrw	mhpmcounter20h,zero
 1ec:	b9501073          	csrw	mhpmcounter21h,zero
 1f0:	b9601073          	csrw	mhpmcounter22h,zero
 1f4:	b9701073          	csrw	mhpmcounter23h,zero
 1f8:	b9801073          	csrw	mhpmcounter24h,zero
 1fc:	b9901073          	csrw	mhpmcounter25h,zero
 200:	b9a01073          	csrw	mhpmcounter26h,zero
 204:	b9b01073          	csrw	mhpmcounter27h,zero
 208:	b9c01073          	csrw	mhpmcounter28h,zero
 20c:	b9d01073          	csrw	mhpmcounter29h,zero
 210:	b9e01073          	csrw	mhpmcounter30h,zero
 214:	b9f01073          	csrw	mhpmcounter31h,zero
      "csrw mhpmcounter27h, x0\n"
      "csrw mhpmcounter28h, x0\n"
      "csrw mhpmcounter29h, x0\n"
      "csrw mhpmcounter30h, x0\n"
      "csrw mhpmcounter31h, x0\n");
}
 218:	0001                	nop
 21a:	8082                	ret

0000021c <pcount_enable>:

void pcount_enable(int enable) {
 21c:	1101                	addi	sp,sp,-32
 21e:	c62a                	sw	a0,12(sp)
  // Note cycle is disabled with everything else
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	47b2                	lw	a5,12(sp)
 222:	c399                	beqz	a5,228 <pcount_enable+0xc>
 224:	4781                	li	a5,0
 226:	a011                	j	22a <pcount_enable+0xe>
 228:	57fd                	li	a5,-1
 22a:	ce3e                	sw	a5,28(sp)
  // mucounteren == mcountinhibit but binutils doesn't seem to known the
  // mcountinhibit name
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 22c:	47f2                	lw	a5,28(sp)
 22e:	32079073          	csrw	mucounteren,a5
}
 232:	0001                	nop
 234:	6105                	addi	sp,sp,32
 236:	8082                	ret

00000238 <get_mepc>:

unsigned int get_mepc() {
 238:	1141                	addi	sp,sp,-16
  uint32_t result;
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23a:	341027f3          	csrr	a5,mepc
 23e:	c63e                	sw	a5,12(sp)
  return result;
 240:	47b2                	lw	a5,12(sp)
}
 242:	853e                	mv	a0,a5
 244:	0141                	addi	sp,sp,16
 246:	8082                	ret

00000248 <get_mcause>:

unsigned int get_mcause() {
 248:	1141                	addi	sp,sp,-16
  uint32_t result;
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24a:	342027f3          	csrr	a5,mcause
 24e:	c63e                	sw	a5,12(sp)
  return result;
 250:	47b2                	lw	a5,12(sp)
}
 252:	853e                	mv	a0,a5
 254:	0141                	addi	sp,sp,16
 256:	8082                	ret

00000258 <get_mtval>:

unsigned int get_mtval() {
 258:	1141                	addi	sp,sp,-16
  uint32_t result;
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25a:	343027f3          	csrr	a5,mtval
 25e:	c63e                	sw	a5,12(sp)
  return result;
 260:	47b2                	lw	a5,12(sp)
}
 262:	853e                	mv	a0,a5
 264:	0141                	addi	sp,sp,16
 266:	8082                	ret

00000268 <simple_exc_handler>:

void simple_exc_handler(void) {
 268:	1141                	addi	sp,sp,-16
 26a:	c606                	sw	ra,12(sp)
  puts("EXCEPTION!!!\n");
 26c:	00001517          	auipc	a0,0x1
 270:	9f050513          	addi	a0,a0,-1552 # c5c <sleep_loop+0x6>
 274:	3525                	jal	9c <puts>
  puts("============\n");
 276:	00001517          	auipc	a0,0x1
 27a:	9f650513          	addi	a0,a0,-1546 # c6c <sleep_loop+0x16>
 27e:	3d39                	jal	9c <puts>
  puts("MEPC:   0x%0X");puthex(get_mepc());
 280:	00001517          	auipc	a0,0x1
 284:	9fc50513          	addi	a0,a0,-1540 # c7c <sleep_loop+0x26>
 288:	3d11                	jal	9c <puts>
 28a:	377d                	jal	238 <get_mepc>
 28c:	87aa                	mv	a5,a0
 28e:	853e                	mv	a0,a5
 290:	3d1d                	jal	c6 <puthex>
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	00001517          	auipc	a0,0x1
 296:	9fa50513          	addi	a0,a0,-1542 # c8c <sleep_loop+0x36>
 29a:	3509                	jal	9c <puts>
 29c:	3775                	jal	248 <get_mcause>
 29e:	87aa                	mv	a5,a0
 2a0:	853e                	mv	a0,a5
 2a2:	3515                	jal	c6 <puthex>
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a4:	00001517          	auipc	a0,0x1
 2a8:	9f850513          	addi	a0,a0,-1544 # c9c <sleep_loop+0x46>
 2ac:	3bc5                	jal	9c <puts>
 2ae:	376d                	jal	258 <get_mtval>
 2b0:	87aa                	mv	a5,a0
 2b2:	853e                	mv	a0,a5
 2b4:	3d09                	jal	c6 <puthex>
  putchar('\n');
 2b6:	4529                	li	a0,10
 2b8:	33f1                	jal	84 <putchar>
  sim_halt();
 2ba:	3da1                	jal	112 <sim_halt>

  while(1);
 2bc:	a001                	j	2bc <simple_exc_handler+0x54>

000002be <increment_timecmp>:
}

volatile uint64_t time_elapsed;
uint64_t time_increment;

inline static void increment_timecmp(uint64_t time_base) {
 2be:	7179                	addi	sp,sp,-48
 2c0:	d606                	sw	ra,44(sp)
 2c2:	c42a                	sw	a0,8(sp)
 2c4:	c62e                	sw	a1,12(sp)
  uint64_t current_time = timer_read();
 2c6:	2051                	jal	34a <timer_read>
 2c8:	cc2a                	sw	a0,24(sp)
 2ca:	ce2e                	sw	a1,28(sp)
  current_time += time_base;
 2cc:	4662                	lw	a2,24(sp)
 2ce:	46f2                	lw	a3,28(sp)
 2d0:	4522                	lw	a0,8(sp)
 2d2:	45b2                	lw	a1,12(sp)
 2d4:	00a60733          	add	a4,a2,a0
 2d8:	883a                	mv	a6,a4
 2da:	00c83833          	sltu	a6,a6,a2
 2de:	00b687b3          	add	a5,a3,a1
 2e2:	00f806b3          	add	a3,a6,a5
 2e6:	87b6                	mv	a5,a3
 2e8:	cc3a                	sw	a4,24(sp)
 2ea:	ce3e                	sw	a5,28(sp)
  timecmp_update(current_time);
 2ec:	4562                	lw	a0,24(sp)
 2ee:	45f2                	lw	a1,28(sp)
 2f0:	206d                	jal	39a <timecmp_update>
}
 2f2:	0001                	nop
 2f4:	50b2                	lw	ra,44(sp)
 2f6:	6145                	addi	sp,sp,48
 2f8:	8082                	ret

000002fa <timer_enable>:

void timer_enable(uint64_t time_base) {
 2fa:	1101                	addi	sp,sp,-32
 2fc:	ce06                	sw	ra,28(sp)
 2fe:	c42a                	sw	a0,8(sp)
 300:	c62e                	sw	a1,12(sp)
  time_elapsed = 0;
 302:	00001797          	auipc	a5,0x1
 306:	ad678793          	addi	a5,a5,-1322 # dd8 <time_elapsed>
 30a:	4681                	li	a3,0
 30c:	4701                	li	a4,0
 30e:	c394                	sw	a3,0(a5)
 310:	c3d8                	sw	a4,4(a5)
  time_increment = time_base;
 312:	00001697          	auipc	a3,0x1
 316:	ace68693          	addi	a3,a3,-1330 # de0 <time_increment>
 31a:	4722                	lw	a4,8(sp)
 31c:	47b2                	lw	a5,12(sp)
 31e:	c298                	sw	a4,0(a3)
 320:	c2dc                	sw	a5,4(a3)
  // Set timer values
  increment_timecmp(time_base);
 322:	4522                	lw	a0,8(sp)
 324:	45b2                	lw	a1,12(sp)
 326:	3f61                	jal	2be <increment_timecmp>
  // enable timer interrupt
  asm volatile("csrs  mie, %0\n" : : "r"(0x80));
 328:	08000793          	li	a5,128
 32c:	3047a073          	csrs	mie,a5
  // enable global interrupt
  asm volatile("csrs  mstatus, %0\n" : : "r"(0x8));
 330:	47a1                	li	a5,8
 332:	3007a073          	csrs	mstatus,a5
}
 336:	0001                	nop
 338:	40f2                	lw	ra,28(sp)
 33a:	6105                	addi	sp,sp,32
 33c:	8082                	ret

0000033e <timer_disable>:

void timer_disable(void) { asm volatile("csrc  mie, %0\n" : : "r"(0x80)); }
 33e:	08000793          	li	a5,128
 342:	3047b073          	csrc	mie,a5
 346:	0001                	nop
 348:	8082                	ret

0000034a <timer_read>:

uint64_t timer_read(void) {
 34a:	1141                	addi	sp,sp,-16
  uint32_t current_timeh;
  uint32_t current_time;
  // check if time overflowed while reading and try again
  do {
    current_timeh = DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0);
 34c:	00030837          	lui	a6,0x30
 350:	0811                	addi	a6,a6,4
 352:	00082803          	lw	a6,0(a6) # 30000 <_stack_len+0x28000>
 356:	c642                	sw	a6,12(sp)
    current_time = DEV_READ(TIMER_BASE + TIMER_MTIME, 0);
 358:	00030837          	lui	a6,0x30
 35c:	00082803          	lw	a6,0(a6) # 30000 <_stack_len+0x28000>
 360:	c442                	sw	a6,8(sp)
  } while (current_timeh != DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0));
 362:	00030837          	lui	a6,0x30
 366:	0811                	addi	a6,a6,4
 368:	00082803          	lw	a6,0(a6) # 30000 <_stack_len+0x28000>
 36c:	48b2                	lw	a7,12(sp)
 36e:	fd089fe3          	bne	a7,a6,34c <timer_read+0x2>
  uint64_t final_time = ((uint64_t)current_timeh << 32) | current_time;
 372:	4832                	lw	a6,12(sp)
 374:	8542                	mv	a0,a6
 376:	4581                	li	a1,0
 378:	00051793          	slli	a5,a0,0x0
 37c:	4701                	li	a4,0
 37e:	45a2                	lw	a1,8(sp)
 380:	862e                	mv	a2,a1
 382:	4681                	li	a3,0
 384:	00c765b3          	or	a1,a4,a2
 388:	c02e                	sw	a1,0(sp)
 38a:	8fd5                	or	a5,a5,a3
 38c:	c23e                	sw	a5,4(sp)
  return final_time;
 38e:	4702                	lw	a4,0(sp)
 390:	4792                	lw	a5,4(sp)
}
 392:	853a                	mv	a0,a4
 394:	85be                	mv	a1,a5
 396:	0141                	addi	sp,sp,16
 398:	8082                	ret

0000039a <timecmp_update>:

void timecmp_update(uint64_t new_time) {
 39a:	1141                	addi	sp,sp,-16
 39c:	c42a                	sw	a0,8(sp)
 39e:	c62e                	sw	a1,12(sp)
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, -1);
 3a0:	000306b7          	lui	a3,0x30
 3a4:	06a1                	addi	a3,a3,8
 3a6:	567d                	li	a2,-1
 3a8:	c290                	sw	a2,0(a3)
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMPH, new_time >> 32);
 3aa:	46b2                	lw	a3,12(sp)
 3ac:	0006d713          	srli	a4,a3,0x0
 3b0:	4781                	li	a5,0
 3b2:	000306b7          	lui	a3,0x30
 3b6:	06b1                	addi	a3,a3,12
 3b8:	87ba                	mv	a5,a4
 3ba:	c29c                	sw	a5,0(a3)
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, new_time);
 3bc:	000307b7          	lui	a5,0x30
 3c0:	07a1                	addi	a5,a5,8
 3c2:	4722                	lw	a4,8(sp)
 3c4:	c398                	sw	a4,0(a5)
}
 3c6:	0001                	nop
 3c8:	0141                	addi	sp,sp,16
 3ca:	8082                	ret

000003cc <get_elapsed_time>:

uint64_t get_elapsed_time(void) { return time_elapsed; }
 3cc:	00001797          	auipc	a5,0x1
 3d0:	a0c78793          	addi	a5,a5,-1524 # dd8 <time_elapsed>
 3d4:	4398                	lw	a4,0(a5)
 3d6:	43dc                	lw	a5,4(a5)
 3d8:	853a                	mv	a0,a4
 3da:	85be                	mv	a1,a5
 3dc:	8082                	ret

000003de <simple_timer_handler>:

void simple_timer_handler(void) __attribute__((interrupt));

void simple_timer_handler(void) {
 3de:	7139                	addi	sp,sp,-64
 3e0:	de06                	sw	ra,60(sp)
 3e2:	dc16                	sw	t0,56(sp)
 3e4:	da1a                	sw	t1,52(sp)
 3e6:	d81e                	sw	t2,48(sp)
 3e8:	d62a                	sw	a0,44(sp)
 3ea:	d42e                	sw	a1,40(sp)
 3ec:	d232                	sw	a2,36(sp)
 3ee:	d036                	sw	a3,32(sp)
 3f0:	ce3a                	sw	a4,28(sp)
 3f2:	cc3e                	sw	a5,24(sp)
 3f4:	ca42                	sw	a6,20(sp)
 3f6:	c846                	sw	a7,16(sp)
 3f8:	c672                	sw	t3,12(sp)
 3fa:	c476                	sw	t4,8(sp)
 3fc:	c27a                	sw	t5,4(sp)
 3fe:	c07e                	sw	t6,0(sp)
  increment_timecmp(time_increment);
 400:	00001797          	auipc	a5,0x1
 404:	9e078793          	addi	a5,a5,-1568 # de0 <time_increment>
 408:	4398                	lw	a4,0(a5)
 40a:	43dc                	lw	a5,4(a5)
 40c:	853a                	mv	a0,a4
 40e:	85be                	mv	a1,a5
 410:	357d                	jal	2be <increment_timecmp>
  time_elapsed++;
 412:	00001797          	auipc	a5,0x1
 416:	9c678793          	addi	a5,a5,-1594 # dd8 <time_elapsed>
 41a:	4398                	lw	a4,0(a5)
 41c:	43dc                	lw	a5,4(a5)
 41e:	4505                	li	a0,1
 420:	4581                	li	a1,0
 422:	00a70633          	add	a2,a4,a0
 426:	8832                	mv	a6,a2
 428:	00e83833          	sltu	a6,a6,a4
 42c:	00b786b3          	add	a3,a5,a1
 430:	00d807b3          	add	a5,a6,a3
 434:	86be                	mv	a3,a5
 436:	8732                	mv	a4,a2
 438:	87b6                	mv	a5,a3
 43a:	00001697          	auipc	a3,0x1
 43e:	99e68693          	addi	a3,a3,-1634 # dd8 <time_elapsed>
 442:	c298                	sw	a4,0(a3)
 444:	c2dc                	sw	a5,4(a3)
}
 446:	0001                	nop
 448:	50f2                	lw	ra,60(sp)
 44a:	52e2                	lw	t0,56(sp)
 44c:	5352                	lw	t1,52(sp)
 44e:	53c2                	lw	t2,48(sp)
 450:	5532                	lw	a0,44(sp)
 452:	55a2                	lw	a1,40(sp)
 454:	5612                	lw	a2,36(sp)
 456:	5682                	lw	a3,32(sp)
 458:	4772                	lw	a4,28(sp)
 45a:	47e2                	lw	a5,24(sp)
 45c:	4852                	lw	a6,20(sp)
 45e:	48c2                	lw	a7,16(sp)
 460:	4e32                	lw	t3,12(sp)
 462:	4ea2                	lw	t4,8(sp)
 464:	4f12                	lw	t5,4(sp)
 466:	4f82                	lw	t6,0(sp)
 468:	6121                	addi	sp,sp,64
 46a:	30200073          	mret

0000046e <main>:
//AES IBEX
#ifdef AESIBEX
void aes_mode_ecb(void);
 #endif

int main(void) {
 46e:	7115                	addi	sp,sp,-224
 470:	cf86                	sw	ra,220(sp)
 #endif



#ifdef TinyAES
    asm (    
 472:	00150f13          	addi	t5,a0,1
        "addi    t5,a0,0x1"
);
// AES - Tiny - SSL
uint8_t data_tiny[16]     ={0x6B,0xC1,0xBE,0xE2,0x2E,0x40,0x9F,0x96,0xE9,0x3D,0x7E,0x11,0x73,0x93,0x17,0x2A};
 476:	00001797          	auipc	a5,0x1
 47a:	83678793          	addi	a5,a5,-1994 # cac <sleep_loop+0x56>
 47e:	4390                	lw	a2,0(a5)
 480:	43d4                	lw	a3,4(a5)
 482:	4798                	lw	a4,8(a5)
 484:	47dc                	lw	a5,12(a5)
 486:	c1b2                	sw	a2,192(sp)
 488:	c3b6                	sw	a3,196(sp)
 48a:	c5ba                	sw	a4,200(sp)
 48c:	c7be                	sw	a5,204(sp)
uint8_t key_tiny[16]      ={0x2B,0x7E,0x15,0x16,0x28,0xAE,0xD2,0xA6,0xAB,0xF7,0x15,0x88,0x09,0xCF,0x4F,0x3C};
 48e:	00001797          	auipc	a5,0x1
 492:	82e78793          	addi	a5,a5,-2002 # cbc <sleep_loop+0x66>
 496:	4390                	lw	a2,0(a5)
 498:	43d4                	lw	a3,4(a5)
 49a:	4798                	lw	a4,8(a5)
 49c:	47dc                	lw	a5,12(a5)
 49e:	d932                	sw	a2,176(sp)
 4a0:	db36                	sw	a3,180(sp)
 4a2:	dd3a                	sw	a4,184(sp)
 4a4:	df3e                	sw	a5,188(sp)
struct AES_ctx ctx;
AES_init_ctx(&ctx, key_tiny);
 4a6:	1918                	addi	a4,sp,176
 4a8:	878a                	mv	a5,sp
 4aa:	85ba                	mv	a1,a4
 4ac:	853e                	mv	a0,a5
 4ae:	24a9                	jal	6f8 <AES_init_ctx>
AES_ECB_encrypt(&ctx, data_tiny);
 4b0:	0198                	addi	a4,sp,192
 4b2:	878a                	mv	a5,sp
 4b4:	85ba                	mv	a1,a4
 4b6:	853e                	mv	a0,a5
 4b8:	25c1                	jal	b78 <AES_ECB_encrypt>
//Read the outputs
    asm (    
 4ba:	480e                	lw	a6,192(sp)
 4bc:	489e                	lw	a7,196(sp)
 4be:	492e                	lw	s2,200(sp)
 4c0:	49be                	lw	s3,204(sp)
        "lw	a6,192(sp);"
          "lw	a7,196(sp);"
        "lw	s2,200(sp);"
          "lw	s3,204(sp)"
);
    asm (    
 4c2:	00050f13          	mv	t5,a0
#endif

////////////////////
///End Of Program///
////////////////////
  return(0);
 4c6:	4781                	li	a5,0
}
 4c8:	853e                	mv	a0,a5
 4ca:	40fe                	lw	ra,220(sp)
 4cc:	612d                	addi	sp,sp,224
 4ce:	8082                	ret

000004d0 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 4d0:	7179                	addi	sp,sp,-48
 4d2:	c62a                	sw	a0,12(sp)
 4d4:	c42e                	sw	a1,8(sp)
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 4d6:	d602                	sw	zero,44(sp)
 4d8:	a895                	j	54c <KeyExpansion+0x7c>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 4da:	57b2                	lw	a5,44(sp)
 4dc:	078a                	slli	a5,a5,0x2
 4de:	4722                	lw	a4,8(sp)
 4e0:	973e                	add	a4,a4,a5
 4e2:	57b2                	lw	a5,44(sp)
 4e4:	078a                	slli	a5,a5,0x2
 4e6:	46b2                	lw	a3,12(sp)
 4e8:	97b6                	add	a5,a5,a3
 4ea:	00074703          	lbu	a4,0(a4)
 4ee:	00e78023          	sb	a4,0(a5)
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 4f2:	57b2                	lw	a5,44(sp)
 4f4:	078a                	slli	a5,a5,0x2
 4f6:	0785                	addi	a5,a5,1
 4f8:	4722                	lw	a4,8(sp)
 4fa:	973e                	add	a4,a4,a5
 4fc:	57b2                	lw	a5,44(sp)
 4fe:	078a                	slli	a5,a5,0x2
 500:	0785                	addi	a5,a5,1
 502:	46b2                	lw	a3,12(sp)
 504:	97b6                	add	a5,a5,a3
 506:	00074703          	lbu	a4,0(a4)
 50a:	00e78023          	sb	a4,0(a5)
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 50e:	57b2                	lw	a5,44(sp)
 510:	078a                	slli	a5,a5,0x2
 512:	0789                	addi	a5,a5,2
 514:	4722                	lw	a4,8(sp)
 516:	973e                	add	a4,a4,a5
 518:	57b2                	lw	a5,44(sp)
 51a:	078a                	slli	a5,a5,0x2
 51c:	0789                	addi	a5,a5,2
 51e:	46b2                	lw	a3,12(sp)
 520:	97b6                	add	a5,a5,a3
 522:	00074703          	lbu	a4,0(a4)
 526:	00e78023          	sb	a4,0(a5)
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 52a:	57b2                	lw	a5,44(sp)
 52c:	078a                	slli	a5,a5,0x2
 52e:	078d                	addi	a5,a5,3
 530:	4722                	lw	a4,8(sp)
 532:	973e                	add	a4,a4,a5
 534:	57b2                	lw	a5,44(sp)
 536:	078a                	slli	a5,a5,0x2
 538:	078d                	addi	a5,a5,3
 53a:	46b2                	lw	a3,12(sp)
 53c:	97b6                	add	a5,a5,a3
 53e:	00074703          	lbu	a4,0(a4)
 542:	00e78023          	sb	a4,0(a5)
  for (i = 0; i < Nk; ++i)
 546:	57b2                	lw	a5,44(sp)
 548:	0785                	addi	a5,a5,1
 54a:	d63e                	sw	a5,44(sp)
 54c:	5732                	lw	a4,44(sp)
 54e:	478d                	li	a5,3
 550:	f8e7f5e3          	bgeu	a5,a4,4da <KeyExpansion+0xa>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 554:	4791                	li	a5,4
 556:	d63e                	sw	a5,44(sp)
 558:	a279                	j	6e6 <KeyExpansion+0x216>
  {
    {
      k = (i - 1) * 4;
 55a:	57b2                	lw	a5,44(sp)
 55c:	17fd                	addi	a5,a5,-1
 55e:	078a                	slli	a5,a5,0x2
 560:	d43e                	sw	a5,40(sp)
      tempa[0]=RoundKey[k + 0];
 562:	4732                	lw	a4,12(sp)
 564:	57a2                	lw	a5,40(sp)
 566:	97ba                	add	a5,a5,a4
 568:	0007c783          	lbu	a5,0(a5)
 56c:	00f10e23          	sb	a5,28(sp)
      tempa[1]=RoundKey[k + 1];
 570:	57a2                	lw	a5,40(sp)
 572:	0785                	addi	a5,a5,1
 574:	4732                	lw	a4,12(sp)
 576:	97ba                	add	a5,a5,a4
 578:	0007c783          	lbu	a5,0(a5)
 57c:	00f10ea3          	sb	a5,29(sp)
      tempa[2]=RoundKey[k + 2];
 580:	57a2                	lw	a5,40(sp)
 582:	0789                	addi	a5,a5,2
 584:	4732                	lw	a4,12(sp)
 586:	97ba                	add	a5,a5,a4
 588:	0007c783          	lbu	a5,0(a5)
 58c:	00f10f23          	sb	a5,30(sp)
      tempa[3]=RoundKey[k + 3];
 590:	57a2                	lw	a5,40(sp)
 592:	078d                	addi	a5,a5,3
 594:	4732                	lw	a4,12(sp)
 596:	97ba                	add	a5,a5,a4
 598:	0007c783          	lbu	a5,0(a5)
 59c:	00f10fa3          	sb	a5,31(sp)

    }

    if (i % Nk == 0)
 5a0:	57b2                	lw	a5,44(sp)
 5a2:	8b8d                	andi	a5,a5,3
 5a4:	e7cd                	bnez	a5,64e <KeyExpansion+0x17e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 5a6:	01c14783          	lbu	a5,28(sp)
 5aa:	02f103a3          	sb	a5,39(sp)
        tempa[0] = tempa[1];
 5ae:	01d14783          	lbu	a5,29(sp)
 5b2:	00f10e23          	sb	a5,28(sp)
        tempa[1] = tempa[2];
 5b6:	01e14783          	lbu	a5,30(sp)
 5ba:	00f10ea3          	sb	a5,29(sp)
        tempa[2] = tempa[3];
 5be:	01f14783          	lbu	a5,31(sp)
 5c2:	00f10f23          	sb	a5,30(sp)
        tempa[3] = u8tmp;
 5c6:	02714783          	lbu	a5,39(sp)
 5ca:	00f10fa3          	sb	a5,31(sp)
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 5ce:	01c14783          	lbu	a5,28(sp)
 5d2:	873e                	mv	a4,a5
 5d4:	00000797          	auipc	a5,0x0
 5d8:	6f878793          	addi	a5,a5,1784 # ccc <sbox>
 5dc:	97ba                	add	a5,a5,a4
 5de:	0007c783          	lbu	a5,0(a5)
 5e2:	00f10e23          	sb	a5,28(sp)
        tempa[1] = getSBoxValue(tempa[1]);
 5e6:	01d14783          	lbu	a5,29(sp)
 5ea:	873e                	mv	a4,a5
 5ec:	00000797          	auipc	a5,0x0
 5f0:	6e078793          	addi	a5,a5,1760 # ccc <sbox>
 5f4:	97ba                	add	a5,a5,a4
 5f6:	0007c783          	lbu	a5,0(a5)
 5fa:	00f10ea3          	sb	a5,29(sp)
        tempa[2] = getSBoxValue(tempa[2]);
 5fe:	01e14783          	lbu	a5,30(sp)
 602:	873e                	mv	a4,a5
 604:	00000797          	auipc	a5,0x0
 608:	6c878793          	addi	a5,a5,1736 # ccc <sbox>
 60c:	97ba                	add	a5,a5,a4
 60e:	0007c783          	lbu	a5,0(a5)
 612:	00f10f23          	sb	a5,30(sp)
        tempa[3] = getSBoxValue(tempa[3]);
 616:	01f14783          	lbu	a5,31(sp)
 61a:	873e                	mv	a4,a5
 61c:	00000797          	auipc	a5,0x0
 620:	6b078793          	addi	a5,a5,1712 # ccc <sbox>
 624:	97ba                	add	a5,a5,a4
 626:	0007c783          	lbu	a5,0(a5)
 62a:	00f10fa3          	sb	a5,31(sp)
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 62e:	01c14703          	lbu	a4,28(sp)
 632:	57b2                	lw	a5,44(sp)
 634:	8389                	srli	a5,a5,0x2
 636:	00000697          	auipc	a3,0x0
 63a:	79668693          	addi	a3,a3,1942 # dcc <Rcon>
 63e:	97b6                	add	a5,a5,a3
 640:	0007c783          	lbu	a5,0(a5)
 644:	8fb9                	xor	a5,a5,a4
 646:	0ff7f793          	andi	a5,a5,255
 64a:	00f10e23          	sb	a5,28(sp)
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 64e:	57b2                	lw	a5,44(sp)
 650:	078a                	slli	a5,a5,0x2
 652:	d03e                	sw	a5,32(sp)
 654:	57b2                	lw	a5,44(sp)
 656:	17f1                	addi	a5,a5,-4
 658:	078a                	slli	a5,a5,0x2
 65a:	d43e                	sw	a5,40(sp)
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 65c:	4732                	lw	a4,12(sp)
 65e:	57a2                	lw	a5,40(sp)
 660:	97ba                	add	a5,a5,a4
 662:	0007c683          	lbu	a3,0(a5)
 666:	01c14703          	lbu	a4,28(sp)
 66a:	4632                	lw	a2,12(sp)
 66c:	5782                	lw	a5,32(sp)
 66e:	97b2                	add	a5,a5,a2
 670:	8f35                	xor	a4,a4,a3
 672:	0ff77713          	andi	a4,a4,255
 676:	00e78023          	sb	a4,0(a5)
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 67a:	57a2                	lw	a5,40(sp)
 67c:	0785                	addi	a5,a5,1
 67e:	4732                	lw	a4,12(sp)
 680:	97ba                	add	a5,a5,a4
 682:	0007c683          	lbu	a3,0(a5)
 686:	01d14703          	lbu	a4,29(sp)
 68a:	5782                	lw	a5,32(sp)
 68c:	0785                	addi	a5,a5,1
 68e:	4632                	lw	a2,12(sp)
 690:	97b2                	add	a5,a5,a2
 692:	8f35                	xor	a4,a4,a3
 694:	0ff77713          	andi	a4,a4,255
 698:	00e78023          	sb	a4,0(a5)
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 69c:	57a2                	lw	a5,40(sp)
 69e:	0789                	addi	a5,a5,2
 6a0:	4732                	lw	a4,12(sp)
 6a2:	97ba                	add	a5,a5,a4
 6a4:	0007c683          	lbu	a3,0(a5)
 6a8:	01e14703          	lbu	a4,30(sp)
 6ac:	5782                	lw	a5,32(sp)
 6ae:	0789                	addi	a5,a5,2
 6b0:	4632                	lw	a2,12(sp)
 6b2:	97b2                	add	a5,a5,a2
 6b4:	8f35                	xor	a4,a4,a3
 6b6:	0ff77713          	andi	a4,a4,255
 6ba:	00e78023          	sb	a4,0(a5)
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 6be:	57a2                	lw	a5,40(sp)
 6c0:	078d                	addi	a5,a5,3
 6c2:	4732                	lw	a4,12(sp)
 6c4:	97ba                	add	a5,a5,a4
 6c6:	0007c683          	lbu	a3,0(a5)
 6ca:	01f14703          	lbu	a4,31(sp)
 6ce:	5782                	lw	a5,32(sp)
 6d0:	078d                	addi	a5,a5,3
 6d2:	4632                	lw	a2,12(sp)
 6d4:	97b2                	add	a5,a5,a2
 6d6:	8f35                	xor	a4,a4,a3
 6d8:	0ff77713          	andi	a4,a4,255
 6dc:	00e78023          	sb	a4,0(a5)
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 6e0:	57b2                	lw	a5,44(sp)
 6e2:	0785                	addi	a5,a5,1
 6e4:	d63e                	sw	a5,44(sp)
 6e6:	5732                	lw	a4,44(sp)
 6e8:	02b00793          	li	a5,43
 6ec:	e6e7f7e3          	bgeu	a5,a4,55a <KeyExpansion+0x8a>
  }
}
 6f0:	0001                	nop
 6f2:	0001                	nop
 6f4:	6145                	addi	sp,sp,48
 6f6:	8082                	ret

000006f8 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 6f8:	1101                	addi	sp,sp,-32
 6fa:	ce06                	sw	ra,28(sp)
 6fc:	c62a                	sw	a0,12(sp)
 6fe:	c42e                	sw	a1,8(sp)
  KeyExpansion(ctx->RoundKey, key);
 700:	47b2                	lw	a5,12(sp)
 702:	45a2                	lw	a1,8(sp)
 704:	853e                	mv	a0,a5
 706:	33e9                	jal	4d0 <KeyExpansion>
}
 708:	0001                	nop
 70a:	40f2                	lw	ra,28(sp)
 70c:	6105                	addi	sp,sp,32
 70e:	8082                	ret

00000710 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 710:	1101                	addi	sp,sp,-32
 712:	87aa                	mv	a5,a0
 714:	c42e                	sw	a1,8(sp)
 716:	c232                	sw	a2,4(sp)
 718:	00f107a3          	sb	a5,15(sp)
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 71c:	00010fa3          	sb	zero,31(sp)
 720:	a89d                	j	796 <AddRoundKey+0x86>
  {
    for (j = 0; j < 4; ++j)
 722:	00010f23          	sb	zero,30(sp)
 726:	a8b1                	j	782 <AddRoundKey+0x72>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 728:	01f14703          	lbu	a4,31(sp)
 72c:	01e14783          	lbu	a5,30(sp)
 730:	46a2                	lw	a3,8(sp)
 732:	070a                	slli	a4,a4,0x2
 734:	9736                	add	a4,a4,a3
 736:	97ba                	add	a5,a5,a4
 738:	0007c603          	lbu	a2,0(a5)
 73c:	00f14783          	lbu	a5,15(sp)
 740:	00279713          	slli	a4,a5,0x2
 744:	01f14783          	lbu	a5,31(sp)
 748:	97ba                	add	a5,a5,a4
 74a:	00279713          	slli	a4,a5,0x2
 74e:	01e14783          	lbu	a5,30(sp)
 752:	97ba                	add	a5,a5,a4
 754:	873e                	mv	a4,a5
 756:	4792                	lw	a5,4(sp)
 758:	97ba                	add	a5,a5,a4
 75a:	0007c703          	lbu	a4,0(a5)
 75e:	01f14683          	lbu	a3,31(sp)
 762:	01e14783          	lbu	a5,30(sp)
 766:	8f31                	xor	a4,a4,a2
 768:	0ff77713          	andi	a4,a4,255
 76c:	4622                	lw	a2,8(sp)
 76e:	068a                	slli	a3,a3,0x2
 770:	96b2                	add	a3,a3,a2
 772:	97b6                	add	a5,a5,a3
 774:	00e78023          	sb	a4,0(a5)
    for (j = 0; j < 4; ++j)
 778:	01e14783          	lbu	a5,30(sp)
 77c:	0785                	addi	a5,a5,1
 77e:	00f10f23          	sb	a5,30(sp)
 782:	01e14703          	lbu	a4,30(sp)
 786:	478d                	li	a5,3
 788:	fae7f0e3          	bgeu	a5,a4,728 <AddRoundKey+0x18>
  for (i = 0; i < 4; ++i)
 78c:	01f14783          	lbu	a5,31(sp)
 790:	0785                	addi	a5,a5,1
 792:	00f10fa3          	sb	a5,31(sp)
 796:	01f14703          	lbu	a4,31(sp)
 79a:	478d                	li	a5,3
 79c:	f8e7f3e3          	bgeu	a5,a4,722 <AddRoundKey+0x12>
    }
  }
}
 7a0:	0001                	nop
 7a2:	0001                	nop
 7a4:	6105                	addi	sp,sp,32
 7a6:	8082                	ret

000007a8 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 7a8:	1101                	addi	sp,sp,-32
 7aa:	c62a                	sw	a0,12(sp)
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 7ac:	00010fa3          	sb	zero,31(sp)
 7b0:	a8b9                	j	80e <SubBytes+0x66>
  {
    for (j = 0; j < 4; ++j)
 7b2:	00010f23          	sb	zero,30(sp)
 7b6:	a091                	j	7fa <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 7b8:	01e14703          	lbu	a4,30(sp)
 7bc:	01f14783          	lbu	a5,31(sp)
 7c0:	46b2                	lw	a3,12(sp)
 7c2:	070a                	slli	a4,a4,0x2
 7c4:	9736                	add	a4,a4,a3
 7c6:	97ba                	add	a5,a5,a4
 7c8:	0007c783          	lbu	a5,0(a5)
 7cc:	863e                	mv	a2,a5
 7ce:	01e14683          	lbu	a3,30(sp)
 7d2:	01f14783          	lbu	a5,31(sp)
 7d6:	00000717          	auipc	a4,0x0
 7da:	4f670713          	addi	a4,a4,1270 # ccc <sbox>
 7de:	9732                	add	a4,a4,a2
 7e0:	00074703          	lbu	a4,0(a4)
 7e4:	4632                	lw	a2,12(sp)
 7e6:	068a                	slli	a3,a3,0x2
 7e8:	96b2                	add	a3,a3,a2
 7ea:	97b6                	add	a5,a5,a3
 7ec:	00e78023          	sb	a4,0(a5)
    for (j = 0; j < 4; ++j)
 7f0:	01e14783          	lbu	a5,30(sp)
 7f4:	0785                	addi	a5,a5,1
 7f6:	00f10f23          	sb	a5,30(sp)
 7fa:	01e14703          	lbu	a4,30(sp)
 7fe:	478d                	li	a5,3
 800:	fae7fce3          	bgeu	a5,a4,7b8 <SubBytes+0x10>
  for (i = 0; i < 4; ++i)
 804:	01f14783          	lbu	a5,31(sp)
 808:	0785                	addi	a5,a5,1
 80a:	00f10fa3          	sb	a5,31(sp)
 80e:	01f14703          	lbu	a4,31(sp)
 812:	478d                	li	a5,3
 814:	f8e7ffe3          	bgeu	a5,a4,7b2 <SubBytes+0xa>
    }
  }
}
 818:	0001                	nop
 81a:	0001                	nop
 81c:	6105                	addi	sp,sp,32
 81e:	8082                	ret

00000820 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 820:	1101                	addi	sp,sp,-32
 822:	c62a                	sw	a0,12(sp)
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 824:	47b2                	lw	a5,12(sp)
 826:	0017c783          	lbu	a5,1(a5)
 82a:	00f10fa3          	sb	a5,31(sp)
  (*state)[0][1] = (*state)[1][1];
 82e:	47b2                	lw	a5,12(sp)
 830:	0057c703          	lbu	a4,5(a5)
 834:	47b2                	lw	a5,12(sp)
 836:	00e780a3          	sb	a4,1(a5)
  (*state)[1][1] = (*state)[2][1];
 83a:	47b2                	lw	a5,12(sp)
 83c:	0097c703          	lbu	a4,9(a5)
 840:	47b2                	lw	a5,12(sp)
 842:	00e782a3          	sb	a4,5(a5)
  (*state)[2][1] = (*state)[3][1];
 846:	47b2                	lw	a5,12(sp)
 848:	00d7c703          	lbu	a4,13(a5)
 84c:	47b2                	lw	a5,12(sp)
 84e:	00e784a3          	sb	a4,9(a5)
  (*state)[3][1] = temp;
 852:	47b2                	lw	a5,12(sp)
 854:	01f14703          	lbu	a4,31(sp)
 858:	00e786a3          	sb	a4,13(a5)

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 85c:	47b2                	lw	a5,12(sp)
 85e:	0027c783          	lbu	a5,2(a5)
 862:	00f10fa3          	sb	a5,31(sp)
  (*state)[0][2] = (*state)[2][2];
 866:	47b2                	lw	a5,12(sp)
 868:	00a7c703          	lbu	a4,10(a5)
 86c:	47b2                	lw	a5,12(sp)
 86e:	00e78123          	sb	a4,2(a5)
  (*state)[2][2] = temp;
 872:	47b2                	lw	a5,12(sp)
 874:	01f14703          	lbu	a4,31(sp)
 878:	00e78523          	sb	a4,10(a5)

  temp           = (*state)[1][2];
 87c:	47b2                	lw	a5,12(sp)
 87e:	0067c783          	lbu	a5,6(a5)
 882:	00f10fa3          	sb	a5,31(sp)
  (*state)[1][2] = (*state)[3][2];
 886:	47b2                	lw	a5,12(sp)
 888:	00e7c703          	lbu	a4,14(a5)
 88c:	47b2                	lw	a5,12(sp)
 88e:	00e78323          	sb	a4,6(a5)
  (*state)[3][2] = temp;
 892:	47b2                	lw	a5,12(sp)
 894:	01f14703          	lbu	a4,31(sp)
 898:	00e78723          	sb	a4,14(a5)

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 89c:	47b2                	lw	a5,12(sp)
 89e:	0037c783          	lbu	a5,3(a5)
 8a2:	00f10fa3          	sb	a5,31(sp)
  (*state)[0][3] = (*state)[3][3];
 8a6:	47b2                	lw	a5,12(sp)
 8a8:	00f7c703          	lbu	a4,15(a5)
 8ac:	47b2                	lw	a5,12(sp)
 8ae:	00e781a3          	sb	a4,3(a5)
  (*state)[3][3] = (*state)[2][3];
 8b2:	47b2                	lw	a5,12(sp)
 8b4:	00b7c703          	lbu	a4,11(a5)
 8b8:	47b2                	lw	a5,12(sp)
 8ba:	00e787a3          	sb	a4,15(a5)
  (*state)[2][3] = (*state)[1][3];
 8be:	47b2                	lw	a5,12(sp)
 8c0:	0077c703          	lbu	a4,7(a5)
 8c4:	47b2                	lw	a5,12(sp)
 8c6:	00e785a3          	sb	a4,11(a5)
  (*state)[1][3] = temp;
 8ca:	47b2                	lw	a5,12(sp)
 8cc:	01f14703          	lbu	a4,31(sp)
 8d0:	00e783a3          	sb	a4,7(a5)
}
 8d4:	0001                	nop
 8d6:	6105                	addi	sp,sp,32
 8d8:	8082                	ret

000008da <xtime>:

static uint8_t xtime(uint8_t x)
{
 8da:	1141                	addi	sp,sp,-16
 8dc:	87aa                	mv	a5,a0
 8de:	00f107a3          	sb	a5,15(sp)
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8e2:	00f14783          	lbu	a5,15(sp)
 8e6:	0786                	slli	a5,a5,0x1
 8e8:	01879693          	slli	a3,a5,0x18
 8ec:	86e1                	srai	a3,a3,0x18
 8ee:	00f14783          	lbu	a5,15(sp)
 8f2:	839d                	srli	a5,a5,0x7
 8f4:	0ff7f793          	andi	a5,a5,255
 8f8:	873e                	mv	a4,a5
 8fa:	070e                	slli	a4,a4,0x3
 8fc:	8f1d                	sub	a4,a4,a5
 8fe:	070a                	slli	a4,a4,0x2
 900:	40f707b3          	sub	a5,a4,a5
 904:	0ff7f793          	andi	a5,a5,255
 908:	07e2                	slli	a5,a5,0x18
 90a:	87e1                	srai	a5,a5,0x18
 90c:	8fb5                	xor	a5,a5,a3
 90e:	07e2                	slli	a5,a5,0x18
 910:	87e1                	srai	a5,a5,0x18
 912:	0ff7f793          	andi	a5,a5,255
}
 916:	853e                	mv	a0,a5
 918:	0141                	addi	sp,sp,16
 91a:	8082                	ret

0000091c <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 91c:	7179                	addi	sp,sp,-48
 91e:	d606                	sw	ra,44(sp)
 920:	c62a                	sw	a0,12(sp)
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 922:	00010fa3          	sb	zero,31(sp)
 926:	aaf9                	j	b04 <MixColumns+0x1e8>
  {  
    t   = (*state)[i][0];
 928:	01f14783          	lbu	a5,31(sp)
 92c:	4732                	lw	a4,12(sp)
 92e:	078a                	slli	a5,a5,0x2
 930:	97ba                	add	a5,a5,a4
 932:	0007c783          	lbu	a5,0(a5)
 936:	00f10f23          	sb	a5,30(sp)
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 93a:	01f14783          	lbu	a5,31(sp)
 93e:	4732                	lw	a4,12(sp)
 940:	078a                	slli	a5,a5,0x2
 942:	97ba                	add	a5,a5,a4
 944:	0007c703          	lbu	a4,0(a5)
 948:	01f14783          	lbu	a5,31(sp)
 94c:	46b2                	lw	a3,12(sp)
 94e:	078a                	slli	a5,a5,0x2
 950:	97b6                	add	a5,a5,a3
 952:	0017c783          	lbu	a5,1(a5)
 956:	8fb9                	xor	a5,a5,a4
 958:	0ff7f713          	andi	a4,a5,255
 95c:	01f14783          	lbu	a5,31(sp)
 960:	46b2                	lw	a3,12(sp)
 962:	078a                	slli	a5,a5,0x2
 964:	97b6                	add	a5,a5,a3
 966:	0027c783          	lbu	a5,2(a5)
 96a:	8fb9                	xor	a5,a5,a4
 96c:	0ff7f713          	andi	a4,a5,255
 970:	01f14783          	lbu	a5,31(sp)
 974:	46b2                	lw	a3,12(sp)
 976:	078a                	slli	a5,a5,0x2
 978:	97b6                	add	a5,a5,a3
 97a:	0037c783          	lbu	a5,3(a5)
 97e:	8fb9                	xor	a5,a5,a4
 980:	00f10ea3          	sb	a5,29(sp)
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 984:	01f14783          	lbu	a5,31(sp)
 988:	4732                	lw	a4,12(sp)
 98a:	078a                	slli	a5,a5,0x2
 98c:	97ba                	add	a5,a5,a4
 98e:	0007c703          	lbu	a4,0(a5)
 992:	01f14783          	lbu	a5,31(sp)
 996:	46b2                	lw	a3,12(sp)
 998:	078a                	slli	a5,a5,0x2
 99a:	97b6                	add	a5,a5,a3
 99c:	0017c783          	lbu	a5,1(a5)
 9a0:	8fb9                	xor	a5,a5,a4
 9a2:	00f10e23          	sb	a5,28(sp)
 9a6:	01c14783          	lbu	a5,28(sp)
 9aa:	853e                	mv	a0,a5
 9ac:	373d                	jal	8da <xtime>
 9ae:	87aa                	mv	a5,a0
 9b0:	00f10e23          	sb	a5,28(sp)
 9b4:	01f14783          	lbu	a5,31(sp)
 9b8:	4732                	lw	a4,12(sp)
 9ba:	078a                	slli	a5,a5,0x2
 9bc:	97ba                	add	a5,a5,a4
 9be:	0007c683          	lbu	a3,0(a5)
 9c2:	01c14703          	lbu	a4,28(sp)
 9c6:	01d14783          	lbu	a5,29(sp)
 9ca:	8fb9                	xor	a5,a5,a4
 9cc:	0ff7f713          	andi	a4,a5,255
 9d0:	01f14783          	lbu	a5,31(sp)
 9d4:	8f35                	xor	a4,a4,a3
 9d6:	0ff77713          	andi	a4,a4,255
 9da:	46b2                	lw	a3,12(sp)
 9dc:	078a                	slli	a5,a5,0x2
 9de:	97b6                	add	a5,a5,a3
 9e0:	00e78023          	sb	a4,0(a5)
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 9e4:	01f14783          	lbu	a5,31(sp)
 9e8:	4732                	lw	a4,12(sp)
 9ea:	078a                	slli	a5,a5,0x2
 9ec:	97ba                	add	a5,a5,a4
 9ee:	0017c703          	lbu	a4,1(a5)
 9f2:	01f14783          	lbu	a5,31(sp)
 9f6:	46b2                	lw	a3,12(sp)
 9f8:	078a                	slli	a5,a5,0x2
 9fa:	97b6                	add	a5,a5,a3
 9fc:	0027c783          	lbu	a5,2(a5)
 a00:	8fb9                	xor	a5,a5,a4
 a02:	00f10e23          	sb	a5,28(sp)
 a06:	01c14783          	lbu	a5,28(sp)
 a0a:	853e                	mv	a0,a5
 a0c:	35f9                	jal	8da <xtime>
 a0e:	87aa                	mv	a5,a0
 a10:	00f10e23          	sb	a5,28(sp)
 a14:	01f14783          	lbu	a5,31(sp)
 a18:	4732                	lw	a4,12(sp)
 a1a:	078a                	slli	a5,a5,0x2
 a1c:	97ba                	add	a5,a5,a4
 a1e:	0017c683          	lbu	a3,1(a5)
 a22:	01c14703          	lbu	a4,28(sp)
 a26:	01d14783          	lbu	a5,29(sp)
 a2a:	8fb9                	xor	a5,a5,a4
 a2c:	0ff7f713          	andi	a4,a5,255
 a30:	01f14783          	lbu	a5,31(sp)
 a34:	8f35                	xor	a4,a4,a3
 a36:	0ff77713          	andi	a4,a4,255
 a3a:	46b2                	lw	a3,12(sp)
 a3c:	078a                	slli	a5,a5,0x2
 a3e:	97b6                	add	a5,a5,a3
 a40:	00e780a3          	sb	a4,1(a5)
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 a44:	01f14783          	lbu	a5,31(sp)
 a48:	4732                	lw	a4,12(sp)
 a4a:	078a                	slli	a5,a5,0x2
 a4c:	97ba                	add	a5,a5,a4
 a4e:	0027c703          	lbu	a4,2(a5)
 a52:	01f14783          	lbu	a5,31(sp)
 a56:	46b2                	lw	a3,12(sp)
 a58:	078a                	slli	a5,a5,0x2
 a5a:	97b6                	add	a5,a5,a3
 a5c:	0037c783          	lbu	a5,3(a5)
 a60:	8fb9                	xor	a5,a5,a4
 a62:	00f10e23          	sb	a5,28(sp)
 a66:	01c14783          	lbu	a5,28(sp)
 a6a:	853e                	mv	a0,a5
 a6c:	35bd                	jal	8da <xtime>
 a6e:	87aa                	mv	a5,a0
 a70:	00f10e23          	sb	a5,28(sp)
 a74:	01f14783          	lbu	a5,31(sp)
 a78:	4732                	lw	a4,12(sp)
 a7a:	078a                	slli	a5,a5,0x2
 a7c:	97ba                	add	a5,a5,a4
 a7e:	0027c683          	lbu	a3,2(a5)
 a82:	01c14703          	lbu	a4,28(sp)
 a86:	01d14783          	lbu	a5,29(sp)
 a8a:	8fb9                	xor	a5,a5,a4
 a8c:	0ff7f713          	andi	a4,a5,255
 a90:	01f14783          	lbu	a5,31(sp)
 a94:	8f35                	xor	a4,a4,a3
 a96:	0ff77713          	andi	a4,a4,255
 a9a:	46b2                	lw	a3,12(sp)
 a9c:	078a                	slli	a5,a5,0x2
 a9e:	97b6                	add	a5,a5,a3
 aa0:	00e78123          	sb	a4,2(a5)
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 aa4:	01f14783          	lbu	a5,31(sp)
 aa8:	4732                	lw	a4,12(sp)
 aaa:	078a                	slli	a5,a5,0x2
 aac:	97ba                	add	a5,a5,a4
 aae:	0037c703          	lbu	a4,3(a5)
 ab2:	01e14783          	lbu	a5,30(sp)
 ab6:	8fb9                	xor	a5,a5,a4
 ab8:	00f10e23          	sb	a5,28(sp)
 abc:	01c14783          	lbu	a5,28(sp)
 ac0:	853e                	mv	a0,a5
 ac2:	3d21                	jal	8da <xtime>
 ac4:	87aa                	mv	a5,a0
 ac6:	00f10e23          	sb	a5,28(sp)
 aca:	01f14783          	lbu	a5,31(sp)
 ace:	4732                	lw	a4,12(sp)
 ad0:	078a                	slli	a5,a5,0x2
 ad2:	97ba                	add	a5,a5,a4
 ad4:	0037c683          	lbu	a3,3(a5)
 ad8:	01c14703          	lbu	a4,28(sp)
 adc:	01d14783          	lbu	a5,29(sp)
 ae0:	8fb9                	xor	a5,a5,a4
 ae2:	0ff7f713          	andi	a4,a5,255
 ae6:	01f14783          	lbu	a5,31(sp)
 aea:	8f35                	xor	a4,a4,a3
 aec:	0ff77713          	andi	a4,a4,255
 af0:	46b2                	lw	a3,12(sp)
 af2:	078a                	slli	a5,a5,0x2
 af4:	97b6                	add	a5,a5,a3
 af6:	00e781a3          	sb	a4,3(a5)
  for (i = 0; i < 4; ++i)
 afa:	01f14783          	lbu	a5,31(sp)
 afe:	0785                	addi	a5,a5,1
 b00:	00f10fa3          	sb	a5,31(sp)
 b04:	01f14703          	lbu	a4,31(sp)
 b08:	478d                	li	a5,3
 b0a:	e0e7ffe3          	bgeu	a5,a4,928 <MixColumns+0xc>
  }
}
 b0e:	0001                	nop
 b10:	0001                	nop
 b12:	50b2                	lw	ra,44(sp)
 b14:	6145                	addi	sp,sp,48
 b16:	8082                	ret

00000b18 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1) */

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 b18:	7179                	addi	sp,sp,-48
 b1a:	d606                	sw	ra,44(sp)
 b1c:	c62a                	sw	a0,12(sp)
 b1e:	c42e                	sw	a1,8(sp)
  uint8_t round = 0;
 b20:	00010fa3          	sb	zero,31(sp)

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey); 
 b24:	4622                	lw	a2,8(sp)
 b26:	45b2                	lw	a1,12(sp)
 b28:	4501                	li	a0,0
 b2a:	36dd                	jal	710 <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 b2c:	4785                	li	a5,1
 b2e:	00f10fa3          	sb	a5,31(sp)
 b32:	a015                	j	b56 <Cipher+0x3e>
  {
    SubBytes(state);
 b34:	4532                	lw	a0,12(sp)
 b36:	398d                	jal	7a8 <SubBytes>
    ShiftRows(state);
 b38:	4532                	lw	a0,12(sp)
 b3a:	31dd                	jal	820 <ShiftRows>
    MixColumns(state);
 b3c:	4532                	lw	a0,12(sp)
 b3e:	3bf9                	jal	91c <MixColumns>
    AddRoundKey(round, state, RoundKey);
 b40:	01f14783          	lbu	a5,31(sp)
 b44:	4622                	lw	a2,8(sp)
 b46:	45b2                	lw	a1,12(sp)
 b48:	853e                	mv	a0,a5
 b4a:	36d9                	jal	710 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 b4c:	01f14783          	lbu	a5,31(sp)
 b50:	0785                	addi	a5,a5,1
 b52:	00f10fa3          	sb	a5,31(sp)
 b56:	01f14703          	lbu	a4,31(sp)
 b5a:	47a5                	li	a5,9
 b5c:	fce7fce3          	bgeu	a5,a4,b34 <Cipher+0x1c>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 b60:	4532                	lw	a0,12(sp)
 b62:	3199                	jal	7a8 <SubBytes>
  ShiftRows(state);
 b64:	4532                	lw	a0,12(sp)
 b66:	396d                	jal	820 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 b68:	4622                	lw	a2,8(sp)
 b6a:	45b2                	lw	a1,12(sp)
 b6c:	4529                	li	a0,10
 b6e:	364d                	jal	710 <AddRoundKey>
}
 b70:	0001                	nop
 b72:	50b2                	lw	ra,44(sp)
 b74:	6145                	addi	sp,sp,48
 b76:	8082                	ret

00000b78 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 b78:	1101                	addi	sp,sp,-32
 b7a:	ce06                	sw	ra,28(sp)
 b7c:	c62a                	sw	a0,12(sp)
 b7e:	c42e                	sw	a1,8(sp)
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 b80:	47b2                	lw	a5,12(sp)
 b82:	85be                	mv	a1,a5
 b84:	4522                	lw	a0,8(sp)
 b86:	3f49                	jal	b18 <Cipher>
}
 b88:	0001                	nop
 b8a:	40f2                	lw	ra,28(sp)
 b8c:	6105                	addi	sp,sp,32
 b8e:	8082                	ret

00000b90 <memcpy>:
}

#endif // #if defined(CTR) && (CTR == 1)

void memcpy(void *dest, void *src, int n)
{
 b90:	1101                	addi	sp,sp,-32
 b92:	c62a                	sw	a0,12(sp)
 b94:	c42e                	sw	a1,8(sp)
 b96:	c232                	sw	a2,4(sp)
	int i;
   // Typecast src and dest addresses to (char *)
   char *csrc = (char *)src;
 b98:	47a2                	lw	a5,8(sp)
 b9a:	cc3e                	sw	a5,24(sp)
   char *cdest = (char *)dest;
 b9c:	47b2                	lw	a5,12(sp)
 b9e:	ca3e                	sw	a5,20(sp)
 
   // Copy contents of src[] to dest[]
   for ( i=0; i<n; i++)
 ba0:	ce02                	sw	zero,28(sp)
 ba2:	a831                	j	bbe <memcpy+0x2e>
       cdest[i] = csrc[i];
 ba4:	47f2                	lw	a5,28(sp)
 ba6:	4762                	lw	a4,24(sp)
 ba8:	973e                	add	a4,a4,a5
 baa:	47f2                	lw	a5,28(sp)
 bac:	46d2                	lw	a3,20(sp)
 bae:	97b6                	add	a5,a5,a3
 bb0:	00074703          	lbu	a4,0(a4)
 bb4:	00e78023          	sb	a4,0(a5)
   for ( i=0; i<n; i++)
 bb8:	47f2                	lw	a5,28(sp)
 bba:	0785                	addi	a5,a5,1
 bbc:	ce3e                	sw	a5,28(sp)
 bbe:	4772                	lw	a4,28(sp)
 bc0:	4792                	lw	a5,4(sp)
 bc2:	fef741e3          	blt	a4,a5,ba4 <memcpy+0x14>
} 
 bc6:	0001                	nop
 bc8:	0001                	nop
 bca:	6105                	addi	sp,sp,32
 bcc:	8082                	ret

00000bce <default_exc_handler>:
  jal x0, simple_exc_handler
 bce:	e9aff06f          	j	268 <simple_exc_handler>

00000bd2 <timer_handler>:
  jal x0, simple_timer_handler
 bd2:	80dff06f          	j	3de <simple_timer_handler>

00000bd6 <reset_handler>:
  mv  x1, x0
 bd6:	00000093          	li	ra,0
  mv  x2, x1
 bda:	8106                	mv	sp,ra
  mv  x3, x1
 bdc:	8186                	mv	gp,ra
  mv  x4, x1
 bde:	8206                	mv	tp,ra
  mv  x5, x1
 be0:	8286                	mv	t0,ra
  mv  x6, x1
 be2:	8306                	mv	t1,ra
  mv  x7, x1
 be4:	8386                	mv	t2,ra
  mv  x8, x1
 be6:	8406                	mv	s0,ra
  mv  x9, x1
 be8:	8486                	mv	s1,ra
  mv x10, x1
 bea:	8506                	mv	a0,ra
  mv x11, x1
 bec:	8586                	mv	a1,ra
  mv x12, x1
 bee:	8606                	mv	a2,ra
  mv x13, x1
 bf0:	8686                	mv	a3,ra
  mv x14, x1
 bf2:	8706                	mv	a4,ra
  mv x15, x1
 bf4:	8786                	mv	a5,ra
  mv x16, x1
 bf6:	8806                	mv	a6,ra
  mv x17, x1
 bf8:	8886                	mv	a7,ra
  mv x18, x1
 bfa:	8906                	mv	s2,ra
  mv x19, x1
 bfc:	8986                	mv	s3,ra
  mv x20, x1
 bfe:	8a06                	mv	s4,ra
  mv x21, x1
 c00:	8a86                	mv	s5,ra
  mv x22, x1
 c02:	8b06                	mv	s6,ra
  mv x23, x1
 c04:	8b86                	mv	s7,ra
  mv x24, x1
 c06:	8c06                	mv	s8,ra
  mv x25, x1
 c08:	8c86                	mv	s9,ra
  mv x26, x1
 c0a:	8d06                	mv	s10,ra
  mv x27, x1
 c0c:	8d86                	mv	s11,ra
  mv x28, x1
 c0e:	8e06                	mv	t3,ra
  mv x29, x1
 c10:	8e86                	mv	t4,ra
  mv x30, x1
 c12:	8f06                	mv	t5,ra
  mv x31, x1
 c14:	8f86                	mv	t6,ra
  la   x2, _stack_start
 c16:	000ff117          	auipc	sp,0xff
 c1a:	3ea10113          	addi	sp,sp,1002 # 100000 <_stack_start>

00000c1e <_start>:
  la x26, _bss_start
 c1e:	00000d17          	auipc	s10,0x0
 c22:	1bad0d13          	addi	s10,s10,442 # dd8 <time_elapsed>
  la x27, _bss_end
 c26:	00000d97          	auipc	s11,0x0
 c2a:	1c2d8d93          	addi	s11,s11,450 # de8 <_bss_end>
  bge x26, x27, zero_loop_end
 c2e:	01bd5763          	bge	s10,s11,c3c <main_entry>

00000c32 <zero_loop>:
  sw x0, 0(x26)
 c32:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 c36:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 c38:	ffaddde3          	bge	s11,s10,c32 <zero_loop>

00000c3c <main_entry>:
  addi x10, x0, 0
 c3c:	00000513          	li	a0,0
  addi x11, x0, 0
 c40:	00000593          	li	a1,0
  jal x1, main
 c44:	82bff0ef          	jal	ra,46e <main>
  li x5, SIM_CTRL_BASE + SIM_CTRL_CTRL
 c48:	000202b7          	lui	t0,0x20
 c4c:	00428293          	addi	t0,t0,4 # 20004 <_stack_len+0x18004>
  li x6, 1
 c50:	4305                	li	t1,1
  sw x6, 0(x5)
 c52:	0062a023          	sw	t1,0(t0)

00000c56 <sleep_loop>:
  wfi
 c56:	10500073          	wfi
  j sleep_loop
 c5a:	bff5                	j	c56 <sleep_loop>

Déassemblage de la section .rodata :

00000c5c <sbox-0x70>:
 c5c:	5845                	li	a6,-15
 c5e:	54504543          	0x54504543
 c62:	4f49                	li	t5,18
 c64:	214e                	fld	ft2,208(sp)
 c66:	2121                	jal	106e <_bss_end+0x286>
 c68:	000a                	c.slli	zero,0x2
 c6a:	0000                	unimp
 c6c:	3d3d                	jal	aaa <MixColumns+0x18e>
 c6e:	3d3d                	jal	aac <MixColumns+0x190>
 c70:	3d3d                	jal	aae <MixColumns+0x192>
 c72:	3d3d                	jal	ab0 <MixColumns+0x194>
 c74:	3d3d                	jal	ab2 <MixColumns+0x196>
 c76:	3d3d                	jal	ab4 <MixColumns+0x198>
 c78:	000a                	c.slli	zero,0x2
 c7a:	0000                	unimp
 c7c:	454d                	li	a0,19
 c7e:	4350                	lw	a2,4(a4)
 c80:	203a                	fld	ft0,392(sp)
 c82:	2020                	fld	fs0,64(s0)
 c84:	7830                	flw	fa2,112(s0)
 c86:	3025                	jal	4ae <main+0x40>
 c88:	0058                	addi	a4,sp,4
 c8a:	0000                	unimp
 c8c:	4d0a                	lw	s10,128(sp)
 c8e:	53554143          	fmadd.d	ft2,fa0,fs5,fa0,rmm
 c92:	3a45                	jal	642 <KeyExpansion+0x172>
 c94:	3020                	fld	fs0,96(s0)
 c96:	2578                	fld	fa4,200(a0)
 c98:	5830                	lw	a2,112(s0)
 c9a:	0000                	unimp
 c9c:	4d0a                	lw	s10,128(sp)
 c9e:	5654                	lw	a3,44(a2)
 ca0:	4c41                	li	s8,16
 ca2:	203a                	fld	ft0,392(sp)
 ca4:	3020                	fld	fs0,96(s0)
 ca6:	2578                	fld	fa4,200(a0)
 ca8:	5830                	lw	a2,112(s0)
 caa:	0000                	unimp
 cac:	e2bec16b          	0xe2bec16b
 cb0:	402e                	0x402e
 cb2:	969f 3de9 117e      	0x117e3de9969f
 cb8:	2a179373          	csrrw	t1,0x2a1,a5
 cbc:	16157e2b          	0x16157e2b
 cc0:	ae28                	fsd	fa0,88(a2)
 cc2:	a6d2                	fsd	fs4,328(sp)
 cc4:	8815f7ab          	0x8815f7ab
 cc8:	cf09                	beqz	a4,ce2 <sbox+0x16>
 cca:	          	0x7c633c4f

00000ccc <sbox>:
static const uint8_t sbox[256] = {
 ccc:	7b777c63          	bgeu	a4,s7,1484 <_bss_end+0x69c>
 cd0:	6bf2                	flw	fs7,28(sp)
 cd2:	0130c56f          	jal	a0,d4e4 <_stack_len+0x54e4>
 cd6:	d7fe2b67          	0xd7fe2b67
 cda:	82ca76ab          	0x82ca76ab
 cde:	7dc9                	lui	s11,0xffff2
 ce0:	59fa                	lw	s3,188(sp)
 ce2:	d4adf047          	0xd4adf047
 ce6:	afa2                	fsd	fs0,472(sp)
 ce8:	a49c                	fsd	fa5,8(s1)
 cea:	c072                	sw	t3,0(sp)
 cec:	2693fdb7          	lui	s11,0x2693f
 cf0:	3f36                	fld	ft10,360(sp)
 cf2:	a534ccf7          	0xa534ccf7
 cf6:	f1e5                	bnez	a1,cd6 <sbox+0xa>
 cf8:	d871                	beqz	s0,ccc <sbox>
 cfa:	1531                	addi	a0,a0,-20
 cfc:	c704                	sw	s1,8(a4)
 cfe:	9618c323          	0x9618c323
 d02:	9a05                	andi	a2,a2,-31
 d04:	e2801207          	0xe2801207
 d08:	75b227eb          	0x75b227eb
 d0c:	8309                	srli	a4,a4,0x2
 d0e:	1a2c                	addi	a1,sp,312
 d10:	a05a6e1b          	0xa05a6e1b
 d14:	3b52                	fld	fs6,304(sp)
 d16:	b3d6                	fsd	fs5,480(sp)
 d18:	e329                	bnez	a4,d5a <sbox+0x8e>
 d1a:	d153842f          	0xd153842f
 d1e:	ed00                	fsw	fs0,24(a0)
 d20:	fc20                	fsw	fs0,120(s0)
 d22:	5bb1                	li	s7,-20
 d24:	cb6a                	sw	s10,148(sp)
 d26:	39be                	fld	fs3,488(sp)
 d28:	4c4a                	lw	s8,144(sp)
 d2a:	cf58                	sw	a4,28(a4)
 d2c:	efd0                	fsw	fa2,28(a5)
 d2e:	fbaa                	fsw	fa0,244(sp)
 d30:	85334d43          	0x85334d43
 d34:	f945                	bnez	a0,ce4 <sbox+0x18>
 d36:	7f02                	flw	ft10,32(sp)
 d38:	3c50                	fld	fa2,184(s0)
 d3a:	a89f a351 8f40      	0x8f40a351a89f
 d40:	9d92                	add	s11,s11,tp
 d42:	f538                	fsw	fa4,104(a0)
 d44:	b6bc                	fsd	fa5,104(a3)
 d46:	21da                	fld	ft3,400(sp)
 d48:	ff10                	fsw	fa2,56(a4)
 d4a:	0ccdd2f3          	csrrwi	t0,0xcc,27
 d4e:	975fec13          	ori	s8,t6,-1675
 d52:	1744                	addi	s1,sp,932
 d54:	a7c4                	fsd	fs1,136(a5)
 d56:	3d7e                	fld	fs10,504(sp)
 d58:	5d64                	lw	s1,124(a0)
 d5a:	7319                	lui	t1,0xfffe6
 d5c:	8160                	0x8160
 d5e:	2a22dc4f          	fnmadd.d	fs8,ft5,ft2,ft5,unknown
 d62:	8890                	0x8890
 d64:	ee46                	fsw	fa7,28(sp)
 d66:	14b8                	addi	a4,sp,616
 d68:	5ede                	lw	t4,244(sp)
 d6a:	32e0db0b          	0x32e0db0b
 d6e:	0a3a                	slli	s4,s4,0xe
 d70:	0649                	addi	a2,a2,18
 d72:	5c24                	lw	s1,120(s0)
 d74:	d3c2                	sw	a6,228(sp)
 d76:	62ac                	flw	fa1,64(a3)
 d78:	9591                	srai	a1,a1,0x24
 d7a:	79e4                	flw	fs1,116(a1)
 d7c:	6d37c8e7          	0x6d37c8e7
 d80:	d58d                	beqz	a1,caa <sleep_loop+0x54>
 d82:	a94e                	fsd	fs3,144(sp)
 d84:	566c                	lw	a1,108(a2)
 d86:	eaf4                	fsw	fa3,84(a3)
 d88:	7a65                	lui	s4,0xffff9
 d8a:	08ae                	slli	a7,a7,0xb
 d8c:	78ba                	flw	fa7,172(sp)
 d8e:	2e25                	jal	10c6 <_bss_end+0x2de>
 d90:	a61c                	fsd	fa5,8(a2)
 d92:	c6b4                	sw	a3,72(a3)
 d94:	dde8                	sw	a0,124(a1)
 d96:	1f74                	addi	a3,sp,956
 d98:	8a8bbd4b          	fnmsub.d	fs10,fs7,fs0,fa7,rup
 d9c:	3e70                	fld	fa2,248(a2)
 d9e:	66b5                	lui	a3,0xd
 da0:	0348                	addi	a0,sp,388
 da2:	0ef6                	slli	t4,t4,0x1d
 da4:	3561                	jal	c2c <_start+0xe>
 da6:	c186b957          	0xc186b957
 daa:	9e1d                	0x9e1d
 dac:	f8e1                	bnez	s1,d7c <sbox+0xb0>
 dae:	1198                	addi	a4,sp,224
 db0:	d969                	beqz	a0,d82 <sbox+0xb6>
 db2:	948e                	add	s1,s1,gp
 db4:	e9871e9b          	0xe9871e9b
 db8:	55ce                	lw	a1,240(sp)
 dba:	df28                	sw	a0,120(a4)
 dbc:	a18c                	fsd	fa1,0(a1)
 dbe:	0d89                	addi	s11,s11,2
 dc0:	6842e6bf 0f2d9941 	0xf2d99416842e6bf
 dc8:	54b0                	lw	a2,104(s1)
 dca:	          	0x18d16bb

00000dcc <Rcon>:
static const uint8_t Rcon[11] = {
 dcc:	018d                	addi	gp,gp,3
 dce:	0402                	c.slli64	s0
 dd0:	1008                	addi	a0,sp,32
 dd2:	4020                	lw	s0,64(s0)
 dd4:	1b80                	addi	s0,sp,496
 dd6:	36              	Adresse 0x0000000000000dd6 hors intervalle.


Déassemblage de la section .data :

00000dd7 <.data>:
	...

Déassemblage de la section .bss :

00000dd8 <time_elapsed>:
	...

00000de0 <time_increment>:
	...

Déassemblage de la section .stack :

000f8000 <_stack-0x2000>:
	...

Déassemblage de la section .debug_info :

00000000 <.debug_info>:
  .endr
   0:	0000033f 00000004 	0x40000033f
   8:	0000                	unimp
   a:	0104                	addi	s1,sp,128
   c:	0039                	c.nop	14
   e:	0000                	unimp
  10:	be0c                	fsd	fa1,56(a2)
  12:	0000                	unimp
  14:	e900                	fsw	fs0,16(a0)
  16:	0001                	nop
  18:	8400                	0x8400
  1a:	0000                	unimp
  jal x0, timer_handler
  1c:	ea00                	fsw	fs0,16(a2)
  1e:	00000003          	lb	zero,0(zero) # 0 <putchar-0x84>
  .endr
  22:	0000                	unimp
  24:	0200                	addi	s0,sp,256
  26:	0601                	addi	a2,a2,0
  28:	0152                	slli	sp,sp,0x14
  2a:	0000                	unimp
  2c:	0202                	c.slli64	tp
  2e:	7405                	lui	s0,0xfffe1
  30:	0002                	c.slli64	zero
  32:	0200                	addi	s0,sp,256
  34:	0504                	addi	s1,sp,640
  36:	024a                	slli	tp,tp,0x12
  38:	0000                	unimp
  3a:	0802                	c.slli64	a6
  3c:	4505                	li	a0,1
  3e:	0002                	c.slli64	zero
  40:	0200                	addi	s0,sp,256
  42:	0801                	addi	a6,a6,0
  44:	0150                	addi	a2,sp,132
  46:	0000                	unimp
  48:	0202                	c.slli64	tp
  4a:	00015e07          	0x15e07
  4e:	0300                	addi	s0,sp,384
  50:	0299                	addi	t0,t0,6
  52:	0000                	unimp
  54:	3402                	fld	fs0,32(sp)
  56:	5b19                	li	s6,-26
  58:	0000                	unimp
  5a:	0200                	addi	s0,sp,256
  5c:	0704                	addi	s1,sp,896
  5e:	01b4                	addi	a3,sp,200
  60:	0000                	unimp
  62:	00013203          	0x13203
  66:	0200                	addi	s0,sp,256
  68:	00731937          	lui	s2,0x731
  6c:	0000                	unimp
  6e:	6204                	flw	fs1,0(a2)
  70:	0000                	unimp
  72:	0200                	addi	s0,sp,256
  74:	0708                	addi	a0,sp,896
  76:	000001af          	0x1af
  7a:	0405                	addi	s0,s0,1
  7c:	6905                	lui	s2,0x1
  7e:	746e                	flw	fs0,248(sp)
  jal x0, reset_handler
  80:	0200                	addi	s0,sp,256
  82:	0704                	addi	s1,sp,896
int putchar(int c) {
  84:	01b9                	addi	gp,gp,14
  86:	0000                	unimp
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	5306                	lw	t1,96(sp)
  8a:	0002                	c.slli64	zero
  8c:	0100                	addi	s0,sp,128
  8e:	006e138f          	0x6e138f
  92:	0000                	unimp
  return c;
  94:	0305                	addi	t1,t1,1
}
  96:	0dd8                	addi	a4,sp,724
  98:	0000                	unimp
  9a:	3606                	fld	fa2,96(sp)
int puts(const char *str) {
  9c:	0002                	c.slli64	zero
  9e:	0100                	addi	s0,sp,128
  a0:	0a90                	addi	a2,sp,336
  while (*str) {
  a2:	0062                	c.slli	zero,0x18
    putchar(*str++);
  a4:	0000                	unimp
  a6:	0305                	addi	t1,t1,1
  a8:	0de0                	addi	s0,sp,732
  aa:	0000                	unimp
  ac:	0002ba07          	fld	fs4,0(t0)
  b0:	0100                	addi	s0,sp,128
  b2:	03de06bb          	0x3de06bb
  while (*str) {
  b6:	0000                	unimp
  b8:	0090                	addi	a2,sp,64
  ba:	0000                	unimp
  return 0;
  bc:	9c01                	0x9c01
}
  be:	7e08                	flw	fa0,56(a2)
  c0:	0002                	c.slli64	zero
  c2:	0100                	addi	s0,sp,128
  c4:	00620ab7          	lui	s5,0x620
void puthex(uint32_t h) {
  c8:	0000                	unimp
  ca:	03cc                	addi	a1,sp,452
  for (int i = 0; i < 8; i++) {
  cc:	0000                	unimp
  ce:	0012                	c.slli	zero,0x4
    cur_digit = h >> 28;
  d0:	0000                	unimp
  d2:	9c01                	0x9c01
  d4:	7909                	lui	s2,0xfffe2
    if (cur_digit < 10)
  d6:	0001                	nop
  d8:	0100                	addi	s0,sp,128
  da:	06b1                	addi	a3,a3,12
  dc:	039a                	slli	t2,t2,0x6
      putchar('0' + cur_digit);
  de:	0000                	unimp
  e0:	0032                	c.slli	zero,0xc
  e2:	0000                	unimp
  e4:	9c01                	0x9c01
  e6:	00fa                	slli	ra,ra,0x1e
  e8:	0000                	unimp
      putchar('A' - 10 + cur_digit);
  ea:	6b0a                	flw	fs6,128(sp)
  ec:	0002                	c.slli64	zero
  ee:	0100                	addi	s0,sp,128
  f0:	1eb1                	addi	t4,t4,-20
  f2:	0062                	c.slli	zero,0x18
    h <<= 4;
  f4:	0000                	unimp
  f6:	9102                	jalr	sp
  f8:	0078                	addi	a4,sp,12
  for (int i = 0; i < 8; i++) {
  fa:	0002600b          	0x2600b
  fe:	0100                	addi	s0,sp,128
 100:	0aa5                	addi	s5,s5,9
 102:	0062                	c.slli	zero,0x18
 104:	0000                	unimp
 106:	034a                	slli	t1,t1,0x12
}
 108:	0000                	unimp
 10a:	0050                	addi	a2,sp,4
 10c:	0000                	unimp
 10e:	9c01                	0x9c01
 110:	0142                	slli	sp,sp,0x10
void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	0000                	unimp
 114:	cd0c                	sw	a1,24(a0)
 116:	0001                	nop
 118:	0100                	addi	s0,sp,128
 11a:	0ca6                	slli	s9,s9,0x9
 11c:	0000004f          	fnmadd.s	ft0,ft0,ft0,ft0,rne
  asm volatile(
 120:	9102                	jalr	sp
 122:	0c7c                	addi	a5,sp,540
 124:	002c                	addi	a1,sp,8
 126:	0000                	unimp
 128:	a701                	j	828 <ShiftRows+0x8>
 12a:	4f0c                	lw	a1,24(a4)
 12c:	0000                	unimp
 12e:	0200                	addi	s0,sp,256
 130:	7891                	lui	a7,0xfffe4
 132:	880c                	0x880c
 134:	0001                	nop
 136:	0100                	addi	s0,sp,128
 138:	0cad                	addi	s9,s9,11
 13a:	0062                	c.slli	zero,0x18
 13c:	0000                	unimp
 13e:	9102                	jalr	sp
 140:	0070                	addi	a2,sp,12
 142:	db0d                	beqz	a4,74 <putchar-0x10>
 144:	0001                	nop
 146:	0100                	addi	s0,sp,128
 148:	033e06a3          	sb	s3,45(t3)
 14c:	0000                	unimp
 14e:	000c                	0xc
 150:	0000                	unimp
 152:	9c01                	0x9c01
 154:	250e                	fld	fa0,192(sp)
 156:	0001                	nop
 158:	0100                	addi	s0,sp,128
 15a:	0698                	addi	a4,sp,832
 15c:	02fa                	slli	t0,t0,0x1e
 15e:	0000                	unimp
 160:	0044                	addi	s1,sp,4
 162:	0000                	unimp
 164:	9c01                	0x9c01
 166:	017a                	slli	sp,sp,0x1e
 168:	0000                	unimp
 16a:	a50a                	fsd	ft2,136(sp)
 16c:	0001                	nop
 16e:	0100                	addi	s0,sp,128
 170:	1c98                	addi	a4,sp,624
 172:	0062                	c.slli	zero,0x18
 174:	0000                	unimp
 176:	9102                	jalr	sp
 178:	0068                	addi	a0,sp,12
 17a:	0001930f          	0x1930f
 17e:	0100                	addi	s0,sp,128
 180:	1492                	slli	s1,s1,0x24
 182:	02be                	slli	t0,t0,0xf
 184:	0000                	unimp
 186:	003c                	addi	a5,sp,8
 188:	0000                	unimp
 18a:	9c01                	0x9c01
 18c:	000001af          	0x1af
 190:	a50a                	fsd	ft2,136(sp)
 192:	0001                	nop
 194:	0100                	addi	s0,sp,128
 196:	2f92                	fld	ft11,256(sp)
 198:	0062                	c.slli	zero,0x18
 19a:	0000                	unimp
 19c:	9102                	jalr	sp
 19e:	0c58                	addi	a4,sp,532
 1a0:	002c                	addi	a1,sp,8
 1a2:	0000                	unimp
 1a4:	9301                	srli	a4,a4,0x20
 1a6:	620c                	flw	fa1,0(a2)
 1a8:	0000                	unimp
 1aa:	0200                	addi	s0,sp,256
 1ac:	6891                	lui	a7,0x4
 1ae:	0700                	addi	s0,sp,896
 1b0:	0000000b          	0xb
 1b4:	8301                	c.srli64	a4
 1b6:	6806                	flw	fa6,64(sp)
 1b8:	0002                	c.slli64	zero
 1ba:	5600                	lw	s0,40(a2)
 1bc:	0000                	unimp
 1be:	0100                	addi	s0,sp,128
 1c0:	109c                	addi	a5,sp,96
 1c2:	02b0                	addi	a2,sp,328
 1c4:	0000                	unimp
 1c6:	7d01                	lui	s10,0xfffe0
 1c8:	810e                	mv	sp,gp
 1ca:	0000                	unimp
 1cc:	5800                	lw	s0,48(s0)
 1ce:	0002                	c.slli64	zero
 1d0:	1000                	addi	s0,sp,32
 1d2:	0000                	unimp
 1d4:	0100                	addi	s0,sp,128
 1d6:	eb9c                	fsw	fa5,16(a5)
 1d8:	0001                	nop
 1da:	0c00                	addi	s0,sp,528
 1dc:	01c6                	slli	gp,gp,0x11
 1de:	0000                	unimp
 1e0:	7e01                	lui	t3,0xfffe0
 1e2:	4f0c                	lw	a1,24(a4)
 1e4:	0000                	unimp
 1e6:	0200                	addi	s0,sp,256
 1e8:	7c91                	lui	s9,0xfffe4
 1ea:	1000                	addi	s0,sp,32
 1ec:	0000                	unimp
 1ee:	0000                	unimp
 1f0:	7701                	lui	a4,0xfffe0
 1f2:	810e                	mv	sp,gp
 1f4:	0000                	unimp
 1f6:	4800                	lw	s0,16(s0)
 1f8:	0002                	c.slli64	zero
 1fa:	1000                	addi	s0,sp,32
 1fc:	0000                	unimp
 1fe:	0100                	addi	s0,sp,128
 200:	159c                	addi	a5,sp,736
 202:	0002                	c.slli64	zero
 204:	0c00                	addi	s0,sp,528
 206:	01c6                	slli	gp,gp,0x11
 208:	0000                	unimp
 20a:	7801                	lui	a6,0xfffe0
 20c:	4f0c                	lw	a1,24(a4)
 20e:	0000                	unimp
 210:	0200                	addi	s0,sp,256
 212:	7c91                	lui	s9,0xfffe4
 214:	1000                	addi	s0,sp,32
 216:	000002a7          	0x2a7
}
 21a:	7101                	addi	sp,sp,-512
void pcount_enable(int enable) {
 21c:	810e                	mv	sp,gp
 21e:	0000                	unimp
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	3800                	fld	fs0,48(s0)
 222:	0002                	c.slli64	zero
 224:	1000                	addi	s0,sp,32
 226:	0000                	unimp
 228:	0100                	addi	s0,sp,128
 22a:	3f9c                	fld	fa5,56(a5)
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 22c:	0002                	c.slli64	zero
 22e:	0c00                	addi	s0,sp,528
 230:	01c6                	slli	gp,gp,0x11
}
 232:	0000                	unimp
 234:	7201                	lui	tp,0xfffe0
 236:	4f0c                	lw	a1,24(a4)
unsigned int get_mepc() {
 238:	0000                	unimp
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23a:	0200                	addi	s0,sp,256
 23c:	7c91                	lui	s9,0xfffe4
 23e:	0900                	addi	s0,sp,144
  return result;
 240:	001e                	c.slli	zero,0x7
}
 242:	0000                	unimp
 244:	6901                	0x6901
 246:	1c06                	slli	s8,s8,0x21
unsigned int get_mcause() {
 248:	0002                	c.slli64	zero
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24a:	1c00                	addi	s0,sp,560
 24c:	0000                	unimp
 24e:	0100                	addi	s0,sp,128
  return result;
 250:	749c                	flw	fa5,40(s1)
}
 252:	0002                	c.slli64	zero
 254:	0a00                	addi	s0,sp,272
 256:	0000012b          	0x12b
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25a:	6901                	0x6901
 25c:	7a18                	flw	fa4,48(a2)
 25e:	0000                	unimp
  return result;
 260:	0200                	addi	s0,sp,256
}
 262:	6c91                	lui	s9,0x4
 264:	440c                	lw	a1,8(s0)
 266:	0001                	nop
void simple_exc_handler(void) {
 268:	0100                	addi	s0,sp,128
 26a:	0081106b          	0x81106b
  puts("EXCEPTION!!!\n");
 26e:	0000                	unimp
 270:	9102                	jalr	sp
 272:	007c                	addi	a5,sp,12
 274:	cf11                	beqz	a4,290 <simple_exc_handler+0x28>
  puts("============\n");
 276:	0002                	c.slli64	zero
 278:	0100                	addi	s0,sp,128
 27a:	01200627          	0x1200627
 27e:	0000                	unimp
  puts("MEPC:   0x%0X");puthex(get_mepc());
 280:	00fc                	addi	a5,sp,76
 282:	0000                	unimp
 284:	9c01                	0x9c01
 286:	3b11                	jal	ffffff9a <_stack_start+0xffefff9a>
 288:	0001                	nop
 28a:	0100                	addi	s0,sp,128
 28c:	0625                	addi	a2,a2,9
 28e:	0112                	slli	sp,sp,0x4
 290:	0000                	unimp
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	000e                	c.slli	zero,0x3
 294:	0000                	unimp
 296:	9c01                	0x9c01
 298:	dc0e                	sw	gp,56(sp)
 29a:	0002                	c.slli64	zero
 29c:	0100                	addi	s0,sp,128
 29e:	0615                	addi	a2,a2,5
 2a0:	00c6                	slli	ra,ra,0x11
 2a2:	0000                	unimp
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a4:	004c                	addi	a1,sp,4
 2a6:	0000                	unimp
 2a8:	9c01                	0x9c01
 2aa:	02e2                	slli	t0,t0,0x18
 2ac:	0000                	unimp
 2ae:	6812                	flw	fa6,4(sp)
 2b0:	0100                	addi	s0,sp,128
 2b2:	1615                	addi	a2,a2,-27
 2b4:	0000004f          	fnmadd.s	ft0,ft0,ft0,ft0,rne
  putchar('\n');
 2b8:	9102                	jalr	sp
  sim_halt();
 2ba:	0c5c                	addi	a5,sp,532
  while(1);
 2bc:	0000028f          	0x28f
inline static void increment_timecmp(uint64_t time_base) {
 2c0:	1601                	addi	a2,a2,-32
 2c2:	00007a07          	0x7a07
  uint64_t current_time = timer_read();
 2c6:	0200                	addi	s0,sp,256
 2c8:	6891                	lui	a7,0x4
 2ca:	0000cc13          	xori	s8,ra,0
  current_time += time_base;
 2ce:	3c00                	fld	fs0,56(s0)
 2d0:	0000                	unimp
 2d2:	1400                	addi	s0,sp,544
 2d4:	0069                	c.nop	26
 2d6:	1901                	addi	s2,s2,-32
 2d8:	7a0c                	flw	fa1,48(a2)
 2da:	0000                	unimp
 2dc:	0200                	addi	s0,sp,256
 2de:	6c91                	lui	s9,0x4
 2e0:	0000                	unimp
 2e2:	a215                	j	406 <simple_timer_handler+0x28>
 2e4:	0002                	c.slli64	zero
 2e6:	0100                	addi	s0,sp,128
 2e8:	050d                	addi	a0,a0,3
 2ea:	007a                	c.slli	zero,0x1e
  timecmp_update(current_time);
 2ec:	0000                	unimp
 2ee:	009c                	addi	a5,sp,64
 2f0:	0000                	unimp
}
 2f2:	002a                	c.slli	zero,0xa
 2f4:	0000                	unimp
 2f6:	9c01                	0x9c01
 2f8:	030c                	addi	a1,sp,384
void timer_enable(uint64_t time_base) {
 2fa:	0000                	unimp
 2fc:	7312                	flw	ft6,36(sp)
 2fe:	7274                	flw	fa3,100(a2)
 300:	0100                	addi	s0,sp,128
  time_elapsed = 0;
 302:	160d                	addi	a2,a2,-29
 304:	030c                	addi	a1,sp,384
 306:	0000                	unimp
 308:	9102                	jalr	sp
 30a:	006c                	addi	a1,sp,12
 30c:	0416                	slli	s0,s0,0x5
 30e:	0319                	addi	t1,t1,6
 310:	0000                	unimp
  time_increment = time_base;
 312:	0102                	c.slli64	sp
 314:	5908                	lw	a0,48(a0)
 316:	0001                	nop
 318:	1700                	addi	s0,sp,928
 31a:	0312                	slli	t1,t1,0x4
 31c:	0000                	unimp
 31e:	7118                	flw	fa4,32(a0)
 320:	0001                	nop
  increment_timecmp(time_base);
 322:	0100                	addi	s0,sp,128
 324:	007a0507          	0x7a0507
  asm volatile("csrs  mie, %0\n" : : "r"(0x80));
 328:	0000                	unimp
 32a:	0084                	addi	s1,sp,64
 32c:	0000                	unimp
 32e:	0018                	0x18
  asm volatile("csrs  mstatus, %0\n" : : "r"(0x8));
 330:	0000                	unimp
 332:	9c01                	0x9c01
 334:	6312                	flw	ft6,4(sp)
}
 336:	0100                	addi	s0,sp,128
 338:	007a1107          	0x7a1107
 33c:	0000                	unimp
void timer_disable(void) { asm volatile("csrc  mie, %0\n" : : "r"(0x80)); }
 33e:	9102                	jalr	sp
 340:	007c                	addi	a5,sp,12
 342:	f400                	fsw	fs0,40(s0)
 344:	0000                	unimp
 346:	0400                	addi	s0,sp,512
 348:	de00                	sw	s0,56(a2)
uint64_t timer_read(void) {
 34a:	0001                	nop
    current_timeh = DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0);
 34c:	0400                	addi	s0,sp,512
 34e:	3901                	jal	ffffff5e <_stack_start+0xffefff5e>
 350:	0000                	unimp
 352:	0c00                	addi	s0,sp,528
 354:	0000030b          	0x30b
    current_time = DEV_READ(TIMER_BASE + TIMER_MTIME, 0);
 358:	01e9                	addi	gp,gp,26
 35a:	0000                	unimp
 35c:	046e                	slli	s0,s0,0x1b
 35e:	0000                	unimp
 360:	0062                	c.slli	zero,0x18
  } while (current_timeh != DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0));
 362:	0000                	unimp
 364:	043a                	slli	s0,s0,0xe
 366:	0000                	unimp
 368:	0102                	c.slli64	sp
 36a:	5206                	lw	tp,96(sp)
 36c:	0001                	nop
 36e:	0200                	addi	s0,sp,256
 370:	0502                	c.slli64	a0
  uint64_t final_time = ((uint64_t)current_timeh << 32) | current_time;
 372:	0274                	addi	a3,sp,268
 374:	0000                	unimp
 376:	0402                	c.slli64	s0
 378:	4a05                	li	s4,1
 37a:	0002                	c.slli64	zero
 37c:	0200                	addi	s0,sp,256
 37e:	0508                	addi	a0,sp,640
 380:	0245                	addi	tp,tp,17
 382:	0000                	unimp
 384:	0002f203          	0x2f203
 388:	0200                	addi	s0,sp,256
 38a:	182e                	slli	a6,a6,0x2b
 38c:	004d                	c.nop	19
  return final_time;
 38e:	0000                	unimp
 390:	0102                	c.slli64	sp
}
 392:	5008                	lw	a0,32(s0)
 394:	0001                	nop
 396:	0200                	addi	s0,sp,256
 398:	0702                	c.slli64	a4
void timecmp_update(uint64_t new_time) {
 39a:	015e                	slli	sp,sp,0x17
 39c:	0000                	unimp
 39e:	0402                	c.slli64	s0
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, -1);
 3a0:	0001b407          	fld	fs0,0(gp)
 3a4:	0200                	addi	s0,sp,256
 3a6:	0708                	addi	a0,sp,896
 3a8:	000001af          	0x1af
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMPH, new_time >> 32);
 3ac:	0404                	addi	s1,sp,512
 3ae:	6905                	lui	s2,0x1
 3b0:	746e                	flw	fs0,248(sp)
 3b2:	0200                	addi	s0,sp,256
 3b4:	0704                	addi	s1,sp,896
 3b6:	01b9                	addi	gp,gp,14
 3b8:	0000                	unimp
 3ba:	fa05                	bnez	a2,2ea <increment_timecmp+0x2c>
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, new_time);
 3bc:	0002                	c.slli64	zero
 3be:	b000                	fsd	fs0,32(s0)
 3c0:	92082b03          	lw	s6,-1760(a6) # fffdf920 <_stack_start+0xffedf920>
 3c4:	0000                	unimp
}
 3c6:	0600                	addi	s0,sp,768
 3c8:	0382                	c.slli64	t2
 3ca:	0000                	unimp
uint64_t get_elapsed_time(void) { return time_elapsed; }
 3cc:	920b2d03          	lw	s10,-1760(s6)
 3d0:	0000                	unimp
 3d2:	0000                	unimp
 3d4:	0700                	addi	s0,sp,896
 3d6:	0041                	c.nop	16
 3d8:	0000                	unimp
 3da:	00a2                	slli	ra,ra,0x8
 3dc:	0000                	unimp
void simple_timer_handler(void) {
 3de:	7008                	flw	fa0,32(s0)
 3e0:	0000                	unimp
 3e2:	af00                	fsd	fs0,24(a4)
 3e4:	0900                	addi	s0,sp,144
 3e6:	02ed                	addi	t0,t0,27
 3e8:	0000                	unimp
 3ea:	2b01                	jal	8fa <xtime+0x20>
 3ec:	6905                	lui	s2,0x1
 3ee:	0000                	unimp
 3f0:	6e00                	flw	fs0,24(a2)
 3f2:	0004                	0x4
 3f4:	6200                	flw	fs0,0(a2)
 3f6:	0000                	unimp
 3f8:	0100                	addi	s0,sp,128
 3fa:	eb9c                	fsw	fa5,16(a5)
 3fc:	0000                	unimp
 3fe:	0a00                	addi	s0,sp,272
  increment_timecmp(time_increment);
 400:	000002e3          	beqz	zero,c04 <reset_handler+0x2e>
 404:	4201                	li	tp,0
 406:	eb09                	bnez	a4,418 <simple_timer_handler+0x3a>
 408:	0000                	unimp
 40a:	0200                	addi	s0,sp,256
 40c:	6091                	lui	ra,0x4
 40e:	020a                	slli	tp,tp,0x2
 410:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
  time_elapsed++;
 414:	00eb0943          	fmadd.s	fs2,fs6,fa4,ft0,rne
 418:	0000                	unimp
 41a:	9102                	jalr	sp
 41c:	0b50                	addi	a2,sp,404
 41e:	00787463          	bgeu	a6,t2,426 <simple_timer_handler+0x48>
 422:	4401                	li	s0,0
 424:	7710                	flw	fa2,40(a4)
 426:	0000                	unimp
 428:	0300                	addi	s0,sp,384
 42a:	a091                	j	46e <main>
 42c:	007e                	c.slli	zero,0x1f
 42e:	410c                	lw	a1,0(a0)
 430:	0000                	unimp
 432:	0800                	addi	s0,sp,16
 434:	0070                	addi	a2,sp,12
 436:	0000                	unimp
 438:	6600000f          	0x6600000f
 43c:	0004                	0x4
 43e:	0400                	addi	s0,sp,512
 440:	9200                	0x9200
 442:	0002                	c.slli64	zero
 444:	0400                	addi	s0,sp,512
}
 446:	3901                	jal	56 <putchar-0x2e>
 448:	0000                	unimp
 44a:	0c00                	addi	s0,sp,528
 44c:	000003a3          	sb	zero,7(zero) # 7 <putchar-0x7d>
 450:	01e9                	addi	gp,gp,26
 452:	0000                	unimp
 454:	04d0                	addi	a2,sp,580
 456:	0000                	unimp
 458:	06fe                	slli	a3,a3,0x1f
 45a:	0000                	unimp
 45c:	0518                	addi	a4,sp,640
 45e:	0000                	unimp
 460:	0102                	c.slli64	sp
 462:	5206                	lw	tp,96(sp)
 464:	0001                	nop
 466:	0200                	addi	s0,sp,256
 468:	0502                	c.slli64	a0
 46a:	0274                	addi	a3,sp,268
 46c:	0000                	unimp
int main(void) {
 46e:	0402                	c.slli64	s0
 470:	4a05                	li	s4,1
    asm (    
 472:	0002                	c.slli64	zero
 474:	0200                	addi	s0,sp,256
uint8_t data_tiny[16]     ={0x6B,0xC1,0xBE,0xE2,0x2E,0x40,0x9F,0x96,0xE9,0x3D,0x7E,0x11,0x73,0x93,0x17,0x2A};
 476:	0508                	addi	a0,sp,640
 478:	0245                	addi	tp,tp,17
 47a:	0000                	unimp
 47c:	0002f203          	0x2f203
 480:	0200                	addi	s0,sp,256
 482:	182e                	slli	a6,a6,0x2b
 484:	0052                	c.slli	zero,0x14
 486:	0000                	unimp
 488:	4104                	lw	s1,0(a0)
 48a:	0000                	unimp
 48c:	0200                	addi	s0,sp,256
uint8_t key_tiny[16]      ={0x2B,0x7E,0x15,0x16,0x28,0xAE,0xD2,0xA6,0xAB,0xF7,0x15,0x88,0x09,0xCF,0x4F,0x3C};
 48e:	0801                	addi	a6,a6,0
 490:	0150                	addi	a2,sp,132
 492:	0000                	unimp
 494:	0202                	c.slli64	tp
 496:	00015e07          	0x15e07
 49a:	0200                	addi	s0,sp,256
 49c:	0704                	addi	s1,sp,896
 49e:	01b4                	addi	a3,sp,200
 4a0:	0000                	unimp
 4a2:	0802                	c.slli64	a6
 4a4:	0001af07          	flw	ft10,0(gp)
AES_init_ctx(&ctx, key_tiny);
 4a8:	0500                	addi	s0,sp,640
 4aa:	0504                	addi	s1,sp,640
 4ac:	6e69                	lui	t3,0x1a
 4ae:	0074                	addi	a3,sp,12
AES_ECB_encrypt(&ctx, data_tiny);
 4b0:	0402                	c.slli64	s0
 4b2:	0001b907          	fld	fs2,0(gp)
 4b6:	0600                	addi	s0,sp,768
 4b8:	02fa                	slli	t0,t0,0x1e
    asm (    
 4ba:	0000                	unimp
 4bc:	03b0                	addi	a2,sp,456
 4be:	0097082b          	0x97082b
    asm (    
 4c2:	0000                	unimp
 4c4:	00038207          	0x38207
}
 4c8:	0300                	addi	s0,sp,384
 4ca:	0b2d                	addi	s6,s6,11
 4cc:	009c                	addi	a5,sp,64
 4ce:	0000                	unimp
{
 4d0:	0000                	unimp
 4d2:	7c04                	flw	fs1,56(s0)
 4d4:	0000                	unimp
  for (i = 0; i < Nk; ++i)
 4d6:	0800                	addi	s0,sp,16
 4d8:	0041                	c.nop	16
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 4da:	0000                	unimp
 4dc:	00ac                	addi	a1,sp,72
 4de:	0000                	unimp
 4e0:	7509                	lui	a0,0xfffe2
 4e2:	0000                	unimp
 4e4:	af00                	fsd	fs0,24(a4)
 4e6:	0300                	addi	s0,sp,384
 4e8:	035a                	slli	t1,t1,0x16
 4ea:	0000                	unimp
 4ec:	4901                	li	s2,0
 4ee:	b811                	j	fffffd02 <_stack_start+0xffeffd02>
 4f0:	0000                	unimp
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 4f2:	0800                	addi	s0,sp,16
 4f4:	0041                	c.nop	16
 4f6:	0000                	unimp
 4f8:	00ce                	slli	ra,ra,0x13
 4fa:	0000                	unimp
 4fc:	7509                	lui	a0,0xfffe2
 4fe:	0000                	unimp
 500:	0300                	addi	s0,sp,384
 502:	7509                	lui	a0,0xfffe2
 504:	0000                	unimp
 506:	0300                	addi	s0,sp,384
 508:	0800                	addi	s0,sp,16
 50a:	004d                	c.nop	19
 50c:	0000                	unimp
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 50e:	00de                	slli	ra,ra,0x17
 510:	0000                	unimp
 512:	7509                	lui	a0,0xfffe2
 514:	0000                	unimp
 516:	ff00                	fsw	fs0,56(a4)
 518:	0400                	addi	s0,sp,512
 51a:	00ce                	slli	ra,ra,0x13
 51c:	0000                	unimp
 51e:	420a                	lw	tp,128(sp)
 520:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
 524:	1650                	addi	a2,sp,804
 526:	00de                	slli	ra,ra,0x17
 528:	0000                	unimp
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 52a:	0305                	addi	t1,t1,1
 52c:	0ccc                	addi	a1,sp,596
 52e:	0000                	unimp
 530:	4d08                	lw	a0,24(a0)
 532:	0000                	unimp
 534:	0500                	addi	s0,sp,640
 536:	0001                	nop
 538:	0900                	addi	s0,sp,144
 53a:	0075                	c.nop	29
 53c:	0000                	unimp
 53e:	000a                	c.slli	zero,0x2
 540:	f504                	fsw	fs1,40(a0)
 542:	0000                	unimp
 544:	0a00                	addi	s0,sp,272
  for (i = 0; i < Nk; ++i)
 546:	03c0                	addi	s0,sp,452
 548:	0000                	unimp
 54a:	7701                	lui	a4,0xfffe0
 54c:	0516                	slli	a0,a0,0x5
 54e:	0001                	nop
 550:	0500                	addi	s0,sp,640
 552:	000dcc03          	lbu	s8,0(s11) # 2693f000 <_stack_start+0x2683f000>
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 556:	0b00                	addi	s0,sp,400
 558:	0396                	slli	t2,t2,0x5
      k = (i - 1) * 4;
 55a:	0000                	unimp
 55c:	3f01                	jal	46c <simple_timer_handler+0x8e>
 55e:	0602                	c.slli64	a2
 560:	0b90                	addi	a2,sp,464
      tempa[0]=RoundKey[k + 0];
 562:	0000                	unimp
 564:	003e                	c.slli	zero,0xf
 566:	0000                	unimp
 568:	9c01                	0x9c01
 56a:	0190                	addi	a2,sp,192
 56c:	0000                	unimp
 56e:	bb0c                	fsd	fa1,48(a4)
      tempa[1]=RoundKey[k + 1];
 570:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
 574:	9013023f 02000001 	0x20000019013023f
 57c:	6c91                	lui	s9,0x4
 57e:	730d                	lui	t1,0xfffe3
      tempa[2]=RoundKey[k + 2];
 580:	6372                	flw	ft6,28(sp)
 582:	0100                	addi	s0,sp,128
 584:	901f023f 02000001 	0x2000001901f023f
 58c:	6891                	lui	a7,0x4
 58e:	6e0d                	lui	t3,0x3
      tempa[3]=RoundKey[k + 3];
 590:	0100                	addi	s0,sp,128
 592:	6e28023f 02000000 	0x20000006e28023f
 59a:	6491                	lui	s1,0x4
 59c:	690e                	flw	fs2,192(sp)
 59e:	0100                	addi	s0,sp,128
    if (i % Nk == 0)
 5a0:	0241                	addi	tp,tp,16
 5a2:	6e06                	flw	ft8,64(sp)
 5a4:	0000                	unimp
        const uint8_t u8tmp = tempa[0];
 5a6:	0200                	addi	s0,sp,256
 5a8:	7c91                	lui	s9,0xfffe4
 5aa:	00034c0f          	0x34c0f
        tempa[0] = tempa[1];
 5ae:	0100                	addi	s0,sp,128
 5b0:	920a0243          	fmadd.d	ft4,fs4,ft0,fs2,rne
 5b4:	0001                	nop
        tempa[1] = tempa[2];
 5b6:	0200                	addi	s0,sp,256
 5b8:	7891                	lui	a7,0xfffe4
 5ba:	0003ba0f          	0x3ba0f
        tempa[2] = tempa[3];
 5be:	0100                	addi	s0,sp,128
 5c0:	0244                	addi	s1,sp,260
 5c2:	920a                	add	tp,tp,sp
 5c4:	0001                	nop
        tempa[3] = u8tmp;
 5c6:	0200                	addi	s0,sp,256
 5c8:	7491                	lui	s1,0xfffe4
 5ca:	1000                	addi	s0,sp,32
 5cc:	1104                	addi	s1,sp,160
        tempa[0] = getSBoxValue(tempa[0]);
 5ce:	9804                	0x9804
 5d0:	0001                	nop
 5d2:	0200                	addi	s0,sp,256
 5d4:	0801                	addi	a6,a6,0
 5d6:	0159                	addi	sp,sp,22
 5d8:	0000                	unimp
 5da:	1f12                	slli	t5,t5,0x24
 5dc:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
 5e0:	01d6                	slli	gp,gp,0x15
 5e2:	7806                	flw	fa6,96(sp)
 5e4:	1800000b          	0x1800000b
        tempa[1] = getSBoxValue(tempa[1]);
 5e8:	0000                	unimp
 5ea:	0100                	addi	s0,sp,128
 5ec:	d79c                	sw	a5,40(a5)
 5ee:	0001                	nop
 5f0:	0d00                	addi	s0,sp,656
 5f2:	00787463          	bgeu	a6,t2,5fa <KeyExpansion+0x12a>
 5f6:	d601                	beqz	a2,4fe <KeyExpansion+0x2e>
 5f8:	2c01                	jal	808 <SubBytes+0x60>
 5fa:	000001d7          	0x1d7
        tempa[2] = getSBoxValue(tempa[2]);
 5fe:	9102                	jalr	sp
 600:	0d6c                	addi	a1,sp,668
 602:	7562                	flw	fa0,56(sp)
 604:	0066                	c.slli	zero,0x19
 606:	d601                	beqz	a2,50e <KeyExpansion+0x3e>
 608:	3a01                	jal	ffffff18 <_stack_start+0xffefff18>
 60a:	01dd                	addi	gp,gp,23
 60c:	0000                	unimp
 60e:	9102                	jalr	sp
 610:	0068                	addi	a0,sp,12
 612:	0411                	addi	s0,s0,4
 614:	00000097          	auipc	ra,0x0
        tempa[3] = getSBoxValue(tempa[3]);
 618:	0411                	addi	s0,s0,4
 61a:	0041                	c.nop	16
 61c:	0000                	unimp
 61e:	0003cb13          	xori	s6,t2,0
 622:	0100                	addi	s0,sp,128
 624:	019c                	addi	a5,sp,192
 626:	180d                	addi	a6,a6,-29
 628:	6000000b          	0x6000000b
 62c:	0000                	unimp
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 62e:	0100                	addi	s0,sp,128
 630:	2b9c                	fld	fa5,16(a5)
 632:	0002                	c.slli64	zero
 634:	0c00                	addi	s0,sp,528
 636:	0319                	addi	t1,t1,6
 638:	0000                	unimp
 63a:	9c01                	0x9c01
 63c:	1d01                	addi	s10,s10,-32
 63e:	0000022b          	0x22b
 642:	9102                	jalr	sp
 644:	0c5c                	addi	a5,sp,532
 646:	0382                	c.slli64	t2
 648:	0000                	unimp
 64a:	9c01                	0x9c01
 64c:	3301                	jal	34c <timer_read+0x2>
    j = i * 4; k=(i - Nk) * 4;
 64e:	0231                	addi	tp,tp,12
 650:	0000                	unimp
 652:	9102                	jalr	sp
 654:	0f58                	addi	a4,sp,916
 656:	0000036f          	jal	t1,656 <KeyExpansion+0x186>
 65a:	9e01                	0x9e01
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 65c:	0b01                	addi	s6,s6,0
 65e:	0041                	c.nop	16
 660:	0000                	unimp
 662:	9102                	jalr	sp
 664:	0411006f          	j	10ea4 <_stack_len+0x8ea4>
 668:	00ac                	addi	a1,sp,72
 66a:	0000                	unimp
 66c:	0411                	addi	s0,s0,4
 66e:	004d                	c.nop	19
 670:	0000                	unimp
 672:	00038b13          	mv	s6,t2
 676:	0100                	addi	s0,sp,128
 678:	0132                	slli	sp,sp,0xc
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 67a:	1c0d                	addi	s8,s8,-29
 67c:	0009                	c.nop	2
 67e:	fc00                	fsw	fs0,56(s0)
 680:	0001                	nop
 682:	0100                	addi	s0,sp,128
 684:	9a9c                	0x9a9c
 686:	0002                	c.slli64	zero
 688:	0c00                	addi	s0,sp,528
 68a:	0319                	addi	t1,t1,6
 68c:	0000                	unimp
 68e:	3201                	jal	ffffff8e <_stack_start+0xffefff8e>
 690:	2101                	jal	a90 <MixColumns+0x174>
 692:	0000022b          	0x22b
 696:	9102                	jalr	sp
 698:	0e5c                	addi	a5,sp,788
 69a:	0069                	c.nop	26
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 69c:	3401                	jal	9c <puts>
 69e:	0b01                	addi	s6,s6,0
 6a0:	0041                	c.nop	16
 6a2:	0000                	unimp
 6a4:	9102                	jalr	sp
 6a6:	6d540e6f          	jal	t3,4157a <_stack_len+0x3957a>
 6aa:	0070                	addi	a2,sp,12
 6ac:	3501                	jal	4ac <main+0x3e>
 6ae:	0b01                	addi	s6,s6,0
 6b0:	0041                	c.nop	16
 6b2:	0000                	unimp
 6b4:	9102                	jalr	sp
 6b6:	0e6d                	addi	t3,t3,27
 6b8:	6d54                	flw	fa3,28(a0)
 6ba:	0100                	addi	s0,sp,128
 6bc:	0135                	addi	sp,sp,13
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 6be:	4110                	lw	a2,0(a0)
 6c0:	0000                	unimp
 6c2:	0200                	addi	s0,sp,256
 6c4:	6c91                	lui	s9,0x4
 6c6:	740e                	flw	fs0,224(sp)
 6c8:	0100                	addi	s0,sp,128
 6ca:	0135                	addi	sp,sp,13
 6cc:	4114                	lw	a3,0(a0)
 6ce:	0000                	unimp
 6d0:	0200                	addi	s0,sp,256
 6d2:	6e91                	lui	t4,0x4
 6d4:	1400                	addi	s0,sp,544
 6d6:	03c5                	addi	t2,t2,17
 6d8:	0000                	unimp
 6da:	2c01                	jal	8ea <xtime+0x10>
 6dc:	1001                	c.nop	-32
 6de:	0041                	c.nop	16
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 6e0:	0000                	unimp
 6e2:	08da                	slli	a7,a7,0x16
 6e4:	0000                	unimp
 6e6:	0042                	c.slli	zero,0x10
 6e8:	0000                	unimp
 6ea:	9c01                	0x9c01
 6ec:	02c4                	addi	s1,sp,324
 6ee:	0000                	unimp
}
 6f0:	780d                	lui	a6,0xfffe3
 6f2:	0100                	addi	s0,sp,128
 6f4:	012c                	addi	a1,sp,136
 6f6:	411e                	lw	sp,196(sp)
{
 6f8:	0000                	unimp
 6fa:	0200                	addi	s0,sp,256
 6fc:	7f91                	lui	t6,0xfffe4
 6fe:	1500                	addi	s0,sp,672
  KeyExpansion(ctx->RoundKey, key);
 700:	0375                	addi	t1,t1,29
 702:	0000                	unimp
 704:	1001                	c.nop	-32
 706:	0d01                	addi	s10,s10,0
}
 708:	0820                	addi	s0,sp,24
 70a:	0000                	unimp
 70c:	00ba                	slli	ra,ra,0xe
 70e:	0000                	unimp
{
 710:	9c01                	0x9c01
 712:	02fc                	addi	a5,sp,332
 714:	0000                	unimp
 716:	190c                	addi	a1,sp,176
 718:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
  for (i = 0; i < 4; ++i)
 71c:	0110                	addi	a2,sp,128
 71e:	2b20                	fld	fs0,80(a4)
 720:	0002                	c.slli64	zero
    for (j = 0; j < 4; ++j)
 722:	0200                	addi	s0,sp,256
 724:	6c91                	lui	s9,0x4
 726:	0003470f          	0x3470f
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 72a:	0100                	addi	s0,sp,128
 72c:	0112                	slli	sp,sp,0x4
 72e:	0000410b          	0x410b
 732:	0200                	addi	s0,sp,256
 734:	7f91                	lui	t6,0xfffe4
 736:	1500                	addi	s0,sp,672
 738:	0351                	addi	t1,t1,20
 73a:	0000                	unimp
 73c:	0101                	addi	sp,sp,0
 73e:	0d01                	addi	s10,s10,0
 740:	07a8                	addi	a0,sp,968
 742:	0000                	unimp
 744:	0078                	addi	a4,sp,12
 746:	0000                	unimp
 748:	9c01                	0x9c01
 74a:	0340                	addi	s0,sp,388
 74c:	0000                	unimp
 74e:	190c                	addi	a1,sp,176
 750:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
 754:	0101                	addi	sp,sp,0
 756:	2b1f 0002 0200      	0x20000022b1f
 75c:	6c91                	lui	s9,0x4
 75e:	690e                	flw	fs2,192(sp)
 760:	0100                	addi	s0,sp,128
 762:	410b0103          	lb	sp,1040(s6)
 766:	0000                	unimp
 768:	0200                	addi	s0,sp,256
 76a:	7f91                	lui	t6,0xfffe4
 76c:	6a0e                	flw	fs4,192(sp)
 76e:	0100                	addi	s0,sp,128
 770:	410e0103          	lb	sp,1040(t3) # 3410 <_min_stack+0x1410>
 774:	0000                	unimp
 776:	0200                	addi	s0,sp,256
    for (j = 0; j < 4; ++j)
 778:	7e91                	lui	t4,0xfffe4
 77a:	1600                	addi	s0,sp,800
 77c:	037f                	0x37f
 77e:	0000                	unimp
 780:	f301                	bnez	a4,680 <KeyExpansion+0x1b0>
 782:	100d                	c.nop	-29
 784:	98000007          	0x98000007
 788:	0000                	unimp
 78a:	0100                	addi	s0,sp,128
  for (i = 0; i < 4; ++i)
 78c:	9e9c                	0x9e9c
 78e:	17000003          	lb	zero,368(zero) # 170 <pcount_reset+0x50>
 792:	0000036f          	jal	t1,792 <AddRoundKey+0x82>
 796:	f301                	bnez	a4,696 <KeyExpansion+0x1c6>
 798:	4121                	li	sp,8
 79a:	0000                	unimp
 79c:	0200                	addi	s0,sp,256
 79e:	6f91                	lui	t6,0x4
}
 7a0:	00031917          	auipc	s2,0x31
 7a4:	0100                	addi	s0,sp,128
 7a6:	022b31f3          	csrrc	gp,0x22,s6
{
 7aa:	0000                	unimp
  for (i = 0; i < 4; ++i)
 7ac:	9102                	jalr	sp
 7ae:	1768                	addi	a0,sp,940
 7b0:	0382                	c.slli64	t2
    for (j = 0; j < 4; ++j)
 7b2:	0000                	unimp
 7b4:	f301                	bnez	a4,6b4 <KeyExpansion+0x1e4>
 7b6:	00023147          	fmsub.s	ft2,ft4,ft0,ft0,rup
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 7ba:	0200                	addi	s0,sp,256
 7bc:	6491                	lui	s1,0x4
 7be:	6918                	flw	fa4,16(a0)
 7c0:	0100                	addi	s0,sp,128
 7c2:	0bf5                	addi	s7,s7,29
 7c4:	0041                	c.nop	16
 7c6:	0000                	unimp
 7c8:	9102                	jalr	sp
 7ca:	187f                	0x187f
 7cc:	006a                	c.slli	zero,0x1a
 7ce:	f501                	bnez	a0,6d6 <KeyExpansion+0x206>
 7d0:	410d                	li	sp,3
 7d2:	0000                	unimp
 7d4:	0200                	addi	s0,sp,256
 7d6:	7e91                	lui	t4,0xfffe4
 7d8:	1900                	addi	s0,sp,176
 7da:	0362                	slli	t1,t1,0x18
 7dc:	0000                	unimp
 7de:	e101                	bnez	a0,7de <SubBytes+0x36>
 7e0:	f806                	fsw	ft1,48(sp)
 7e2:	0006                	c.slli	zero,0x1
 7e4:	1800                	addi	s0,sp,48
 7e6:	0000                	unimp
 7e8:	0100                	addi	s0,sp,128
 7ea:	d39c                	sw	a5,32(a5)
 7ec:	1a000003          	lb	zero,416(zero) # 1a0 <pcount_reset+0x80>
    for (j = 0; j < 4; ++j)
 7f0:	00787463          	bgeu	a6,t2,7f8 <SubBytes+0x50>
 7f4:	e101                	bnez	a0,7f4 <SubBytes+0x4c>
 7f6:	0003d323          	0x3d323
 7fa:	0200                	addi	s0,sp,256
 7fc:	6c91                	lui	s9,0x4
 7fe:	6b1a                	flw	fs6,132(sp)
 800:	7965                	lui	s2,0xffff9
 802:	0100                	addi	s0,sp,128
  for (i = 0; i < 4; ++i)
 804:	37e1                	jal	7cc <SubBytes+0x24>
 806:	0231                	addi	tp,tp,12
 808:	0000                	unimp
 80a:	9102                	jalr	sp
 80c:	0068                	addi	a0,sp,12
 80e:	0411                	addi	s0,s0,4
 810:	007c                	addi	a5,sp,12
 812:	0000                	unimp
 814:	3516                	fld	fa0,352(sp)
 816:	01000003          	lb	zero,16(zero) # 10 <putchar-0x74>
}
 81a:	0d98                	addi	a4,sp,720
 81c:	04d0                	addi	a2,sp,580
 81e:	0000                	unimp
{
 820:	0228                	addi	a0,sp,264
 822:	0000                	unimp
  temp           = (*state)[0][1];
 824:	9c01                	0x9c01
 826:	045d                	addi	s0,s0,23
 828:	0000                	unimp
 82a:	00038217          	auipc	tp,0x38
  (*state)[0][1] = (*state)[1][1];
 82e:	0100                	addi	s0,sp,128
 830:	2398                	fld	fa4,0(a5)
 832:	01dd                	addi	gp,gp,23
 834:	0000                	unimp
 836:	9102                	jalr	sp
 838:	1a5c                	addi	a5,sp,308
  (*state)[1][1] = (*state)[2][1];
 83a:	0079654b          	fnmsub.s	fa0,fs2,ft7,ft0,unknown
 83e:	9801                	andi	s0,s0,-32
 840:	313c                	fld	fa5,96(a0)
 842:	0002                	c.slli64	zero
 844:	0200                	addi	s0,sp,256
  (*state)[2][1] = (*state)[3][1];
 846:	5891                	li	a7,-28
 848:	6918                	flw	fa4,16(a0)
 84a:	0100                	addi	s0,sp,128
 84c:	0c9a                	slli	s9,s9,0x6
 84e:	0075                	c.nop	29
 850:	0000                	unimp
  (*state)[3][1] = temp;
 852:	9102                	jalr	sp
 854:	187c                	addi	a5,sp,60
 856:	006a                	c.slli	zero,0x1a
 858:	9a01                	andi	a2,a2,-32
 85a:	0000750f          	0x750f
  temp           = (*state)[0][2];
 85e:	0200                	addi	s0,sp,256
 860:	7091                	lui	ra,0xfffe4
 862:	6b18                	flw	fa4,16(a4)
 864:	0100                	addi	s0,sp,128
  (*state)[0][2] = (*state)[2][2];
 866:	129a                	slli	t0,t0,0x26
 868:	0075                	c.nop	29
 86a:	0000                	unimp
 86c:	9102                	jalr	sp
 86e:	0a78                	addi	a4,sp,284
 870:	0000032f          	0x32f
  (*state)[2][2] = temp;
 874:	9b01                	andi	a4,a4,-32
 876:	00045d0b          	0x45d0b
 87a:	0200                	addi	s0,sp,256
  temp           = (*state)[1][2];
 87c:	6c91                	lui	s9,0x4
 87e:	0005a61b          	0x5a61b
 882:	2800                	fld	fs0,16(s0)
 884:	0000                	unimp
  (*state)[1][2] = (*state)[3][2];
 886:	0a00                	addi	s0,sp,272
 888:	039d                	addi	t2,t2,7
 88a:	0000                	unimp
 88c:	b901                	j	49c <main+0x2e>
 88e:	00004d17          	auipc	s10,0x4
  (*state)[3][2] = temp;
 892:	0200                	addi	s0,sp,256
 894:	7791                	lui	a5,0xfffe4
 896:	0000                	unimp
 898:	411c                	lw	a5,0(a0)
 89a:	0000                	unimp
  temp           = (*state)[0][3];
 89c:	0900                	addi	s0,sp,144
 89e:	0075                	c.nop	29
 8a0:	0000                	unimp
 8a2:	1e000003          	lb	zero,480(zero) # 1e0 <pcount_reset+0xc0>
  (*state)[0][3] = (*state)[3][3];
 8a6:	0000                	unimp
 8a8:	0200                	addi	s0,sp,256
 8aa:	6c00                	flw	fs0,24(s0)
 8ac:	0004                	0x4
 8ae:	0400                	addi	s0,sp,512
 8b0:	d801                	beqz	s0,7c0 <SubBytes+0x18>
  (*state)[3][3] = (*state)[2][3];
 8b2:	000d                	c.nop	3
 8b4:	0000                	unimp
 8b6:	0000                	unimp
 8b8:	d200                	sw	s0,32(a2)
 8ba:	e9000003          	lb	zero,-368(zero) # fffffe90 <_stack_start+0xffeffe90>
  (*state)[2][3] = (*state)[1][3];
 8be:	0001                	nop
 8c0:	2900                	fld	fs0,16(a0)
 8c2:	0004                	0x4
 8c4:	0100                	addi	s0,sp,128
 8c6:	80              	Adresse 0x00000000000008c6 hors intervalle.


Déassemblage de la section .debug_abbrev :

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <KeyExpansion+0x132>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	110e                	slli	sp,sp,0x23
   c:	1201                	addi	tp,tp,-32
   e:	1006                	c.slli	zero,0x21
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <putchar-0x84>
  jal x0, timer_handler
  1e:	03001603          	lh	a2,48(zero) # 30 <putchar-0x54>
  .endr
  22:	3a0e                	fld	fs4,224(sp)
  24:	390b3b0b          	0x390b3b0b
  28:	0013490b          	0x13490b
  2c:	0400                	addi	s0,sp,512
  2e:	0035                	c.nop	13
  30:	1349                	addi	t1,t1,-14
  32:	0000                	unimp
  34:	2405                	jal	254 <get_mcause+0xc>
  36:	0b00                	addi	s0,sp,400
  38:	030b3e0b          	0x30b3e0b
  3c:	0008                	0x8
  3e:	0600                	addi	s0,sp,768
  40:	0034                	addi	a3,sp,8
  42:	0b3a0e03          	lb	t3,179(s4) # ffff90b3 <_stack_start+0xffef90b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	1802193f 2e070000 	0x2e0700001802193f
  54:	3f00                	fld	fs0,56(a4)
  56:	0319                	addi	t1,t1,6
  58:	3a0e                	fld	fs4,224(sp)
  5a:	390b3b0b          	0x390b3b0b
  5e:	1119270b          	0x1119270b
  62:	1201                	addi	tp,tp,-32
  64:	4006                	0x4006
  66:	9618                	0x9618
  68:	1942                	slli	s2,s2,0x30
  6a:	0000                	unimp
  6c:	2e08                	fld	fa0,24(a2)
  6e:	3f00                	fld	fs0,56(a4)
  70:	0319                	addi	t1,t1,6
  72:	3a0e                	fld	fs4,224(sp)
  74:	390b3b0b          	0x390b3b0b
  78:	4919270b          	0x4919270b
  7c:	12011113          	0x12011113
  jal x0, reset_handler
  80:	4006                	0x4006
  82:	9718                	0x9718
int putchar(int c) {
  84:	1942                	slli	s2,s2,0x30
  86:	0000                	unimp
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	2e09                	jal	39a <timecmp_update>
  8a:	3f01                	jal	ffffff9a <_stack_start+0xffefff9a>
  8c:	0319                	addi	t1,t1,6
  8e:	3a0e                	fld	fs4,224(sp)
  90:	390b3b0b          	0x390b3b0b
  return c;
  94:	1119270b          	0x1119270b
}
  98:	1201                	addi	tp,tp,-32
  9a:	4006                	0x4006
int puts(const char *str) {
  9c:	9718                	0x9718
  9e:	1942                	slli	s2,s2,0x30
  a0:	1301                	addi	t1,t1,-32
  while (*str) {
  a2:	0000                	unimp
    putchar(*str++);
  a4:	050a                	slli	a0,a0,0x2
  a6:	0300                	addi	s0,sp,384
  a8:	3a0e                	fld	fs4,224(sp)
  aa:	390b3b0b          	0x390b3b0b
  ae:	0213490b          	0x213490b
  b2:	0018                	0x18
  while (*str) {
  b4:	0b00                	addi	s0,sp,400
  b6:	012e                	slli	sp,sp,0xb
  b8:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
}
  c0:	0b39                	addi	s6,s6,14
  c2:	13491927          	0x13491927
void puthex(uint32_t h) {
  c6:	0111                	addi	sp,sp,4
  c8:	0612                	slli	a2,a2,0x4
  ca:	1840                	addi	s0,sp,52
  for (int i = 0; i < 8; i++) {
  cc:	01194297          	auipc	t0,0x1194
    cur_digit = h >> 28;
  d0:	0c000013          	li	zero,192
  d4:	0034                	addi	a3,sp,8
    if (cur_digit < 10)
  d6:	0b3a0e03          	lb	t3,179(s4)
  da:	0b390b3b          	0xb390b3b
      putchar('0' + cur_digit);
  de:	1349                	addi	t1,t1,-14
  e0:	1802                	slli	a6,a6,0x20
  e2:	0000                	unimp
  e4:	2e0d                	jal	416 <simple_timer_handler+0x38>
  e6:	3f00                	fld	fs0,56(a4)
  e8:	0319                	addi	t1,t1,6
      putchar('A' - 10 + cur_digit);
  ea:	3a0e                	fld	fs4,224(sp)
  ec:	390b3b0b          	0x390b3b0b
  f0:	1119270b          	0x1119270b
    h <<= 4;
  f4:	1201                	addi	tp,tp,-32
  f6:	4006                	0x4006
  f8:	9718                	0x9718
  for (int i = 0; i < 8; i++) {
  fa:	1942                	slli	s2,s2,0x30
  fc:	0000                	unimp
  fe:	2e0e                	fld	ft8,192(sp)
 100:	3f01                	jal	10 <putchar-0x74>
 102:	0319                	addi	t1,t1,6
 104:	3a0e                	fld	fs4,224(sp)
 106:	390b3b0b          	0x390b3b0b
}
 10a:	1119270b          	0x1119270b
 10e:	1201                	addi	tp,tp,-32
 110:	4006                	0x4006
void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	9618                	0x9618
 114:	1942                	slli	s2,s2,0x30
 116:	1301                	addi	t1,t1,-32
 118:	0000                	unimp
 11a:	03012e0f          	0x3012e0f
 11e:	3a0e                	fld	fs4,224(sp)
  asm volatile(
 120:	390b3b0b          	0x390b3b0b
 124:	1119270b          	0x1119270b
 128:	1201                	addi	tp,tp,-32
 12a:	4006                	0x4006
 12c:	9618                	0x9618
 12e:	1942                	slli	s2,s2,0x30
 130:	1301                	addi	t1,t1,-32
 132:	0000                	unimp
 134:	2e10                	fld	fa2,24(a2)
 136:	3f01                	jal	46 <putchar-0x3e>
 138:	0319                	addi	t1,t1,6
 13a:	3a0e                	fld	fs4,224(sp)
 13c:	390b3b0b          	0x390b3b0b
 140:	1113490b          	0x1113490b
 144:	1201                	addi	tp,tp,-32
 146:	4006                	0x4006
 148:	9718                	0x9718
 14a:	1942                	slli	s2,s2,0x30
 14c:	1301                	addi	t1,t1,-32
 14e:	0000                	unimp
 150:	2e11                	jal	464 <simple_timer_handler+0x86>
 152:	3f00                	fld	fs0,56(a4)
 154:	0319                	addi	t1,t1,6
 156:	3a0e                	fld	fs4,224(sp)
 158:	390b3b0b          	0x390b3b0b
 15c:	1201110b          	0x1201110b
 160:	4006                	0x4006
 162:	9718                	0x9718
 164:	1942                	slli	s2,s2,0x30
 166:	0000                	unimp
 168:	0512                	slli	a0,a0,0x4
 16a:	0300                	addi	s0,sp,384
 16c:	3a08                	fld	fa0,48(a2)
 16e:	390b3b0b          	0x390b3b0b
 172:	0213490b          	0x213490b
 176:	0018                	0x18
 178:	1300                	addi	s0,sp,416
 17a:	0111010b          	0x111010b
 17e:	0612                	slli	a2,a2,0x4
 180:	0000                	unimp
 182:	3414                	fld	fa3,40(s0)
 184:	0300                	addi	s0,sp,384
 186:	3a08                	fld	fa0,48(a2)
 188:	390b3b0b          	0x390b3b0b
 18c:	0213490b          	0x213490b
 190:	0018                	0x18
 192:	1500                	addi	s0,sp,672
 194:	012e                	slli	sp,sp,0xb
 196:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 19e:	0b39                	addi	s6,s6,14
 1a0:	13491927          	0x13491927
 1a4:	0111                	addi	sp,sp,4
 1a6:	0612                	slli	a2,a2,0x4
 1a8:	1840                	addi	s0,sp,52
 1aa:	4296                	lw	t0,68(sp)
 1ac:	0119                	addi	sp,sp,6
 1ae:	16000013          	li	zero,352
 1b2:	0b0b000f          	0xb0b000f
 1b6:	1349                	addi	t1,t1,-14
 1b8:	0000                	unimp
 1ba:	49002617          	auipc	a2,0x49002
 1be:	18000013          	li	zero,384
 1c2:	012e                	slli	sp,sp,0xb
 1c4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 1cc:	0b39                	addi	s6,s6,14
 1ce:	13491927          	0x13491927
 1d2:	0111                	addi	sp,sp,4
 1d4:	0612                	slli	a2,a2,0x4
 1d6:	1840                	addi	s0,sp,52
 1d8:	00194297          	auipc	t0,0x194
 1dc:	0000                	unimp
 1de:	1101                	addi	sp,sp,-32
 1e0:	2501                	jal	7e0 <SubBytes+0x38>
 1e2:	130e                	slli	t1,t1,0x23
 1e4:	1b0e030b          	0x1b0e030b
 1e8:	110e                	slli	sp,sp,0x23
 1ea:	1201                	addi	tp,tp,-32
 1ec:	1006                	c.slli	zero,0x21
 1ee:	02000017          	auipc	zero,0x2000
 1f2:	0024                	addi	s1,sp,8
 1f4:	0b3e0b0b          	0xb3e0b0b
 1f8:	00000e03          	lb	t3,0(zero) # 0 <putchar-0x84>
 1fc:	03001603          	lh	a2,48(zero) # 30 <putchar-0x54>
 200:	3a0e                	fld	fs4,224(sp)
 202:	390b3b0b          	0x390b3b0b
 206:	0013490b          	0x13490b
 20a:	0400                	addi	s0,sp,512
 20c:	0024                	addi	s1,sp,8
 20e:	0b3e0b0b          	0xb3e0b0b
 212:	00000803          	lb	a6,0(zero) # 0 <putchar-0x84>
 216:	1305                	addi	t1,t1,-31
}
 218:	0301                	addi	t1,t1,0
 21a:	0b0e                	slli	s6,s6,0x3
void pcount_enable(int enable) {
 21c:	3b0b3a0b          	0x3b0b3a0b
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	010b390b          	0x10b390b
 224:	06000013          	li	zero,96
 228:	000d                	c.nop	3
 22a:	0b3a0e03          	lb	t3,179(s4)
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 22e:	0b390b3b          	0xb390b3b
}
 232:	1349                	addi	t1,t1,-14
 234:	0b38                	addi	a4,sp,408
 236:	0000                	unimp
unsigned int get_mepc() {
 238:	49010107          	0x49010107
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23c:	00130113          	addi	sp,t1,1 # fffe3001 <_stack_start+0xffee3001>
  return result;
 240:	0800                	addi	s0,sp,16
}
 242:	0021                	c.nop	8
 244:	1349                	addi	t1,t1,-14
 246:	00000b2f          	0xb2f
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24a:	2e09                	jal	55c <KeyExpansion+0x8c>
 24c:	3f01                	jal	15c <pcount_reset+0x3c>
 24e:	0319                	addi	t1,t1,6
  return result;
 250:	3a0e                	fld	fs4,224(sp)
}
 252:	390b3b0b          	0x390b3b0b
 256:	4919270b          	0x4919270b
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25a:	12011113          	0x12011113
 25e:	4006                	0x4006
  return result;
 260:	9618                	0x9618
}
 262:	1942                	slli	s2,s2,0x30
 264:	1301                	addi	t1,t1,-32
 266:	0000                	unimp
void simple_exc_handler(void) {
 268:	340a                	fld	fs0,160(sp)
 26a:	0300                	addi	s0,sp,384
  puts("EXCEPTION!!!\n");
 26c:	3a0e                	fld	fs4,224(sp)
 26e:	390b3b0b          	0x390b3b0b
 272:	0213490b          	0x213490b
  puts("============\n");
 276:	0018                	0x18
 278:	0b00                	addi	s0,sp,400
 27a:	0034                	addi	a3,sp,8
 27c:	0b3a0803          	lb	a6,179(s4)
  puts("MEPC:   0x%0X");puthex(get_mepc());
 280:	0b390b3b          	0xb390b3b
 284:	1349                	addi	t1,t1,-14
 286:	1802                	slli	a6,a6,0x20
 288:	0000                	unimp
 28a:	010c                	addi	a1,sp,128
 28c:	4901                	li	s2,0
 28e:	00000013          	nop
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	1101                	addi	sp,sp,-32
 294:	2501                	jal	894 <ShiftRows+0x74>
 296:	130e                	slli	t1,t1,0x23
 298:	1b0e030b          	0x1b0e030b
 29c:	110e                	slli	sp,sp,0x23
 29e:	1201                	addi	tp,tp,-32
 2a0:	1006                	c.slli	zero,0x21
 2a2:	02000017          	auipc	zero,0x2000
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a6:	0024                	addi	s1,sp,8
 2a8:	0b3e0b0b          	0xb3e0b0b
 2ac:	00000e03          	lb	t3,0(zero) # 0 <putchar-0x84>
 2b0:	03001603          	lh	a2,48(zero) # 30 <putchar-0x54>
 2b4:	3a0e                	fld	fs4,224(sp)
  putchar('\n');
 2b6:	390b3b0b          	0x390b3b0b
  sim_halt();
 2ba:	0013490b          	0x13490b
inline static void increment_timecmp(uint64_t time_base) {
 2be:	0400                	addi	s0,sp,512
 2c0:	0026                	c.slli	zero,0x9
 2c2:	1349                	addi	t1,t1,-14
 2c4:	0000                	unimp
  uint64_t current_time = timer_read();
 2c6:	2405                	jal	4e6 <KeyExpansion+0x16>
 2c8:	0b00                	addi	s0,sp,400
 2ca:	030b3e0b          	0x30b3e0b
  current_time += time_base;
 2ce:	0008                	0x8
 2d0:	0600                	addi	s0,sp,768
 2d2:	0e030113          	addi	sp,t1,224
 2d6:	0b3a0b0b          	0xb3a0b0b
 2da:	0b390b3b          	0xb390b3b
 2de:	1301                	addi	t1,t1,-32
 2e0:	0000                	unimp
 2e2:	03000d07          	0x3000d07
 2e6:	3a0e                	fld	fs4,224(sp)
 2e8:	390b3b0b          	0x390b3b0b
  timecmp_update(current_time);
 2ec:	3813490b          	0x3813490b
 2f0:	0800000b          	0x800000b
}
 2f4:	0101                	addi	sp,sp,0
 2f6:	1349                	addi	t1,t1,-14
 2f8:	1301                	addi	t1,t1,-32
void timer_enable(uint64_t time_base) {
 2fa:	0000                	unimp
 2fc:	2109                	jal	6fe <AES_init_ctx+0x6>
 2fe:	4900                	lw	s0,16(a0)
 300:	000b2f13          	slti	t5,s6,0
  time_elapsed = 0;
 304:	0a00                	addi	s0,sp,272
 306:	0034                	addi	a3,sp,8
 308:	0b3a0e03          	lb	t3,179(s4)
 30c:	0b390b3b          	0xb390b3b
 310:	1349                	addi	t1,t1,-14
  time_increment = time_base;
 312:	1802                	slli	a6,a6,0x20
 314:	0000                	unimp
 316:	3f012e0b          	0x3f012e0b
 31a:	0319                	addi	t1,t1,6
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	39053b0b          	0x39053b0b
  increment_timecmp(time_base);
 322:	1119270b          	0x1119270b
 326:	1201                	addi	tp,tp,-32
  asm volatile("csrs  mie, %0\n" : : "r"(0x80));
 328:	4006                	0x4006
 32a:	9718                	0x9718
 32c:	1942                	slli	s2,s2,0x30
 32e:	1301                	addi	t1,t1,-32
  asm volatile("csrs  mstatus, %0\n" : : "r"(0x8));
 330:	0000                	unimp
 332:	050c                	addi	a1,sp,640
 334:	0300                	addi	s0,sp,384
}
 336:	3a0e                	fld	fs4,224(sp)
 338:	39053b0b          	0x39053b0b
 33c:	0213490b          	0x213490b
void timer_disable(void) { asm volatile("csrc  mie, %0\n" : : "r"(0x80)); }
 340:	0018                	0x18
 342:	0d00                	addi	s0,sp,656
 344:	0005                	c.nop	1
 346:	0b3a0803          	lb	a6,179(s4)
uint64_t timer_read(void) {
 34a:	0b39053b          	0xb39053b
    current_timeh = DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0);
 34e:	1349                	addi	t1,t1,-14
 350:	1802                	slli	a6,a6,0x20
 352:	0000                	unimp
 354:	340e                	fld	fs0,224(sp)
 356:	0300                	addi	s0,sp,384
    current_time = DEV_READ(TIMER_BASE + TIMER_MTIME, 0);
 358:	3a08                	fld	fa0,48(a2)
 35a:	39053b0b          	0x39053b0b
 35e:	0213490b          	0x213490b
  } while (current_timeh != DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0));
 362:	0018                	0x18
 364:	0f00                	addi	s0,sp,912
 366:	0034                	addi	a3,sp,8
 368:	0b3a0e03          	lb	t3,179(s4)
 36c:	0b39053b          	0xb39053b
 370:	1349                	addi	t1,t1,-14
  uint64_t final_time = ((uint64_t)current_timeh << 32) | current_time;
 372:	1802                	slli	a6,a6,0x20
 374:	0000                	unimp
 376:	0f10                	addi	a2,sp,912
 378:	0b00                	addi	s0,sp,400
 37a:	1100000b          	0x1100000b
 37e:	0b0b000f          	0xb0b000f
 382:	1349                	addi	t1,t1,-14
 384:	0000                	unimp
 386:	2e12                	fld	ft8,256(sp)
 388:	3f01                	jal	298 <simple_exc_handler+0x30>
 38a:	0319                	addi	t1,t1,6
 38c:	3a0e                	fld	fs4,224(sp)
  return final_time;
 38e:	39053b0b          	0x39053b0b
}
 392:	1119270b          	0x1119270b
 396:	1201                	addi	tp,tp,-32
 398:	4006                	0x4006
void timecmp_update(uint64_t new_time) {
 39a:	9618                	0x9618
 39c:	1942                	slli	s2,s2,0x30
 39e:	1301                	addi	t1,t1,-32
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, -1);
 3a0:	0000                	unimp
 3a2:	03012e13          	slti	t3,sp,48
 3a6:	3a0e                	fld	fs4,224(sp)
 3a8:	39053b0b          	0x39053b0b
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMPH, new_time >> 32);
 3ac:	1119270b          	0x1119270b
 3b0:	1201                	addi	tp,tp,-32
 3b2:	4006                	0x4006
 3b4:	9618                	0x9618
 3b6:	1942                	slli	s2,s2,0x30
 3b8:	1301                	addi	t1,t1,-32
 3ba:	0000                	unimp
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, new_time);
 3bc:	2e14                	fld	fa3,24(a2)
 3be:	0301                	addi	t1,t1,0
 3c0:	3a0e                	fld	fs4,224(sp)
 3c2:	39053b0b          	0x39053b0b
}
 3c6:	4919270b          	0x4919270b
 3ca:	12011113          	0x12011113
uint64_t get_elapsed_time(void) { return time_elapsed; }
 3ce:	4006                	0x4006
 3d0:	9718                	0x9718
 3d2:	1942                	slli	s2,s2,0x30
 3d4:	1301                	addi	t1,t1,-32
 3d6:	0000                	unimp
 3d8:	2e15                	jal	70c <AES_init_ctx+0x14>
 3da:	0301                	addi	t1,t1,0
 3dc:	3a0e                	fld	fs4,224(sp)
void simple_timer_handler(void) {
 3de:	39053b0b          	0x39053b0b
 3e2:	1119270b          	0x1119270b
 3e6:	1201                	addi	tp,tp,-32
 3e8:	4006                	0x4006
 3ea:	9718                	0x9718
 3ec:	1942                	slli	s2,s2,0x30
 3ee:	1301                	addi	t1,t1,-32
 3f0:	0000                	unimp
 3f2:	2e16                	fld	ft8,320(sp)
 3f4:	0301                	addi	t1,t1,0
 3f6:	3a0e                	fld	fs4,224(sp)
 3f8:	390b3b0b          	0x390b3b0b
 3fc:	1119270b          	0x1119270b
  increment_timecmp(time_increment);
 400:	1201                	addi	tp,tp,-32
 402:	4006                	0x4006
 404:	9718                	0x9718
 406:	1942                	slli	s2,s2,0x30
 408:	1301                	addi	t1,t1,-32
 40a:	0000                	unimp
 40c:	03000517          	auipc	a0,0x3000
 410:	3a0e                	fld	fs4,224(sp)
  time_elapsed++;
 412:	390b3b0b          	0x390b3b0b
 416:	0213490b          	0x213490b
 41a:	0018                	0x18
 41c:	1800                	addi	s0,sp,48
 41e:	0034                	addi	a3,sp,8
 420:	0b3a0803          	lb	a6,179(s4)
 424:	0b390b3b          	0xb390b3b
 428:	1349                	addi	t1,t1,-14
 42a:	1802                	slli	a6,a6,0x20
 42c:	0000                	unimp
 42e:	2e19                	jal	744 <AddRoundKey+0x34>
 430:	3f01                	jal	340 <timer_disable+0x2>
 432:	0319                	addi	t1,t1,6
 434:	3a0e                	fld	fs4,224(sp)
 436:	390b3b0b          	0x390b3b0b
 43a:	1119270b          	0x1119270b
 43e:	1201                	addi	tp,tp,-32
 440:	4006                	0x4006
 442:	9618                	0x9618
 444:	1942                	slli	s2,s2,0x30
}
 446:	1301                	addi	t1,t1,-32
 448:	0000                	unimp
 44a:	051a                	slli	a0,a0,0x6
 44c:	0300                	addi	s0,sp,384
 44e:	3a08                	fld	fa0,48(a2)
 450:	390b3b0b          	0x390b3b0b
 454:	0213490b          	0x213490b
 458:	0018                	0x18
 45a:	1b00                	addi	s0,sp,432
 45c:	0111010b          	0x111010b
 460:	0612                	slli	a2,a2,0x4
 462:	0000                	unimp
 464:	011c                	addi	a5,sp,128
 466:	4901                	li	s2,0
 468:	00000013          	nop
 46c:	1101                	addi	sp,sp,-32
int main(void) {
 46e:	1000                	addi	s0,sp,32
 470:	5506                	lw	a0,96(sp)
    asm (    
 472:	0306                	slli	t1,t1,0x1
 474:	1b0e                	slli	s6,s6,0x23
uint8_t data_tiny[16]     ={0x6B,0xC1,0xBE,0xE2,0x2E,0x40,0x9F,0x96,0xE9,0x3D,0x7E,0x11,0x73,0x93,0x17,0x2A};
 476:	250e                	fld	fa0,192(sp)
 478:	130e                	slli	t1,t1,0x23
 47a:	0005                	c.nop	1
	...

Déassemblage de la section .debug_aranges :

00000000 <.debug_aranges>:
  .endr
   0:	001c                	0x1c
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	0084                	addi	s1,sp,64
  12:	0000                	unimp
  14:	03ea                	slli	t2,t2,0x1a
	...
  jal x0, timer_handler
  1e:	0000                	unimp
  .endr
  20:	001c                	0x1c
  22:	0000                	unimp
  24:	0002                	c.slli64	zero
  26:	00000343          	fmadd.s	ft6,ft0,ft0,ft0,rne
  2a:	0004                	0x4
  2c:	0000                	unimp
  2e:	0000                	unimp
  30:	046e                	slli	s0,s0,0x1b
  32:	0000                	unimp
  34:	0062                	c.slli	zero,0x18
	...
  3e:	0000                	unimp
  40:	001c                	0x1c
  42:	0000                	unimp
  44:	0002                	c.slli64	zero
  46:	0000043b          	0x43b
  4a:	0004                	0x4
  4c:	0000                	unimp
  4e:	0000                	unimp
  50:	04d0                	addi	a2,sp,580
  52:	0000                	unimp
  54:	06fe                	slli	a3,a3,0x1f
	...
  5e:	0000                	unimp
  60:	0024                	addi	s1,sp,8
  62:	0000                	unimp
  64:	0002                	c.slli64	zero
  66:	08a5                	addi	a7,a7,9
  68:	0000                	unimp
  6a:	0004                	0x4
  6c:	0000                	unimp
  6e:	0000                	unimp
  70:	0bce                	slli	s7,s7,0x13
  72:	0000                	unimp
  74:	008e                	slli	ra,ra,0x3
  76:	0000                	unimp
  78:	0000                	unimp
  7a:	0000                	unimp
  7c:	0084                	addi	s1,sp,64
	...

Déassemblage de la section .debug_line :

00000000 <.debug_line>:
  .endr
   0:	0436                	slli	s0,s0,0xd
   2:	0000                	unimp
   4:	00b80003          	lb	zero,11(a6) # fffe300b <_stack_start+0xffee300b>
   8:	0000                	unimp
   a:	0101                	addi	sp,sp,0
   c:	000d0efb          	0xd0efb
  10:	0101                	addi	sp,sp,0
  12:	0101                	addi	sp,sp,0
  14:	0000                	unimp
  16:	0100                	addi	s0,sp,128
  18:	0000                	unimp
  1a:	2f01                	jal	72a <AddRoundKey+0x1a>
  jal x0, timer_handler
  1c:	6f68                	flw	fa0,92(a4)
  1e:	656d                	lui	a0,0x1b
  .endr
  20:	746e612f          	0x746e612f
  24:	6f68                	flw	fa0,92(a4)
  26:	796e                	flw	fs2,248(sp)
  28:	656f432f          	0x656f432f
  2c:	7275                	lui	tp,0xffffd
  2e:	69522d73          	csrrs	s10,0x695,tp
  32:	2f566373          	csrrsi	t1,0x2f5,12
  36:	6269                	lui	tp,0x1a
  38:	7865                	lui	a6,0xffff9
  3a:	6d5f 646f 6669      	0x6669646f6d5f
  40:	765f 6569 6e6e      	0x6e6e6569765f
  46:	5f65                	li	t5,-7
  48:	2f35                	jal	784 <AddRoundKey+0x74>
  4a:	7865                	lui	a6,0xffff9
  4c:	6d61                	lui	s10,0x18
  4e:	6c70                	flw	fa2,92(s0)
  50:	7365                	lui	t1,0xffff9
  52:	2f77732f          	0x2f77732f
  56:	706d6973          	csrrsi	s2,0x706,26
  5a:	656c                	flw	fa1,76(a0)
  5c:	735f 7379 6574      	0x65747379735f
  62:	2f6d                	jal	81c <SubBytes+0x74>
  64:	6d6d6f63          	bltu	s10,s6,742 <AddRoundKey+0x32>
  68:	2f006e6f          	jal	t3,6358 <_min_stack+0x4358>
  6c:	696c                	flw	fa1,84(a0)
  6e:	2f62                	fld	ft10,24(sp)
  70:	2f636367          	0x2f636367
  74:	6972                	flw	fs2,28(sp)
  76:	36766373          	csrrsi	t1,0x367,12
  7a:	2d34                	fld	fa3,88(a0)
  7c:	6e75                	lui	t3,0x1d
  7e:	776f6e6b          	0x776f6e6b
  jal x0, reset_handler
  82:	2d6e                	fld	fs10,216(sp)
int putchar(int c) {
  84:	6c65                	lui	s8,0x19
  86:	2f66                	fld	ft10,88(sp)
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	2e39                	jal	3a6 <timecmp_update+0xc>
  8a:	2e32                	fld	ft8,264(sp)
  8c:	2f30                	fld	fa2,88(a4)
  8e:	6e69                	lui	t3,0x1a
  90:	64756c63          	bltu	a0,t2,6e8 <KeyExpansion+0x218>
  return c;
  94:	0065                	c.nop	25
}
  96:	7300                	flw	fs0,32(a4)
  98:	6d69                	lui	s10,0x1a
  9a:	6c70                	flw	fa2,92(s0)
int puts(const char *str) {
  9c:	5f65                	li	t5,-7
  9e:	74737973          	csrrci	s2,0x747,6
  while (*str) {
  a2:	6d65                	lui	s10,0x19
    putchar(*str++);
  a4:	635f 6d6f 6f6d      	0x6f6d6d6f635f
  aa:	2e6e                	fld	ft8,216(sp)
  ac:	00010063          	beqz	sp,ac <puts+0x10>
  b0:	7300                	flw	fs0,32(a4)
  b2:	6474                	flw	fa3,76(s0)
  while (*str) {
  b4:	6e69                	lui	t3,0x1a
  b6:	2d74                	fld	fa3,216(a0)
  b8:	2e636367          	0x2e636367
  return 0;
  bc:	0068                	addi	a0,sp,12
}
  be:	0002                	c.slli64	zero
  c0:	0000                	unimp
  c2:	1405                	addi	s0,s0,-31
  c4:	0500                	addi	s0,sp,640
void puthex(uint32_t h) {
  c6:	8402                	jr	s0
  c8:	0000                	unimp
  ca:	1800                	addi	s0,sp,48
  for (int i = 0; i < 8; i++) {
  cc:	0305                	addi	t1,t1,1
  ce:	04090103          	lb	sp,64(s2) # ffff9040 <_stack_start+0xffef9040>
    cur_digit = h >> 28;
  d2:	0100                	addi	s0,sp,128
  d4:	0a05                	addi	s4,s4,1
    if (cur_digit < 10)
  d6:	0c090203          	lb	tp,192(s2)
  da:	0100                	addi	s0,sp,128
  dc:	0105                	addi	sp,sp,1
      putchar('0' + cur_digit);
  de:	02090103          	lb	sp,32(s2)
  e2:	0100                	addi	s0,sp,128
  e4:	1b05                	addi	s6,s6,-31
  e6:	06090203          	lb	tp,96(s2)
      putchar('A' - 10 + cur_digit);
  ea:	0100                	addi	s0,sp,128
  ec:	0905                	addi	s2,s2,1
  ee:	06090103          	lb	sp,96(s2)
  f2:	0100                	addi	s0,sp,128
    h <<= 4;
  f4:	1105                	addi	sp,sp,-31
  f6:	02090103          	lb	sp,32(s2)
  for (int i = 0; i < 8; i++) {
  fa:	0100                	addi	s0,sp,128
  fc:	0d05                	addi	s10,s10,1
  fe:	08090003          	lb	zero,128(s2)
 102:	0100                	addi	s0,sp,128
 104:	0505                	addi	a0,a0,1
 106:	04090003          	lb	zero,64(s2)
}
 10a:	0100                	addi	s0,sp,128
 10c:	0a05                	addi	s4,s4,1
 10e:	04097f03          	0x4097f03
void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	0100                	addi	s0,sp,128
 114:	0905                	addi	s2,s2,1
 116:	06090003          	lb	zero,96(s2)
 11a:	0100                	addi	s0,sp,128
 11c:	0a05                	addi	s4,s4,1
 11e:	02090403          	lb	s0,32(s2)
  asm volatile(
 122:	0100                	addi	s0,sp,128
 124:	0105                	addi	sp,sp,1
 126:	02090103          	lb	sp,32(s2)
 12a:	0100                	addi	s0,sp,128
 12c:	1905                	addi	s2,s2,-31
 12e:	08090203          	lb	tp,128(s2)
 132:	0100                	addi	s0,sp,128
 134:	0c05                	addi	s8,s8,1
 136:	06090403          	lb	s0,96(s2)
 13a:	0100                	addi	s0,sp,128
 13c:	0305                	addi	t1,t1,1
 13e:	02090003          	lb	zero,32(s2)
 142:	0100                	addi	s0,sp,128
 144:	1305                	addi	t1,t1,-31
 146:	02090103          	lb	sp,32(s2)
 14a:	0100                	addi	s0,sp,128
 14c:	0f05                	addi	t5,t5,1
 14e:	04090003          	lb	zero,64(s2)
 152:	0100                	addi	s0,sp,128
 154:	0805                	addi	a6,a6,1
 156:	02090203          	lb	tp,32(s2)
 15a:	0100                	addi	s0,sp,128
 15c:	0705                	addi	a4,a4,1
 15e:	08090103          	lb	sp,128(s2)
 162:	0100                	addi	s0,sp,128
 164:	0c090203          	lb	tp,192(s2)
 168:	0100                	addi	s0,sp,128
 16a:	0200                	addi	s0,sp,256
 16c:	0204                	addi	s1,sp,256
 16e:	0a090203          	lb	tp,160(s2)
 172:	0100                	addi	s0,sp,128
 174:	1b05                	addi	s6,s6,-31
 176:	0200                	addi	s0,sp,256
 178:	0204                	addi	s1,sp,256
 17a:	06097803          	0x6097803
 17e:	0100                	addi	s0,sp,128
 180:	0305                	addi	t1,t1,1
 182:	0200                	addi	s0,sp,256
 184:	0104                	addi	s1,sp,128
 186:	06090003          	lb	zero,96(s2)
 18a:	0100                	addi	s0,sp,128
 18c:	0105                	addi	sp,sp,1
 18e:	08090a03          	lb	s4,128(s2)
 192:	0100                	addi	s0,sp,128
 194:	1105                	addi	sp,sp,-31
 196:	0a090203          	lb	tp,160(s2)
 19a:	0100                	addi	s0,sp,128
 19c:	1305                	addi	t1,t1,-31
 19e:	00090003          	lb	zero,0(s2)
 1a2:	0100                	addi	s0,sp,128
 1a4:	0105                	addi	sp,sp,1
 1a6:	0a090003          	lb	zero,160(s2)
 1aa:	0100                	addi	s0,sp,128
 1ac:	1505                	addi	a0,a0,-31
 1ae:	04090203          	lb	tp,64(s2)
 1b2:	0100                	addi	s0,sp,128
 1b4:	0305                	addi	t1,t1,1
 1b6:	00090103          	lb	sp,0(s2)
 1ba:	0100                	addi	s0,sp,128
 1bc:	0105                	addi	sp,sp,1
 1be:	f8093f03          	0xf8093f03
 1c2:	0100                	addi	s0,sp,128
 1c4:	2005                	jal	1e4 <pcount_reset+0xc4>
 1c6:	04090203          	lb	tp,64(s2)
 1ca:	0100                	addi	s0,sp,128
 1cc:	2b05                	jal	6fc <AES_init_ctx+0x4>
 1ce:	04090203          	lb	tp,64(s2)
 1d2:	0100                	addi	s0,sp,128
 1d4:	0200                	addi	s0,sp,256
 1d6:	0104                	addi	s1,sp,128
 1d8:	0306                	slli	t1,t1,0x1
 1da:	0900                	addi	s0,sp,144
 1dc:	0004                	0x4
 1de:	0001                	nop
 1e0:	0402                	c.slli64	s0
 1e2:	0302                	c.slli64	t1
 1e4:	0900                	addi	s0,sp,144
 1e6:	0004                	0x4
 1e8:	0501                	addi	a0,a0,0
 1ea:	0010                	0x10
 1ec:	0402                	c.slli64	s0
 1ee:	0604                	addi	s1,sp,768
 1f0:	02090003          	lb	zero,32(s2)
 1f4:	0100                	addi	s0,sp,128
 1f6:	0305                	addi	t1,t1,1
 1f8:	0200                	addi	s0,sp,256
 1fa:	0404                	addi	s1,sp,512
 1fc:	02090303          	lb	t1,32(s2)
 200:	0100                	addi	s0,sp,128
 202:	0105                	addi	sp,sp,1
 204:	0200                	addi	s0,sp,256
 206:	0404                	addi	s1,sp,512
 208:	06090103          	lb	sp,96(s2)
 20c:	0100                	addi	s0,sp,128
 20e:	1905                	addi	s2,s2,-31
 210:	06090203          	lb	tp,96(s2)
 214:	0100                	addi	s0,sp,128
 216:	0305                	addi	t1,t1,1
}
 218:	02090203          	lb	tp,32(s2)
void pcount_enable(int enable) {
 21c:	0100                	addi	s0,sp,128
 21e:	0a05                	addi	s4,s4,1
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	06090103          	lb	sp,96(s2)
 224:	0100                	addi	s0,sp,128
 226:	0105                	addi	sp,sp,1
 228:	02090103          	lb	sp,32(s2)
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 22c:	0100                	addi	s0,sp,128
 22e:	1b05                	addi	s6,s6,-31
 230:	06090203          	lb	tp,96(s2)
}
 234:	0100                	addi	s0,sp,128
 236:	0305                	addi	t1,t1,1
unsigned int get_mepc() {
 238:	02090203          	lb	tp,32(s2)
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23c:	0100                	addi	s0,sp,128
 23e:	0a05                	addi	s4,s4,1
  return result;
 240:	06090103          	lb	sp,96(s2)
}
 244:	0100                	addi	s0,sp,128
 246:	0105                	addi	sp,sp,1
unsigned int get_mcause() {
 248:	02090103          	lb	sp,32(s2)
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24c:	0100                	addi	s0,sp,128
 24e:	1a05                	addi	s4,s4,-31
  return result;
 250:	06090203          	lb	tp,96(s2)
}
 254:	0100                	addi	s0,sp,128
 256:	0305                	addi	t1,t1,1
unsigned int get_mtval() {
 258:	02090203          	lb	tp,32(s2)
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25c:	0100                	addi	s0,sp,128
 25e:	0a05                	addi	s4,s4,1
  return result;
 260:	06090103          	lb	sp,96(s2)
}
 264:	0100                	addi	s0,sp,128
 266:	0105                	addi	sp,sp,1
void simple_exc_handler(void) {
 268:	02090103          	lb	sp,32(s2)
  puts("EXCEPTION!!!\n");
 26c:	0100                	addi	s0,sp,128
 26e:	1f05                	addi	t5,t5,-31
 270:	06090203          	lb	tp,96(s2)
 274:	0100                	addi	s0,sp,128
  puts("============\n");
 276:	0305                	addi	t1,t1,1
 278:	04090103          	lb	sp,64(s2)
 27c:	0100                	addi	s0,sp,128
 27e:	0a090103          	lb	sp,160(s2)
  puts("MEPC:   0x%0X");puthex(get_mepc());
 282:	0100                	addi	s0,sp,128
 284:	0a090103          	lb	sp,160(s2)
 288:	0100                	addi	s0,sp,128
 28a:	2005                	jal	2aa <simple_exc_handler+0x42>
 28c:	0a090003          	lb	zero,160(s2)
 290:	0100                	addi	s0,sp,128
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	1905                	addi	s2,s2,-31
 294:	04090003          	lb	zero,64(s2)
 298:	0100                	addi	s0,sp,128
 29a:	0305                	addi	t1,t1,1
 29c:	04090103          	lb	sp,64(s2)
 2a0:	0100                	addi	s0,sp,128
 2a2:	2205                	jal	3c2 <timecmp_update+0x28>
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a4:	0a090003          	lb	zero,160(s2)
 2a8:	0100                	addi	s0,sp,128
 2aa:	1b05                	addi	s6,s6,-31
 2ac:	04090003          	lb	zero,64(s2)
 2b0:	0100                	addi	s0,sp,128
 2b2:	0305                	addi	t1,t1,1
 2b4:	04090103          	lb	sp,64(s2)
  putchar('\n');
 2b8:	0100                	addi	s0,sp,128
  sim_halt();
 2ba:	2205                	jal	3da <get_elapsed_time+0xe>
  while(1);
 2bc:	0a090003          	lb	zero,160(s2)
inline static void increment_timecmp(uint64_t time_base) {
 2c0:	0100                	addi	s0,sp,128
 2c2:	1b05                	addi	s6,s6,-31
 2c4:	04090003          	lb	zero,64(s2)
  uint64_t current_time = timer_read();
 2c8:	0100                	addi	s0,sp,128
 2ca:	0305                	addi	t1,t1,1
  current_time += time_base;
 2cc:	04090103          	lb	sp,64(s2)
 2d0:	0100                	addi	s0,sp,128
 2d2:	04090103          	lb	sp,64(s2)
 2d6:	0100                	addi	s0,sp,128
 2d8:	0805                	addi	a6,a6,1
 2da:	0200                	addi	s0,sp,256
 2dc:	0104                	addi	s1,sp,128
 2de:	02090203          	lb	tp,32(s2)
 2e2:	0100                	addi	s0,sp,128
 2e4:	3a05                	jal	fffffc14 <_stack_start+0xffeffc14>
 2e6:	02090603          	lb	a2,32(s2)
 2ea:	0100                	addi	s0,sp,128
  timecmp_update(current_time);
 2ec:	1b05                	addi	s6,s6,-31
 2ee:	08090103          	lb	sp,128(s2)
}
 2f2:	0100                	addi	s0,sp,128
 2f4:	1005                	c.nop	-31
 2f6:	06090103          	lb	sp,96(s2)
void timer_enable(uint64_t time_base) {
 2fa:	0100                	addi	s0,sp,128
 2fc:	0305                	addi	t1,t1,1
 2fe:	20090103          	lb	sp,512(s2)
  time_elapsed = 0;
 302:	0100                	addi	s0,sp,128
 304:	0105                	addi	sp,sp,1
 306:	06090103          	lb	sp,96(s2)
 30a:	0100                	addi	s0,sp,128
 30c:	2705                	jal	a2c <MixColumns+0x110>
 30e:	08090203          	lb	tp,128(s2)
  time_increment = time_base;
 312:	0100                	addi	s0,sp,128
 314:	1005                	c.nop	-31
 316:	08090103          	lb	sp,128(s2)
 31a:	0100                	addi	s0,sp,128
 31c:	1205                	addi	tp,tp,-31
 31e:	10090103          	lb	sp,256(s2)
  increment_timecmp(time_base);
 322:	0100                	addi	s0,sp,128
 324:	0305                	addi	t1,t1,1
 326:	10090203          	lb	tp,256(s2)
  asm volatile("csrs  mie, %0\n" : : "r"(0x80));
 32a:	0100                	addi	s0,sp,128
 32c:	06090203          	lb	tp,96(s2)
  asm volatile("csrs  mstatus, %0\n" : : "r"(0x8));
 330:	0100                	addi	s0,sp,128
 332:	08090203          	lb	tp,128(s2)
}
 336:	0100                	addi	s0,sp,128
 338:	0105                	addi	sp,sp,1
 33a:	06090103          	lb	sp,96(s2)
void timer_disable(void) { asm volatile("csrc  mie, %0\n" : : "r"(0x80)); }
 33e:	0100                	addi	s0,sp,128
 340:	1a05                	addi	s4,s4,-31
 342:	08090203          	lb	tp,128(s2)
 346:	0100                	addi	s0,sp,128
 348:	1c05                	addi	s8,s8,-31
uint64_t timer_read(void) {
 34a:	00090003          	lb	zero,0(s2)
    current_timeh = DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0);
 34e:	0100                	addi	s0,sp,128
 350:	0105                	addi	sp,sp,1
 352:	08090003          	lb	zero,128(s2)
 356:	0100                	addi	s0,sp,128
    current_time = DEV_READ(TIMER_BASE + TIMER_MTIME, 0);
 358:	1b05                	addi	s6,s6,-31
 35a:	04090203          	lb	tp,64(s2)
 35e:	0100                	addi	s0,sp,128
 360:	1505                	addi	a0,a0,-31
  } while (current_timeh != DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0));
 362:	0200                	addi	s0,sp,256
 364:	0104                	addi	s1,sp,128
 366:	02090503          	lb	a0,32(s2)
 36a:	0100                	addi	s0,sp,128
 36c:	1305                	addi	t1,t1,-31
 36e:	0200                	addi	s0,sp,256
 370:	0104                	addi	s1,sp,128
  uint64_t final_time = ((uint64_t)current_timeh << 32) | current_time;
 372:	06090003          	lb	zero,96(s2)
 376:	0100                	addi	s0,sp,128
 378:	1405                	addi	s0,s0,-31
 37a:	0200                	addi	s0,sp,256
 37c:	0104                	addi	s1,sp,128
 37e:	06090103          	lb	sp,96(s2)
 382:	0100                	addi	s0,sp,128
 384:	1205                	addi	tp,tp,-31
 386:	0200                	addi	s0,sp,256
 388:	0104                	addi	s1,sp,128
 38a:	04090003          	lb	zero,64(s2)
  return final_time;
 38e:	0100                	addi	s0,sp,128
 390:	1d05                	addi	s10,s10,-31
}
 392:	0200                	addi	s0,sp,256
 394:	0104                	addi	s1,sp,128
 396:	06090103          	lb	sp,96(s2)
void timecmp_update(uint64_t new_time) {
 39a:	0100                	addi	s0,sp,128
 39c:	0305                	addi	t1,t1,1
 39e:	0200                	addi	s0,sp,256
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, -1);
 3a0:	0104                	addi	s1,sp,128
 3a2:	0a090003          	lb	zero,160(s2)
 3a6:	0100                	addi	s0,sp,128
 3a8:	1a05                	addi	s4,s4,-31
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMPH, new_time >> 32);
 3aa:	06090103          	lb	sp,96(s2)
 3ae:	0100                	addi	s0,sp,128
 3b0:	3205                	jal	fffffcd0 <_stack_start+0xffeffcd0>
 3b2:	06090003          	lb	zero,96(s2)
 3b6:	0100                	addi	s0,sp,128
 3b8:	3905                	jal	ffffffe8 <_stack_start+0xffefffe8>
 3ba:	06090003          	lb	zero,96(s2)
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, new_time);
 3be:	0100                	addi	s0,sp,128
 3c0:	0c05                	addi	s8,s8,1
 3c2:	06090003          	lb	zero,96(s2)
}
 3c6:	0100                	addi	s0,sp,128
 3c8:	0a05                	addi	s4,s4,1
 3ca:	0a090103          	lb	sp,160(s2)
uint64_t get_elapsed_time(void) { return time_elapsed; }
 3ce:	0100                	addi	s0,sp,128
 3d0:	0105                	addi	sp,sp,1
 3d2:	04090103          	lb	sp,64(s2)
 3d6:	0100                	addi	s0,sp,128
 3d8:	2805                	jal	408 <simple_timer_handler+0x2a>
 3da:	08090203          	lb	tp,128(s2)
void simple_timer_handler(void) {
 3de:	0100                	addi	s0,sp,128
 3e0:	0305                	addi	t1,t1,1
 3e2:	06090103          	lb	sp,96(s2)
 3e6:	0100                	addi	s0,sp,128
 3e8:	0a090103          	lb	sp,160(s2)
 3ec:	0100                	addi	s0,sp,128
 3ee:	12090103          	lb	sp,288(s2)
 3f2:	0100                	addi	s0,sp,128
 3f4:	0105                	addi	sp,sp,1
 3f6:	0a090103          	lb	sp,160(s2)
 3fa:	0100                	addi	s0,sp,128
 3fc:	2105                	jal	81c <SubBytes+0x74>
 3fe:	06090203          	lb	tp,96(s2)
  increment_timecmp(time_increment);
 402:	0100                	addi	s0,sp,128
 404:	2a05                	jal	534 <KeyExpansion+0x64>
 406:	00090003          	lb	zero,0(s2)
 40a:	0100                	addi	s0,sp,128
 40c:	0105                	addi	sp,sp,1
 40e:	0c090003          	lb	zero,192(s2)
  time_elapsed++;
 412:	0100                	addi	s0,sp,128
 414:	2105                	jal	834 <ShiftRows+0x14>
 416:	06090403          	lb	s0,96(s2)
 41a:	0100                	addi	s0,sp,128
 41c:	0305                	addi	t1,t1,1
 41e:	22090103          	lb	sp,544(s2)
 422:	0100                	addi	s0,sp,128
 424:	0f05                	addi	t5,t5,1
 426:	12090103          	lb	sp,288(s2)
 42a:	0100                	addi	s0,sp,128
 42c:	0105                	addi	sp,sp,1
 42e:	34090103          	lb	sp,832(s2)
 432:	0100                	addi	s0,sp,128
 434:	2809                	jal	446 <simple_timer_handler+0x68>
 436:	0000                	unimp
 438:	0101                	addi	sp,sp,0
 43a:	00da                	slli	ra,ra,0x16
 43c:	0000                	unimp
 43e:	00800003          	lb	zero,8(zero) # 8 <putchar-0x7c>
 442:	0000                	unimp
 444:	0101                	addi	sp,sp,0
}
 446:	000d0efb          	0xd0efb
 44a:	0101                	addi	sp,sp,0
 44c:	0101                	addi	sp,sp,0
 44e:	0000                	unimp
 450:	0100                	addi	s0,sp,128
 452:	0000                	unimp
 454:	4301                	li	t1,0
 456:	665f 6c69 7365      	0x73656c69665f
 45c:	2f00                	fld	fs0,24(a4)
 45e:	696c                	flw	fa1,84(a0)
 460:	2f62                	fld	ft10,24(sp)
 462:	2f636367          	0x2f636367
 466:	6972                	flw	fs2,28(sp)
 468:	36766373          	csrrsi	t1,0x367,12
 46c:	2d34                	fld	fa3,88(a0)
int main(void) {
 46e:	6e75                	lui	t3,0x1d
 470:	776f6e6b          	0x776f6e6b
    asm (    
 474:	2d6e                	fld	fs10,216(sp)
uint8_t data_tiny[16]     ={0x6B,0xC1,0xBE,0xE2,0x2E,0x40,0x9F,0x96,0xE9,0x3D,0x7E,0x11,0x73,0x93,0x17,0x2A};
 476:	6c65                	lui	s8,0x19
 478:	2f66                	fld	ft10,88(sp)
 47a:	2e39                	jal	798 <AddRoundKey+0x88>
 47c:	2e32                	fld	ft8,264(sp)
 47e:	2f30                	fld	fa2,88(a4)
 480:	6e69                	lui	t3,0x1a
 482:	64756c63          	bltu	a0,t2,ada <MixColumns+0x1be>
 486:	0065                	c.nop	25
 488:	69665f43          	fmadd.s	ft10,fa2,fs6,fa3,unknown
 48c:	656c                	flw	fa1,76(a0)
uint8_t key_tiny[16]      ={0x2B,0x7E,0x15,0x16,0x28,0xAE,0xD2,0xA6,0xAB,0xF7,0x15,0x88,0x09,0xCF,0x4F,0x3C};
 48e:	2e2e2f73          	csrrs	t5,0x2e2,t3
 492:	665f482f          	0x665f482f
 496:	6c69                	lui	s8,0x1a
 498:	7365                	lui	t1,0xffff9
 49a:	0000                	unimp
 49c:	6561                	lui	a0,0x18
 49e:	00632e73          	csrrs	t3,0x6,t1
 4a2:	0001                	nop
 4a4:	7300                	flw	fs0,32(a4)
AES_init_ctx(&ctx, key_tiny);
 4a6:	6474                	flw	fa3,76(s0)
 4a8:	6e69                	lui	t3,0x1a
 4aa:	2d74                	fld	fa3,216(a0)
 4ac:	2e636367          	0x2e636367
AES_ECB_encrypt(&ctx, data_tiny);
 4b0:	0068                	addi	a0,sp,12
 4b2:	0002                	c.slli64	zero
 4b4:	7400                	flw	fs0,40(s0)
 4b6:	6e69                	lui	t3,0x1a
 4b8:	5f79                	li	t5,-2
    asm (    
 4ba:	6561                	lui	a0,0x18
 4bc:	00682e73          	csrrs	t3,0x6,a6
 4c0:	00000003          	lb	zero,0(zero) # 0 <putchar-0x84>
    asm (    
 4c4:	1005                	c.nop	-31
  return(0);
 4c6:	0500                	addi	s0,sp,640
}
 4c8:	6e02                	flw	ft8,0(sp)
 4ca:	0004                	0x4
 4cc:	0300                	addi	s0,sp,384
 4ce:	012a                	slli	sp,sp,0xa
{
 4d0:	0505                	addi	a0,a0,1
 4d2:	04091303          	lh	t1,64(s2)
  for (i = 0; i < Nk; ++i)
 4d6:	0100                	addi	s0,sp,128
 4d8:	0905                	addi	s2,s2,1
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 4da:	04090403          	lb	s0,64(s2)
 4de:	0100                	addi	s0,sp,128
 4e0:	18090103          	lb	sp,384(s2)
 4e4:	0100                	addi	s0,sp,128
 4e6:	0105                	addi	sp,sp,1
 4e8:	18090203          	lb	tp,384(s2)
 4ec:	0100                	addi	s0,sp,128
 4ee:	0a090103          	lb	sp,160(s2)
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 4f2:	0100                	addi	s0,sp,128
 4f4:	0505                	addi	a0,a0,1
 4f6:	0a090203          	lb	tp,160(s2)
 4fa:	0100                	addi	s0,sp,128
 4fc:	08090603          	lb	a2,128(s2)
 500:	0100                	addi	s0,sp,128
 502:	0905                	addi	s2,s2,1
 504:	04091f03          	lh	t5,64(s2)
 508:	0100                	addi	s0,sp,128
 50a:	0105                	addi	sp,sp,1
 50c:	02090103          	lb	sp,32(s2)
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 510:	0100                	addi	s0,sp,128
 512:	0809                	addi	a6,a6,2
 514:	0000                	unimp
 516:	0101                	addi	sp,sp,0
 518:	08bc                	addi	a5,sp,88
 51a:	0000                	unimp
 51c:	00890003          	lb	zero,8(s2)
 520:	0000                	unimp
 522:	0101                	addi	sp,sp,0
 524:	000d0efb          	0xd0efb
 528:	0101                	addi	sp,sp,0
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 52a:	0101                	addi	sp,sp,0
 52c:	0000                	unimp
 52e:	0100                	addi	s0,sp,128
 530:	0000                	unimp
 532:	4301                	li	t1,0
 534:	665f 6c69 7365      	0x73656c69665f
 53a:	2f00                	fld	fs0,24(a4)
 53c:	696c                	flw	fa1,84(a0)
 53e:	2f62                	fld	ft10,24(sp)
 540:	2f636367          	0x2f636367
 544:	6972                	flw	fs2,28(sp)
  for (i = 0; i < Nk; ++i)
 546:	36766373          	csrrsi	t1,0x367,12
 54a:	2d34                	fld	fa3,88(a0)
 54c:	6e75                	lui	t3,0x1d
 54e:	776f6e6b          	0x776f6e6b
 552:	2d6e                	fld	fs10,216(sp)
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 554:	6c65                	lui	s8,0x19
 556:	2f66                	fld	ft10,88(sp)
 558:	2e39                	jal	876 <ShiftRows+0x56>
      k = (i - 1) * 4;
 55a:	2e32                	fld	ft8,264(sp)
 55c:	2f30                	fld	fa2,88(a4)
 55e:	6e69                	lui	t3,0x1a
 560:	64756c63          	bltu	a0,t2,bb8 <memcpy+0x28>
      tempa[0]=RoundKey[k + 0];
 564:	0065                	c.nop	25
 566:	69665f43          	fmadd.s	ft10,fa2,fs6,fa3,unknown
 56a:	656c                	flw	fa1,76(a0)
 56c:	2e2e2f73          	csrrs	t5,0x2e2,t3
      tempa[1]=RoundKey[k + 1];
 570:	665f482f          	0x665f482f
 574:	6c69                	lui	s8,0x1a
 576:	7365                	lui	t1,0xffff9
 578:	0000                	unimp
 57a:	6561                	lui	a0,0x18
 57c:	74735f73          	csrrwi	t5,0x747,6
      tempa[2]=RoundKey[k + 2];
 580:	5f6d                	li	t5,-5
 582:	6974                	flw	fa3,84(a0)
 584:	796e                	flw	fs2,248(sp)
 586:	632e                	flw	ft6,200(sp)
 588:	0100                	addi	s0,sp,128
 58a:	0000                	unimp
 58c:	69647473          	csrrci	s0,0x696,8
      tempa[3]=RoundKey[k + 3];
 590:	746e                	flw	fs0,248(sp)
 592:	672d                	lui	a4,0xb
 594:	682e6363          	bltu	t3,sp,c1a <reset_handler+0x44>
 598:	0200                	addi	s0,sp,256
 59a:	0000                	unimp
 59c:	6974                	flw	fa3,84(a0)
 59e:	796e                	flw	fs2,248(sp)
    if (i % Nk == 0)
 5a0:	615f 7365 682e      	0x682e7365615f
        const uint8_t u8tmp = tempa[0];
 5a6:	0300                	addi	s0,sp,384
 5a8:	0000                	unimp
 5aa:	0500                	addi	s0,sp,640
 5ac:	0001                	nop
        tempa[0] = tempa[1];
 5ae:	0205                	addi	tp,tp,1
 5b0:	04d0                	addi	a2,sp,580
 5b2:	0000                	unimp
 5b4:	01019803          	lh	a6,16(gp)
        tempa[1] = tempa[2];
 5b8:	0a05                	addi	s4,s4,1
 5ba:	06090503          	lb	a0,96(s2)
        tempa[2] = tempa[3];
 5be:	0100                	addi	s0,sp,128
 5c0:	0305                	addi	t1,t1,1
 5c2:	02090003          	lb	zero,32(s2)
        tempa[3] = u8tmp;
 5c6:	0100                	addi	s0,sp,128
 5c8:	2405                	jal	7e8 <SubBytes+0x40>
 5ca:	0200                	addi	s0,sp,256
 5cc:	0304                	addi	s1,sp,384
        tempa[0] = getSBoxValue(tempa[0]);
 5ce:	02090203          	lb	tp,32(s2)
 5d2:	0100                	addi	s0,sp,128
 5d4:	2005                	jal	5f4 <KeyExpansion+0x124>
 5d6:	0200                	addi	s0,sp,256
 5d8:	0304                	addi	s1,sp,384
 5da:	04090003          	lb	zero,64(s2)
 5de:	0100                	addi	s0,sp,128
 5e0:	1105                	addi	sp,sp,-31
 5e2:	0200                	addi	s0,sp,256
 5e4:	0304                	addi	s1,sp,384
        tempa[1] = getSBoxValue(tempa[1]);
 5e6:	04090003          	lb	zero,64(s2)
 5ea:	0100                	addi	s0,sp,128
 5ec:	0d05                	addi	s10,s10,1
 5ee:	0200                	addi	s0,sp,256
 5f0:	0304                	addi	s1,sp,384
 5f2:	04090003          	lb	zero,64(s2)
 5f6:	0100                	addi	s0,sp,128
 5f8:	2005                	jal	618 <KeyExpansion+0x148>
 5fa:	0200                	addi	s0,sp,256
 5fc:	0304                	addi	s1,sp,384
        tempa[2] = getSBoxValue(tempa[2]);
 5fe:	04090003          	lb	zero,64(s2)
 602:	0100                	addi	s0,sp,128
 604:	1b05                	addi	s6,s6,-31
 606:	0200                	addi	s0,sp,256
 608:	0304                	addi	s1,sp,384
 60a:	04090003          	lb	zero,64(s2)
 60e:	0100                	addi	s0,sp,128
 610:	2405                	jal	830 <ShiftRows+0x10>
 612:	0200                	addi	s0,sp,256
 614:	0304                	addi	s1,sp,384
        tempa[3] = getSBoxValue(tempa[3]);
 616:	04090103          	lb	sp,64(s2)
 61a:	0100                	addi	s0,sp,128
 61c:	2005                	jal	63c <KeyExpansion+0x16c>
 61e:	0200                	addi	s0,sp,256
 620:	0304                	addi	s1,sp,384
 622:	04090003          	lb	zero,64(s2)
 626:	0100                	addi	s0,sp,128
 628:	1105                	addi	sp,sp,-31
 62a:	0200                	addi	s0,sp,256
 62c:	0304                	addi	s1,sp,384
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 62e:	06090003          	lb	zero,96(s2)
 632:	0100                	addi	s0,sp,128
 634:	0d05                	addi	s10,s10,1
 636:	0200                	addi	s0,sp,256
 638:	0304                	addi	s1,sp,384
 63a:	04090003          	lb	zero,64(s2)
 63e:	0100                	addi	s0,sp,128
 640:	2005                	jal	660 <KeyExpansion+0x190>
 642:	0200                	addi	s0,sp,256
 644:	0304                	addi	s1,sp,384
 646:	06090003          	lb	zero,96(s2)
 64a:	0100                	addi	s0,sp,128
 64c:	1b05                	addi	s6,s6,-31
    j = i * 4; k=(i - Nk) * 4;
 64e:	0200                	addi	s0,sp,256
 650:	0304                	addi	s1,sp,384
 652:	04090003          	lb	zero,64(s2)
 656:	0100                	addi	s0,sp,128
 658:	2405                	jal	878 <ShiftRows+0x58>
 65a:	0200                	addi	s0,sp,256
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 65c:	0304                	addi	s1,sp,384
 65e:	04090103          	lb	sp,64(s2)
 662:	0100                	addi	s0,sp,128
 664:	2005                	jal	684 <KeyExpansion+0x1b4>
 666:	0200                	addi	s0,sp,256
 668:	0304                	addi	s1,sp,384
 66a:	04090003          	lb	zero,64(s2)
 66e:	0100                	addi	s0,sp,128
 670:	1105                	addi	sp,sp,-31
 672:	0200                	addi	s0,sp,256
 674:	0304                	addi	s1,sp,384
 676:	06090003          	lb	zero,96(s2)
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 67a:	0100                	addi	s0,sp,128
 67c:	0d05                	addi	s10,s10,1
 67e:	0200                	addi	s0,sp,256
 680:	0304                	addi	s1,sp,384
 682:	04090003          	lb	zero,64(s2)
 686:	0100                	addi	s0,sp,128
 688:	2005                	jal	6a8 <KeyExpansion+0x1d8>
 68a:	0200                	addi	s0,sp,256
 68c:	0304                	addi	s1,sp,384
 68e:	06090003          	lb	zero,96(s2)
 692:	0100                	addi	s0,sp,128
 694:	1b05                	addi	s6,s6,-31
 696:	0200                	addi	s0,sp,256
 698:	0304                	addi	s1,sp,384
 69a:	04090003          	lb	zero,64(s2)
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 69e:	0100                	addi	s0,sp,128
 6a0:	2405                	jal	8c0 <ShiftRows+0xa0>
 6a2:	0200                	addi	s0,sp,256
 6a4:	0304                	addi	s1,sp,384
 6a6:	04090103          	lb	sp,64(s2)
 6aa:	0100                	addi	s0,sp,128
 6ac:	2005                	jal	6cc <KeyExpansion+0x1fc>
 6ae:	0200                	addi	s0,sp,256
 6b0:	0304                	addi	s1,sp,384
 6b2:	04090003          	lb	zero,64(s2)
 6b6:	0100                	addi	s0,sp,128
 6b8:	1105                	addi	sp,sp,-31
 6ba:	0200                	addi	s0,sp,256
 6bc:	0304                	addi	s1,sp,384
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 6be:	06090003          	lb	zero,96(s2)
 6c2:	0100                	addi	s0,sp,128
 6c4:	0d05                	addi	s10,s10,1
 6c6:	0200                	addi	s0,sp,256
 6c8:	0304                	addi	s1,sp,384
 6ca:	04090003          	lb	zero,64(s2)
 6ce:	0100                	addi	s0,sp,128
 6d0:	2005                	jal	6f0 <KeyExpansion+0x220>
 6d2:	0200                	addi	s0,sp,256
 6d4:	0304                	addi	s1,sp,384
 6d6:	06090003          	lb	zero,96(s2)
 6da:	0100                	addi	s0,sp,128
 6dc:	1b05                	addi	s6,s6,-31
 6de:	0200                	addi	s0,sp,256
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 6e0:	0304                	addi	s1,sp,384
 6e2:	04090003          	lb	zero,64(s2)
 6e6:	0100                	addi	s0,sp,128
 6e8:	1705                	addi	a4,a4,-31
 6ea:	0200                	addi	s0,sp,256
 6ec:	0304                	addi	s1,sp,384
 6ee:	04097b03          	0x4097b03
}
 6f2:	0100                	addi	s0,sp,128
 6f4:	0305                	addi	t1,t1,1
 6f6:	0200                	addi	s0,sp,256
{
 6f8:	0104                	addi	s1,sp,128
 6fa:	06090003          	lb	zero,96(s2)
 6fe:	0100                	addi	s0,sp,128
  KeyExpansion(ctx->RoundKey, key);
 700:	0a05                	addi	s4,s4,1
 702:	08090903          	lb	s2,128(s2)
 706:	0100                	addi	s0,sp,128
}
 708:	0305                	addi	t1,t1,1
 70a:	04090003          	lb	zero,64(s2)
 70e:	0100                	addi	s0,sp,128
{
 710:	0e05                	addi	t3,t3,1
 712:	02090303          	lb	t1,32(s2)
 716:	0100                	addi	s0,sp,128
 718:	0905                	addi	s2,s2,1
 71a:	04090003          	lb	zero,64(s2)
  for (i = 0; i < 4; ++i)
 71e:	0100                	addi	s0,sp,128
 720:	1805                	addi	a6,a6,-31
    for (j = 0; j < 4; ++j)
 722:	04090103          	lb	sp,64(s2)
 726:	0100                	addi	s0,sp,128
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 728:	0f05                	addi	t5,t5,1
 72a:	0a090003          	lb	zero,160(s2)
 72e:	0100                	addi	s0,sp,128
 730:	1805                	addi	a6,a6,-31
 732:	04090103          	lb	sp,64(s2)
 736:	0100                	addi	s0,sp,128
 738:	0f05                	addi	t5,t5,1
 73a:	0c090003          	lb	zero,192(s2)
 73e:	0100                	addi	s0,sp,128
 740:	1805                	addi	a6,a6,-31
 742:	04090103          	lb	sp,64(s2)
 746:	0100                	addi	s0,sp,128
 748:	0f05                	addi	t5,t5,1
 74a:	0c090003          	lb	zero,192(s2)
 74e:	0100                	addi	s0,sp,128
 750:	1805                	addi	a6,a6,-31
 752:	04090103          	lb	sp,64(s2)
 756:	0100                	addi	s0,sp,128
 758:	0f05                	addi	t5,t5,1
 75a:	0c090003          	lb	zero,192(s2)
 75e:	0100                	addi	s0,sp,128
 760:	0b05                	addi	s6,s6,1
 762:	04090403          	lb	s0,64(s2)
 766:	0100                	addi	s0,sp,128
 768:	0805                	addi	a6,a6,1
 76a:	04090003          	lb	zero,64(s2)
 76e:	0100                	addi	s0,sp,128
 770:	1705                	addi	a4,a4,-31
 772:	02090703          	lb	a4,32(s2)
 776:	0100                	addi	s0,sp,128
    for (j = 0; j < 4; ++j)
 778:	1905                	addi	s2,s2,-31
 77a:	08090103          	lb	sp,128(s2)
 77e:	0100                	addi	s0,sp,128
 780:	1205                	addi	tp,tp,-31
 782:	04090003          	lb	zero,64(s2)
 786:	0100                	addi	s0,sp,128
 788:	1905                	addi	s2,s2,-31
 78a:	04090103          	lb	sp,64(s2)
  for (i = 0; i < 4; ++i)
 78e:	0100                	addi	s0,sp,128
 790:	1205                	addi	tp,tp,-31
 792:	04090003          	lb	zero,64(s2)
 796:	0100                	addi	s0,sp,128
 798:	1905                	addi	s2,s2,-31
 79a:	04090103          	lb	sp,64(s2)
 79e:	0100                	addi	s0,sp,128
}
 7a0:	1205                	addi	tp,tp,-31
 7a2:	04090003          	lb	zero,64(s2)
 7a6:	0100                	addi	s0,sp,128
{
 7a8:	04090103          	lb	sp,64(s2)
  for (i = 0; i < 4; ++i)
 7ac:	0100                	addi	s0,sp,128
 7ae:	1405                	addi	s0,s0,-31
 7b0:	08090803          	lb	a6,128(s2)
    for (j = 0; j < 4; ++j)
 7b4:	0100                	addi	s0,sp,128
 7b6:	1205                	addi	tp,tp,-31
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 7b8:	14090003          	lb	zero,320(s2)
 7bc:	0100                	addi	s0,sp,128
 7be:	1405                	addi	s0,s0,-31
 7c0:	04090103          	lb	sp,64(s2)
 7c4:	0100                	addi	s0,sp,128
 7c6:	1205                	addi	tp,tp,-31
 7c8:	14090003          	lb	zero,320(s2)
 7cc:	0100                	addi	s0,sp,128
 7ce:	1405                	addi	s0,s0,-31
 7d0:	04090103          	lb	sp,64(s2)
 7d4:	0100                	addi	s0,sp,128
 7d6:	1205                	addi	tp,tp,-31
 7d8:	14090003          	lb	zero,320(s2)
 7dc:	0100                	addi	s0,sp,128
 7de:	1405                	addi	s0,s0,-31
 7e0:	04090103          	lb	sp,64(s2)
 7e4:	0100                	addi	s0,sp,128
 7e6:	1205                	addi	tp,tp,-31
 7e8:	14090003          	lb	zero,320(s2)
 7ec:	0100                	addi	s0,sp,128
 7ee:	1705                	addi	a4,a4,-31
    for (j = 0; j < 4; ++j)
 7f0:	04090303          	lb	t1,64(s2)
 7f4:	0100                	addi	s0,sp,128
 7f6:	2305                	jal	d16 <sbox+0x4a>
 7f8:	04090003          	lb	zero,64(s2)
 7fc:	0100                	addi	s0,sp,128
 7fe:	2105                	jal	c1e <_start>
 800:	04090003          	lb	zero,64(s2)
  for (i = 0; i < 4; ++i)
 804:	0100                	addi	s0,sp,128
 806:	1005                	c.nop	-31
 808:	0e090003          	lb	zero,224(s2)
 80c:	0100                	addi	s0,sp,128
 80e:	0705                	addi	a4,a4,1
 810:	0200                	addi	s0,sp,256
 812:	0204                	addi	s1,sp,256
 814:	0a090e03          	lb	t3,160(s2)
}
 818:	0100                	addi	s0,sp,128
 81a:	1505                	addi	a0,a0,-31
 81c:	0200                	addi	s0,sp,256
 81e:	0204                	addi	s1,sp,256
{
 820:	06090003          	lb	zero,96(s2)
  temp           = (*state)[0][1];
 824:	0100                	addi	s0,sp,128
 826:	1105                	addi	sp,sp,-31
 828:	0200                	addi	s0,sp,256
 82a:	0204                	addi	s1,sp,256
 82c:	04090003          	lb	zero,64(s2)
  (*state)[0][1] = (*state)[1][1];
 830:	0100                	addi	s0,sp,128
 832:	1f05                	addi	t5,t5,-31
 834:	0200                	addi	s0,sp,256
 836:	0204                	addi	s1,sp,256
 838:	04090103          	lb	sp,64(s2)
  (*state)[1][1] = (*state)[2][1];
 83c:	0100                	addi	s0,sp,128
 83e:	2e05                	jal	b6e <Cipher+0x56>
 840:	0200                	addi	s0,sp,256
 842:	0204                	addi	s1,sp,256
 844:	0a090003          	lb	zero,160(s2)
  (*state)[2][1] = (*state)[3][1];
 848:	0100                	addi	s0,sp,128
 84a:	0d05                	addi	s10,s10,1
 84c:	0200                	addi	s0,sp,256
 84e:	0204                	addi	s1,sp,256
 850:	04090003          	lb	zero,64(s2)
  (*state)[3][1] = temp;
 854:	0100                	addi	s0,sp,128
 856:	1505                	addi	a0,a0,-31
 858:	0200                	addi	s0,sp,256
 85a:	0204                	addi	s1,sp,256
  temp           = (*state)[0][2];
 85c:	06090003          	lb	zero,96(s2)
 860:	0100                	addi	s0,sp,128
 862:	1f05                	addi	t5,t5,-31
 864:	0200                	addi	s0,sp,256
  (*state)[0][2] = (*state)[2][2];
 866:	0204                	addi	s1,sp,256
 868:	0a090103          	lb	sp,160(s2)
 86c:	0100                	addi	s0,sp,128
 86e:	2e05                	jal	b9e <memcpy+0xe>
 870:	0200                	addi	s0,sp,256
  (*state)[2][2] = temp;
 872:	0204                	addi	s1,sp,256
 874:	0c090003          	lb	zero,192(s2)
 878:	0100                	addi	s0,sp,128
 87a:	0d05                	addi	s10,s10,1
  temp           = (*state)[1][2];
 87c:	0200                	addi	s0,sp,256
 87e:	0204                	addi	s1,sp,256
 880:	04090003          	lb	zero,64(s2)
 884:	0100                	addi	s0,sp,128
  (*state)[1][2] = (*state)[3][2];
 886:	1505                	addi	a0,a0,-31
 888:	0200                	addi	s0,sp,256
 88a:	0204                	addi	s1,sp,256
 88c:	08090003          	lb	zero,128(s2)
 890:	0100                	addi	s0,sp,128
  (*state)[3][2] = temp;
 892:	1f05                	addi	t5,t5,-31
 894:	0200                	addi	s0,sp,256
 896:	0204                	addi	s1,sp,256
 898:	0a090103          	lb	sp,160(s2)
  temp           = (*state)[0][3];
 89c:	0100                	addi	s0,sp,128
 89e:	2e05                	jal	bce <default_exc_handler>
 8a0:	0200                	addi	s0,sp,256
 8a2:	0204                	addi	s1,sp,256
 8a4:	0c090003          	lb	zero,192(s2)
  (*state)[0][3] = (*state)[3][3];
 8a8:	0100                	addi	s0,sp,128
 8aa:	0d05                	addi	s10,s10,1
 8ac:	0200                	addi	s0,sp,256
 8ae:	0204                	addi	s1,sp,256
 8b0:	04090003          	lb	zero,64(s2)
  (*state)[3][3] = (*state)[2][3];
 8b4:	0100                	addi	s0,sp,128
 8b6:	1505                	addi	a0,a0,-31
 8b8:	0200                	addi	s0,sp,256
 8ba:	0204                	addi	s1,sp,256
 8bc:	08090003          	lb	zero,128(s2)
  (*state)[2][3] = (*state)[1][3];
 8c0:	0100                	addi	s0,sp,128
 8c2:	1f05                	addi	t5,t5,-31
 8c4:	0200                	addi	s0,sp,256
 8c6:	0204                	addi	s1,sp,256
 8c8:	0a090103          	lb	sp,160(s2)
  (*state)[1][3] = temp;
 8cc:	0100                	addi	s0,sp,128
 8ce:	2e05                	jal	bfe <reset_handler+0x28>
 8d0:	0200                	addi	s0,sp,256
 8d2:	0204                	addi	s1,sp,256
}
 8d4:	0c090003          	lb	zero,192(s2)
 8d8:	0100                	addi	s0,sp,128
{
 8da:	0d05                	addi	s10,s10,1
 8dc:	0200                	addi	s0,sp,256
 8de:	0204                	addi	s1,sp,256
 8e0:	04090003          	lb	zero,64(s2)
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8e4:	0100                	addi	s0,sp,128
 8e6:	1505                	addi	a0,a0,-31
 8e8:	0200                	addi	s0,sp,256
 8ea:	0204                	addi	s1,sp,256
 8ec:	08090003          	lb	zero,128(s2)
 8f0:	0100                	addi	s0,sp,128
 8f2:	2305                	jal	e12 <_bss_end+0x2a>
 8f4:	0200                	addi	s0,sp,256
 8f6:	0204                	addi	s1,sp,256
 8f8:	0a094a03          	lbu	s4,160(s2)
 8fc:	0100                	addi	s0,sp,128
 8fe:	0305                	addi	t1,t1,1
 900:	0200                	addi	s0,sp,256
 902:	0104                	addi	s1,sp,128
 904:	06090003          	lb	zero,96(s2)
 908:	0100                	addi	s0,sp,128
 90a:	0105                	addi	sp,sp,1
 90c:	0a093803          	0xa093803
 910:	0100                	addi	s0,sp,128
 912:	08090303          	lb	t1,128(s2)
}
 916:	0100                	addi	s0,sp,128
 918:	1305                	addi	t1,t1,-31
 91a:	08090103          	lb	sp,128(s2)
{
 91e:	0100                	addi	s0,sp,128
 920:	0305                	addi	t1,t1,1
  for (i = 0; i < 4; ++i)
 922:	02090003          	lb	zero,32(s2)
 926:	0100                	addi	s0,sp,128
    t   = (*state)[i][0];
 928:	0105                	addi	sp,sp,1
 92a:	06090103          	lb	sp,96(s2)
 92e:	0100                	addi	s0,sp,128
 930:	08091003          	lh	zero,128(s2)
 934:	0100                	addi	s0,sp,128
 936:	0a05                	addi	s4,s4,1
 938:	0c090203          	lb	tp,192(s2)
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 93c:	0100                	addi	s0,sp,128
 93e:	0305                	addi	t1,t1,1
 940:	04090003          	lb	zero,64(s2)
 944:	0100                	addi	s0,sp,128
 946:	0c05                	addi	s8,s8,1
 948:	02090203          	lb	tp,32(s2)
 94c:	0100                	addi	s0,sp,128
 94e:	0505                	addi	a0,a0,1
 950:	04090003          	lb	zero,64(s2)
 954:	0100                	addi	s0,sp,128
 956:	1605                	addi	a2,a2,-31
 958:	0200                	addi	s0,sp,256
 95a:	0304                	addi	s1,sp,384
 95c:	02090203          	lb	tp,32(s2)
 960:	0100                	addi	s0,sp,128
 962:	3305                	jal	682 <KeyExpansion+0x1b2>
 964:	0200                	addi	s0,sp,256
 966:	0304                	addi	s1,sp,384
 968:	14090003          	lb	zero,320(s2)
 96c:	0100                	addi	s0,sp,128
 96e:	3e05                	jal	49e <main+0x30>
 970:	0200                	addi	s0,sp,256
 972:	0304                	addi	s1,sp,384
 974:	12090003          	lb	zero,288(s2)
 978:	0100                	addi	s0,sp,128
 97a:	2105                	jal	d9a <sbox+0xce>
 97c:	0200                	addi	s0,sp,256
 97e:	0304                	addi	s1,sp,384
 980:	08090003          	lb	zero,128(s2)
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 984:	0100                	addi	s0,sp,128
 986:	1605                	addi	a2,a2,-31
 988:	0200                	addi	s0,sp,256
 98a:	0304                	addi	s1,sp,384
 98c:	08090003          	lb	zero,128(s2)
 990:	0100                	addi	s0,sp,128
 992:	1805                	addi	a6,a6,-31
 994:	0200                	addi	s0,sp,256
 996:	0304                	addi	s1,sp,384
 998:	1a097e03          	0x1a097e03
 99c:	0100                	addi	s0,sp,128
 99e:	0505                	addi	a0,a0,1
 9a0:	0200                	addi	s0,sp,256
 9a2:	0104                	addi	s1,sp,128
 9a4:	0a090003          	lb	zero,160(s2)
 9a8:	0100                	addi	s0,sp,128
 9aa:	1605                	addi	a2,a2,-31
 9ac:	0200                	addi	s0,sp,256
 9ae:	0204                	addi	s1,sp,256
 9b0:	0a097e03          	0xa097e03
 9b4:	0100                	addi	s0,sp,128
 9b6:	0305                	addi	t1,t1,1
 9b8:	0200                	addi	s0,sp,256
 9ba:	0104                	addi	s1,sp,128
 9bc:	0a090003          	lb	zero,160(s2)
 9c0:	0100                	addi	s0,sp,128
 9c2:	0105                	addi	sp,sp,1
 9c4:	0a090703          	lb	a4,160(s2)
 9c8:	0100                	addi	s0,sp,128
 9ca:	08090503          	lb	a0,128(s2)
 9ce:	0100                	addi	s0,sp,128
 9d0:	0a05                	addi	s4,s4,1
 9d2:	04090203          	lb	tp,64(s2)
 9d6:	0100                	addi	s0,sp,128
 9d8:	0305                	addi	t1,t1,1
 9da:	04090003          	lb	zero,64(s2)
 9de:	0100                	addi	s0,sp,128
 9e0:	0c05                	addi	s8,s8,1
 9e2:	02090203          	lb	tp,32(s2)
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 9e6:	0100                	addi	s0,sp,128
 9e8:	0505                	addi	a0,a0,1
 9ea:	04090003          	lb	zero,64(s2)
 9ee:	0100                	addi	s0,sp,128
 9f0:	1805                	addi	a6,a6,-31
 9f2:	0200                	addi	s0,sp,256
 9f4:	0304                	addi	s1,sp,384
 9f6:	02090203          	lb	tp,32(s2)
 9fa:	0100                	addi	s0,sp,128
 9fc:	1205                	addi	tp,tp,-31
 9fe:	0200                	addi	s0,sp,256
 a00:	0304                	addi	s1,sp,384
 a02:	16090003          	lb	zero,352(s2)
 a06:	0100                	addi	s0,sp,128
 a08:	1805                	addi	a6,a6,-31
 a0a:	0200                	addi	s0,sp,256
 a0c:	0304                	addi	s1,sp,384
 a0e:	08090003          	lb	zero,128(s2)
 a12:	0100                	addi	s0,sp,128
 a14:	1605                	addi	a2,a2,-31
 a16:	0200                	addi	s0,sp,256
 a18:	0304                	addi	s1,sp,384
 a1a:	0e090003          	lb	zero,224(s2)
 a1e:	0100                	addi	s0,sp,128
 a20:	1805                	addi	a6,a6,-31
 a22:	0200                	addi	s0,sp,256
 a24:	0304                	addi	s1,sp,384
 a26:	0c097e03          	0xc097e03
 a2a:	0100                	addi	s0,sp,128
 a2c:	0505                	addi	a0,a0,1
 a2e:	0200                	addi	s0,sp,256
 a30:	0104                	addi	s1,sp,128
 a32:	0a090003          	lb	zero,160(s2)
 a36:	0100                	addi	s0,sp,128
 a38:	1605                	addi	a2,a2,-31
 a3a:	0200                	addi	s0,sp,256
 a3c:	0204                	addi	s1,sp,256
 a3e:	0a097e03          	0xa097e03
 a42:	0100                	addi	s0,sp,128
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 a44:	0305                	addi	t1,t1,1
 a46:	0200                	addi	s0,sp,256
 a48:	0104                	addi	s1,sp,128
 a4a:	0a090003          	lb	zero,160(s2)
 a4e:	0100                	addi	s0,sp,128
 a50:	0105                	addi	sp,sp,1
 a52:	0a090703          	lb	a4,160(s2)
 a56:	0100                	addi	s0,sp,128
 a58:	08090603          	lb	a2,128(s2)
 a5c:	0100                	addi	s0,sp,128
 a5e:	1205                	addi	tp,tp,-31
 a60:	04090403          	lb	s0,64(s2)
 a64:	0100                	addi	s0,sp,128
 a66:	1f05                	addi	t5,t5,-31
 a68:	0a090103          	lb	sp,160(s2)
 a6c:	0100                	addi	s0,sp,128
 a6e:	1205                	addi	tp,tp,-31
 a70:	06090003          	lb	zero,96(s2)
 a74:	0100                	addi	s0,sp,128
 a76:	1f05                	addi	t5,t5,-31
 a78:	06090103          	lb	sp,96(s2)
 a7c:	0100                	addi	s0,sp,128
 a7e:	1205                	addi	tp,tp,-31
 a80:	06090003          	lb	zero,96(s2)
 a84:	0100                	addi	s0,sp,128
 a86:	1f05                	addi	t5,t5,-31
 a88:	06090103          	lb	sp,96(s2)
 a8c:	0100                	addi	s0,sp,128
 a8e:	1205                	addi	tp,tp,-31
 a90:	06090003          	lb	zero,96(s2)
 a94:	0100                	addi	s0,sp,128
 a96:	06090103          	lb	sp,96(s2)
 a9a:	0100                	addi	s0,sp,128
 a9c:	0a090303          	lb	t1,160(s2)
 aa0:	0100                	addi	s0,sp,128
 aa2:	1f05                	addi	t5,t5,-31
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 aa4:	0a090103          	lb	sp,160(s2)
 aa8:	0100                	addi	s0,sp,128
 aaa:	1205                	addi	tp,tp,-31
 aac:	06090003          	lb	zero,96(s2)
 ab0:	0100                	addi	s0,sp,128
 ab2:	06090103          	lb	sp,96(s2)
 ab6:	0100                	addi	s0,sp,128
 ab8:	0a090203          	lb	tp,160(s2)
 abc:	0100                	addi	s0,sp,128
 abe:	1f05                	addi	t5,t5,-31
 ac0:	0a090103          	lb	sp,160(s2)
 ac4:	0100                	addi	s0,sp,128
 ac6:	1205                	addi	tp,tp,-31
 ac8:	06090003          	lb	zero,96(s2)
 acc:	0100                	addi	s0,sp,128
 ace:	06090103          	lb	sp,96(s2)
 ad2:	0100                	addi	s0,sp,128
 ad4:	0a090303          	lb	t1,160(s2)
 ad8:	0100                	addi	s0,sp,128
 ada:	1f05                	addi	t5,t5,-31
 adc:	0a090103          	lb	sp,160(s2)
 ae0:	0100                	addi	s0,sp,128
 ae2:	1205                	addi	tp,tp,-31
 ae4:	06090003          	lb	zero,96(s2)
 ae8:	0100                	addi	s0,sp,128
 aea:	1f05                	addi	t5,t5,-31
 aec:	06090103          	lb	sp,96(s2)
 af0:	0100                	addi	s0,sp,128
 af2:	1205                	addi	tp,tp,-31
 af4:	06090003          	lb	zero,96(s2)
 af8:	0100                	addi	s0,sp,128
  for (i = 0; i < 4; ++i)
 afa:	1f05                	addi	t5,t5,-31
 afc:	06090103          	lb	sp,96(s2)
 b00:	0100                	addi	s0,sp,128
 b02:	1205                	addi	tp,tp,-31
 b04:	06090003          	lb	zero,96(s2)
 b08:	0100                	addi	s0,sp,128
 b0a:	06090103          	lb	sp,96(s2)
}
 b0e:	0100                	addi	s0,sp,128
 b10:	0105                	addi	sp,sp,1
 b12:	0a090103          	lb	sp,160(s2)
 b16:	0100                	addi	s0,sp,128
{
 b18:	06090303          	lb	t1,96(s2)
 b1c:	0100                	addi	s0,sp,128
 b1e:	0d05                	addi	s10,s10,1
  uint8_t round = 0;
 b20:	08090103          	lb	sp,128(s2)
  AddRoundKey(0, state, RoundKey); 
 b24:	0100                	addi	s0,sp,128
 b26:	1205                	addi	tp,tp,-31
 b28:	06090003          	lb	zero,96(s2)
  for (round = 1; round < Nr; ++round)
 b2c:	0100                	addi	s0,sp,128
 b2e:	0105                	addi	sp,sp,1
 b30:	2e090103          	lb	sp,736(s2)
    SubBytes(state);
 b34:	0100                	addi	s0,sp,128
 b36:	06090403          	lb	s0,96(s2)
    ShiftRows(state);
 b3a:	0100                	addi	s0,sp,128
    MixColumns(state);
 b3c:	0a05                	addi	s4,s4,1
 b3e:	06090303          	lb	t1,96(s2)
    AddRoundKey(round, state, RoundKey);
 b42:	0100                	addi	s0,sp,128
 b44:	0305                	addi	t1,t1,1
 b46:	04090003          	lb	zero,64(s2)
 b4a:	0100                	addi	s0,sp,128
  for (round = 1; round < Nr; ++round)
 b4c:	1605                	addi	a2,a2,-31
 b4e:	0200                	addi	s0,sp,256
 b50:	0304                	addi	s1,sp,384
 b52:	02090203          	lb	tp,32(s2)
 b56:	0100                	addi	s0,sp,128
 b58:	0905                	addi	s2,s2,1
 b5a:	0200                	addi	s0,sp,256
 b5c:	0304                	addi	s1,sp,384
 b5e:	04090003          	lb	zero,64(s2)
  SubBytes(state);
 b62:	0100                	addi	s0,sp,128
  ShiftRows(state);
 b64:	1605                	addi	a2,a2,-31
 b66:	0200                	addi	s0,sp,256
  AddRoundKey(Nr, state, RoundKey);
 b68:	0304                	addi	s1,sp,384
 b6a:	0e090103          	lb	sp,224(s2)
 b6e:	0100                	addi	s0,sp,128
}
 b70:	2705                	jal	1290 <_bss_end+0x4a8>
 b72:	0200                	addi	s0,sp,256
 b74:	0304                	addi	s1,sp,384
 b76:	0e090003          	lb	zero,224(s2)
{
 b7a:	0100                	addi	s0,sp,128
 b7c:	0905                	addi	s2,s2,1
 b7e:	0200                	addi	s0,sp,256
  Cipher((state_t*)buf, ctx->RoundKey);
 b80:	0304                	addi	s1,sp,384
 b82:	0e090003          	lb	zero,224(s2)
 b86:	0100                	addi	s0,sp,128
}
 b88:	3805                	jal	3b8 <timecmp_update+0x1e>
 b8a:	0200                	addi	s0,sp,256
 b8c:	0304                	addi	s1,sp,384
 b8e:	06090003          	lb	zero,96(s2)
{
 b92:	0100                	addi	s0,sp,128
 b94:	0905                	addi	s2,s2,1
 b96:	0200                	addi	s0,sp,256
   char *csrc = (char *)src;
 b98:	0304                	addi	s1,sp,384
 b9a:	0e090003          	lb	zero,224(s2)
   char *cdest = (char *)dest;
 b9e:	0100                	addi	s0,sp,128
   for ( i=0; i<n; i++)
 ba0:	4905                	li	s2,1
 ba2:	0200                	addi	s0,sp,256
       cdest[i] = csrc[i];
 ba4:	0304                	addi	s1,sp,384
 ba6:	06090003          	lb	zero,96(s2)
 baa:	0100                	addi	s0,sp,128
 bac:	0905                	addi	s2,s2,1
 bae:	0200                	addi	s0,sp,256
 bb0:	0304                	addi	s1,sp,384
 bb2:	0e090003          	lb	zero,224(s2)
 bb6:	0100                	addi	s0,sp,128
   for ( i=0; i<n; i++)
 bb8:	1605                	addi	a2,a2,-31
 bba:	0200                	addi	s0,sp,256
 bbc:	0304                	addi	s1,sp,384
 bbe:	06090103          	lb	sp,96(s2)
 bc2:	0100                	addi	s0,sp,128
 bc4:	2705                	jal	12e4 <_bss_end+0x4fc>
} 
 bc6:	0200                	addi	s0,sp,256
 bc8:	0304                	addi	s1,sp,384
 bca:	0e090003          	lb	zero,224(s2)
  jal x0, simple_exc_handler
 bce:	0100                	addi	s0,sp,128
 bd0:	0905                	addi	s2,s2,1
  jal x0, simple_timer_handler
 bd2:	0200                	addi	s0,sp,256
 bd4:	0304                	addi	s1,sp,384
  mv  x1, x0
 bd6:	0e090003          	lb	zero,224(s2)
  mv  x2, x1
 bda:	0100                	addi	s0,sp,128
  mv  x3, x1
 bdc:	3205                	jal	4fc <KeyExpansion+0x2c>
  mv  x4, x1
 bde:	0200                	addi	s0,sp,256
  mv  x5, x1
 be0:	0304                	addi	s1,sp,384
  mv  x6, x1
 be2:	06090003          	lb	zero,96(s2)
  mv  x8, x1
 be6:	0100                	addi	s0,sp,128
  mv  x9, x1
 be8:	4d05                	li	s10,1
  mv x10, x1
 bea:	0200                	addi	s0,sp,256
  mv x11, x1
 bec:	0304                	addi	s1,sp,384
  mv x12, x1
 bee:	0e090003          	lb	zero,224(s2)
  mv x14, x1
 bf2:	0100                	addi	s0,sp,128
  mv x15, x1
 bf4:	1605                	addi	a2,a2,-31
  mv x16, x1
 bf6:	0200                	addi	s0,sp,256
  mv x17, x1
 bf8:	0304                	addi	s1,sp,384
  mv x18, x1
 bfa:	30090103          	lb	sp,768(s2)
  mv x20, x1
 bfe:	0100                	addi	s0,sp,128
  mv x21, x1
 c00:	2705                	jal	1320 <_bss_end+0x538>
  mv x22, x1
 c02:	0200                	addi	s0,sp,256
  mv x23, x1
 c04:	0304                	addi	s1,sp,384
  mv x24, x1
 c06:	0e090003          	lb	zero,224(s2)
  mv x26, x1
 c0a:	0100                	addi	s0,sp,128
  mv x27, x1
 c0c:	0905                	addi	s2,s2,1
  mv x28, x1
 c0e:	0200                	addi	s0,sp,256
  mv x29, x1
 c10:	0304                	addi	s1,sp,384
  mv x30, x1
 c12:	0e090003          	lb	zero,224(s2)
  la   x2, _stack_start
 c16:	0100                	addi	s0,sp,128
 c18:	3205                	jal	538 <KeyExpansion+0x68>
 c1a:	0200                	addi	s0,sp,256
 c1c:	0304                	addi	s1,sp,384
  la x26, _bss_start
 c1e:	06090003          	lb	zero,96(s2)
 c22:	0100                	addi	s0,sp,128
 c24:	4d05                	li	s10,1
  la x27, _bss_end
 c26:	0200                	addi	s0,sp,256
 c28:	0304                	addi	s1,sp,384
 c2a:	0e090003          	lb	zero,224(s2)
  bge x26, x27, zero_loop_end
 c2e:	0100                	addi	s0,sp,128
 c30:	1605                	addi	a2,a2,-31
  sw x0, 0(x26)
 c32:	0200                	addi	s0,sp,256
 c34:	0304                	addi	s1,sp,384
  addi x26, x26, 4
 c36:	30090103          	lb	sp,768(s2)
  ble x26, x27, zero_loop
 c3a:	0100                	addi	s0,sp,128
  addi x10, x0, 0
 c3c:	2705                	jal	135c <_bss_end+0x574>
 c3e:	0200                	addi	s0,sp,256
  addi x11, x0, 0
 c40:	0304                	addi	s1,sp,384
 c42:	0e090003          	lb	zero,224(s2)
  jal x1, main
 c46:	0100                	addi	s0,sp,128
  li x5, SIM_CTRL_BASE + SIM_CTRL_CTRL
 c48:	0905                	addi	s2,s2,1
 c4a:	0200                	addi	s0,sp,256
 c4c:	0304                	addi	s1,sp,384
 c4e:	0e090003          	lb	zero,224(s2)
  sw x6, 0(x5)
 c52:	0100                	addi	s0,sp,128
 c54:	3205                	jal	574 <KeyExpansion+0xa4>
  wfi
 c56:	0200                	addi	s0,sp,256
 c58:	0304                	addi	s1,sp,384
  j sleep_loop
 c5a:	06090003          	lb	zero,96(s2)
 c5e:	0100                	addi	s0,sp,128
 c60:	4d05                	li	s10,1
 c62:	0200                	addi	s0,sp,256
 c64:	0304                	addi	s1,sp,384
 c66:	0e090003          	lb	zero,224(s2)
 c6a:	0100                	addi	s0,sp,128
 c6c:	1605                	addi	a2,a2,-31
 c6e:	0200                	addi	s0,sp,256
 c70:	0304                	addi	s1,sp,384
 c72:	30090103          	lb	sp,768(s2)
 c76:	0100                	addi	s0,sp,128
 c78:	0905                	addi	s2,s2,1
 c7a:	0200                	addi	s0,sp,256
 c7c:	0304                	addi	s1,sp,384
 c7e:	0e090003          	lb	zero,224(s2)
 c82:	0100                	addi	s0,sp,128
 c84:	3205                	jal	5a4 <KeyExpansion+0xd4>
 c86:	0200                	addi	s0,sp,256
 c88:	0304                	addi	s1,sp,384
 c8a:	0a090003          	lb	zero,160(s2)
 c8e:	0100                	addi	s0,sp,128
 c90:	4d05                	li	s10,1
 c92:	0200                	addi	s0,sp,256
 c94:	0304                	addi	s1,sp,384
 c96:	0e090003          	lb	zero,224(s2)
 c9a:	0100                	addi	s0,sp,128
 c9c:	1605                	addi	a2,a2,-31
 c9e:	0200                	addi	s0,sp,256
 ca0:	0304                	addi	s1,sp,384
 ca2:	30097903          	0x30097903
 ca6:	0100                	addi	s0,sp,128
 ca8:	0305                	addi	t1,t1,1
 caa:	0200                	addi	s0,sp,256
 cac:	0104                	addi	s1,sp,128
 cae:	0a090003          	lb	zero,160(s2)
 cb2:	0100                	addi	s0,sp,128
 cb4:	0105                	addi	sp,sp,1
 cb6:	0a090903          	lb	s2,160(s2)
 cba:	0100                	addi	s0,sp,128
 cbc:	0900de03          	lhu	t3,144(ra) # fffe4090 <_stack_start+0xffee4090>
 cc0:	000a                	c.slli	zero,0x2
 cc2:	0501                	addi	a0,a0,0
 cc4:	0901030b          	0x901030b
 cc8:	0008                	0x8
 cca:	0501                	addi	a0,a0,0
 ccc:	09030303          	lb	t1,144(t1) # ffff9090 <_stack_start+0xffef9090>
 cd0:	0004                	0x4
 cd2:	0501                	addi	a0,a0,0
 cd4:	030e                	slli	t1,t1,0x3
 cd6:	0905                	addi	s2,s2,1
 cd8:	0008                	0x8
 cda:	0501                	addi	a0,a0,0
 cdc:	09000303          	lb	t1,144(zero) # 90 <putchar+0xc>
 ce0:	0006                	c.slli	zero,0x1
 ce2:	0501                	addi	a0,a0,0
 ce4:	0005                	c.nop	1
 ce6:	0402                	c.slli64	s0
 ce8:	09020303          	lb	t1,144(tp) # 1a090 <_stack_len+0x12090>
 cec:	0002                	c.slli64	zero
 cee:	0001                	nop
 cf0:	0402                	c.slli64	s0
 cf2:	09010303          	lb	t1,144(sp)
 cf6:	0004                	0x4
 cf8:	0001                	nop
 cfa:	0402                	c.slli64	s0
 cfc:	09010303          	lb	t1,144(sp)
 d00:	0004                	0x4
 d02:	0001                	nop
 d04:	0402                	c.slli64	s0
 d06:	09010303          	lb	t1,144(sp)
 d0a:	0004                	0x4
 d0c:	0501                	addi	a0,a0,0
 d0e:	001f 0402 0303      	0x3030402001f
 d14:	000c097b          	0xc097b
 d18:	0501                	addi	a0,a0,0
 d1a:	04020003          	lb	zero,64(tp) # 40 <putchar-0x44>
 d1e:	0301                	addi	t1,t1,0
 d20:	0900                	addi	s0,sp,144
 d22:	000a                	c.slli	zero,0x2
 d24:	0301                	addi	t1,t1,0
 d26:	090a                	slli	s2,s2,0x2
 d28:	000a                	c.slli	zero,0x2
 d2a:	0301                	addi	t1,t1,0
 d2c:	0901                	addi	s2,s2,0
 d2e:	0004                	0x4
 d30:	0301                	addi	t1,t1,0
 d32:	0901                	addi	s2,s2,0
 d34:	0004                	0x4
 d36:	0501                	addi	a0,a0,0
 d38:	0301                	addi	t1,t1,0
 d3a:	0901                	addi	s2,s2,0
 d3c:	0008                	0x8
 d3e:	0301                	addi	t1,t1,0
 d40:	0924                	addi	s1,sp,152
 d42:	0008                	0x8
 d44:	0501                	addi	a0,a0,0
 d46:	031c                	addi	a5,sp,384
 d48:	0902                	c.slli64	s2
 d4a:	0008                	0x8
 d4c:	0501                	addi	a0,a0,0
 d4e:	09000303          	lb	t1,144(zero) # 90 <putchar+0xc>
 d52:	0002                	c.slli64	zero
 d54:	0501                	addi	a0,a0,0
 d56:	0301                	addi	t1,t1,0
 d58:	0901                	addi	s2,s2,0
 d5a:	0006                	c.slli	zero,0x1
 d5c:	0301                	addi	t1,t1,0
 d5e:	00e6                	slli	ra,ra,0x19
 d60:	0809                	addi	a6,a6,2
 d62:	0100                	addi	s0,sp,128
 d64:	0a05                	addi	s4,s4,1
 d66:	08090303          	lb	t1,128(s2)
 d6a:	0100                	addi	s0,sp,128
 d6c:	04090103          	lb	sp,64(s2)
 d70:	0100                	addi	s0,sp,128
 d72:	0b05                	addi	s6,s6,1
 d74:	04090303          	lb	t1,64(s2)
 d78:	0100                	addi	s0,sp,128
 d7a:	0405                	addi	s0,s0,1
 d7c:	02090003          	lb	zero,32(s2)
 d80:	0100                	addi	s0,sp,128
 d82:	1705                	addi	a4,a4,-31
 d84:	0200                	addi	s0,sp,256
 d86:	0304                	addi	s1,sp,384
 d88:	02090103          	lb	sp,32(s2)
 d8c:	0100                	addi	s0,sp,128
 d8e:	0d05                	addi	s10,s10,1
 d90:	0200                	addi	s0,sp,256
 d92:	0304                	addi	s1,sp,384
 d94:	06090003          	lb	zero,96(s2)
 d98:	0100                	addi	s0,sp,128
 d9a:	1705                	addi	a4,a4,-31
 d9c:	0200                	addi	s0,sp,256
 d9e:	0304                	addi	s1,sp,384
 da0:	06090003          	lb	zero,96(s2)
 da4:	0100                	addi	s0,sp,128
 da6:	1105                	addi	sp,sp,-31
 da8:	0200                	addi	s0,sp,256
 daa:	0304                	addi	s1,sp,384
 dac:	04090003          	lb	zero,64(s2)
 db0:	0100                	addi	s0,sp,128
 db2:	1505                	addi	a0,a0,-31
 db4:	0200                	addi	s0,sp,256
 db6:	0304                	addi	s1,sp,384
 db8:	04097f03          	0x4097f03
 dbc:	0100                	addi	s0,sp,128
 dbe:	0405                	addi	s0,s0,1
 dc0:	0200                	addi	s0,sp,256
 dc2:	0104                	addi	s1,sp,128
 dc4:	06090003          	lb	zero,96(s2)
 dc8:	0100                	addi	s0,sp,128
 dca:	0105                	addi	sp,sp,1
 dcc:	08090203          	lb	tp,128(s2)
 dd0:	0100                	addi	s0,sp,128
 dd2:	0809                	addi	a6,a6,2
 dd4:	0000                	unimp
 dd6:	0101                	addi	sp,sp,0
 dd8:	01c0                	addi	s0,sp,196
 dda:	0000                	unimp
 ddc:	006d0003          	lb	zero,6(s10) # 19006 <_stack_len+0x11006>
 de0:	0000                	unimp
 de2:	0101                	addi	sp,sp,0
 de4:	000d0efb          	0xd0efb
 de8:	0101                	addi	sp,sp,0
 dea:	0101                	addi	sp,sp,0
 dec:	0000                	unimp
 dee:	0100                	addi	s0,sp,128
 df0:	0000                	unimp
 df2:	2f01                	jal	1502 <_bss_end+0x71a>
 df4:	6f68                	flw	fa0,92(a4)
 df6:	656d                	lui	a0,0x1b
 df8:	746e612f          	0x746e612f
 dfc:	6f68                	flw	fa0,92(a4)
 dfe:	796e                	flw	fs2,248(sp)
 e00:	656f432f          	0x656f432f
 e04:	7275                	lui	tp,0xffffd
 e06:	69522d73          	csrrs	s10,0x695,tp
 e0a:	2f566373          	csrrsi	t1,0x2f5,12
 e0e:	6269                	lui	tp,0x1a
 e10:	7865                	lui	a6,0xffff9
 e12:	6d5f 646f 6669      	0x6669646f6d5f
 e18:	765f 6569 6e6e      	0x6e6e6569765f
 e1e:	5f65                	li	t5,-7
 e20:	2f35                	jal	155c <_bss_end+0x774>
 e22:	7865                	lui	a6,0xffff9
 e24:	6d61                	lui	s10,0x18
 e26:	6c70                	flw	fa2,92(s0)
 e28:	7365                	lui	t1,0xffff9
 e2a:	2f77732f          	0x2f77732f
 e2e:	706d6973          	csrrsi	s2,0x706,26
 e32:	656c                	flw	fa1,76(a0)
 e34:	735f 7379 6574      	0x65747379735f
 e3a:	2f6d                	jal	15f4 <_bss_end+0x80c>
 e3c:	6d6d6f63          	bltu	s10,s6,151a <_bss_end+0x732>
 e40:	00006e6f          	jal	t3,6e40 <_min_stack+0x4e40>
 e44:	30747263          	bgeu	s0,t2,1148 <_bss_end+0x360>
 e48:	532e                	lw	t1,232(sp)
 e4a:	0100                	addi	s0,sp,128
 e4c:	0000                	unimp
 e4e:	0000                	unimp
 e50:	0205                	addi	tp,tp,1
 e52:	0bce                	slli	s7,s7,0x13
 e54:	0000                	unimp
 e56:	03010903          	lb	s2,48(sp)
 e5a:	00040903          	lb	s2,0(s0) # fffe1000 <_stack_start+0xffee1000>
 e5e:	0301                	addi	t1,t1,0
 e60:	0904                	addi	s1,sp,144
 e62:	0004                	0x4
 e64:	0301                	addi	t1,t1,0
 e66:	0901                	addi	s2,s2,0
 e68:	0004                	0x4
 e6a:	0301                	addi	t1,t1,0
 e6c:	0901                	addi	s2,s2,0
 e6e:	0002                	c.slli64	zero
 e70:	0301                	addi	t1,t1,0
 e72:	0901                	addi	s2,s2,0
 e74:	0002                	c.slli64	zero
 e76:	0301                	addi	t1,t1,0
 e78:	0901                	addi	s2,s2,0
 e7a:	0002                	c.slli64	zero
 e7c:	0301                	addi	t1,t1,0
 e7e:	0901                	addi	s2,s2,0
 e80:	0002                	c.slli64	zero
 e82:	0301                	addi	t1,t1,0
 e84:	0901                	addi	s2,s2,0
 e86:	0002                	c.slli64	zero
 e88:	0301                	addi	t1,t1,0
 e8a:	0901                	addi	s2,s2,0
 e8c:	0002                	c.slli64	zero
 e8e:	0301                	addi	t1,t1,0
 e90:	0901                	addi	s2,s2,0
 e92:	0002                	c.slli64	zero
 e94:	0301                	addi	t1,t1,0
 e96:	0901                	addi	s2,s2,0
 e98:	0002                	c.slli64	zero
 e9a:	0301                	addi	t1,t1,0
 e9c:	0901                	addi	s2,s2,0
 e9e:	0002                	c.slli64	zero
 ea0:	0301                	addi	t1,t1,0
 ea2:	0901                	addi	s2,s2,0
 ea4:	0002                	c.slli64	zero
 ea6:	0301                	addi	t1,t1,0
 ea8:	0901                	addi	s2,s2,0
 eaa:	0002                	c.slli64	zero
 eac:	0301                	addi	t1,t1,0
 eae:	0901                	addi	s2,s2,0
 eb0:	0002                	c.slli64	zero
 eb2:	0301                	addi	t1,t1,0
 eb4:	0901                	addi	s2,s2,0
 eb6:	0002                	c.slli64	zero
 eb8:	0301                	addi	t1,t1,0
 eba:	0901                	addi	s2,s2,0
 ebc:	0002                	c.slli64	zero
 ebe:	0301                	addi	t1,t1,0
 ec0:	0901                	addi	s2,s2,0
 ec2:	0002                	c.slli64	zero
 ec4:	0301                	addi	t1,t1,0
 ec6:	0901                	addi	s2,s2,0
 ec8:	0002                	c.slli64	zero
 eca:	0301                	addi	t1,t1,0
 ecc:	0901                	addi	s2,s2,0
 ece:	0002                	c.slli64	zero
 ed0:	0301                	addi	t1,t1,0
 ed2:	0901                	addi	s2,s2,0
 ed4:	0002                	c.slli64	zero
 ed6:	0301                	addi	t1,t1,0
 ed8:	0901                	addi	s2,s2,0
 eda:	0002                	c.slli64	zero
 edc:	0301                	addi	t1,t1,0
 ede:	0901                	addi	s2,s2,0
 ee0:	0002                	c.slli64	zero
 ee2:	0301                	addi	t1,t1,0
 ee4:	0901                	addi	s2,s2,0
 ee6:	0002                	c.slli64	zero
 ee8:	0301                	addi	t1,t1,0
 eea:	0901                	addi	s2,s2,0
 eec:	0002                	c.slli64	zero
 eee:	0301                	addi	t1,t1,0
 ef0:	0901                	addi	s2,s2,0
 ef2:	0002                	c.slli64	zero
 ef4:	0301                	addi	t1,t1,0
 ef6:	0901                	addi	s2,s2,0
 ef8:	0002                	c.slli64	zero
 efa:	0301                	addi	t1,t1,0
 efc:	0901                	addi	s2,s2,0
 efe:	0002                	c.slli64	zero
 f00:	0301                	addi	t1,t1,0
 f02:	0901                	addi	s2,s2,0
 f04:	0002                	c.slli64	zero
 f06:	0301                	addi	t1,t1,0
 f08:	0901                	addi	s2,s2,0
 f0a:	0002                	c.slli64	zero
 f0c:	0301                	addi	t1,t1,0
 f0e:	0901                	addi	s2,s2,0
 f10:	0002                	c.slli64	zero
 f12:	0301                	addi	t1,t1,0
 f14:	0901                	addi	s2,s2,0
 f16:	0002                	c.slli64	zero
 f18:	0301                	addi	t1,t1,0
 f1a:	00020903          	lb	s2,0(tp) # 1a000 <_stack_len+0x12000>
 f1e:	0301                	addi	t1,t1,0
 f20:	0906                	slli	s2,s2,0x1
 f22:	0008                	0x8
 f24:	0301                	addi	t1,t1,0
 f26:	0901                	addi	s2,s2,0
 f28:	0008                	0x8
 f2a:	0301                	addi	t1,t1,0
 f2c:	0902                	c.slli64	s2
 f2e:	0008                	0x8
 f30:	0301                	addi	t1,t1,0
 f32:	00040903          	lb	s2,0(s0)
 f36:	0301                	addi	t1,t1,0
 f38:	0901                	addi	s2,s2,0
 f3a:	0004                	0x4
 f3c:	0301                	addi	t1,t1,0
 f3e:	0901                	addi	s2,s2,0
 f40:	0002                	c.slli64	zero
 f42:	0301                	addi	t1,t1,0
 f44:	0906                	slli	s2,s2,0x1
 f46:	0004                	0x4
 f48:	0301                	addi	t1,t1,0
 f4a:	0901                	addi	s2,s2,0
 f4c:	0004                	0x4
 f4e:	0301                	addi	t1,t1,0
 f50:	0901                	addi	s2,s2,0
 f52:	0004                	0x4
 f54:	0301                	addi	t1,t1,0
 f56:	00040903          	lb	s2,0(s0)
 f5a:	0301                	addi	t1,t1,0
 f5c:	0901                	addi	s2,s2,0
 f5e:	0008                	0x8
 f60:	0301                	addi	t1,t1,0
 f62:	0901                	addi	s2,s2,0
 f64:	0002                	c.slli64	zero
 f66:	0301                	addi	t1,t1,0
 f68:	0904                	addi	s1,sp,144
 f6a:	0004                	0x4
 f6c:	0301                	addi	t1,t1,0
 f6e:	0901                	addi	s2,s2,0
 f70:	0004                	0x4
 f72:	0901                	addi	s2,s2,0
 f74:	0002                	c.slli64	zero
 f76:	0100                	addi	s0,sp,128
 f78:	0001                	nop
 f7a:	0205                	addi	tp,tp,1
 f7c:	0000                	unimp
 f7e:	0000                	unimp
 f80:	0100dd03          	lhu	s10,16(ra)
 f84:	1c090103          	lb	sp,448(s2)
 f88:	0100                	addi	s0,sp,128
 f8a:	04090303          	lb	t1,64(s2)
 f8e:	0100                	addi	s0,sp,128
 f90:	60090403          	lb	s0,1536(s2)
 f94:	0100                	addi	s0,sp,128
 f96:	0409                	addi	s0,s0,2
 f98:	0000                	unimp
 f9a:	0101                	addi	sp,sp,0

Déassemblage de la section .debug_str :

00000000 <.debug_str>:
  .endr
   0:	5f746567          	0x5f746567
   4:	636d                	lui	t1,0x1b
   6:	7561                	lui	a0,0xffff8
   8:	73006573          	csrrsi	a0,0x730,0
   c:	6d69                	lui	s10,0x1a
   e:	6c70                	flw	fa2,92(s0)
  10:	5f65                	li	t5,-7
  12:	7865                	lui	a6,0xffff9
  14:	61685f63          	bge	a6,s6,632 <KeyExpansion+0x162>
  18:	646e                	flw	fs0,216(sp)
  1a:	656c                	flw	fa1,76(a0)
  jal x0, timer_handler
  1c:	0072                	c.slli	zero,0x1c
  1e:	6370                	flw	fa2,68(a4)
  .endr
  20:	746e756f          	jal	a0,e7766 <_stack_len+0xdf766>
  24:	655f 616e 6c62      	0x6c62616e655f
  2a:	0065                	c.nop	25
  2c:	72727563          	bgeu	tp,t2,756 <AddRoundKey+0x46>
  30:	6e65                	lui	t3,0x19
  32:	5f74                	lw	a3,124(a4)
  34:	6974                	flw	fa3,84(a0)
  36:	656d                	lui	a0,0x1b
  38:	4700                	lw	s0,8(a4)
  3a:	554e                	lw	a0,240(sp)
  3c:	4320                	lw	s0,64(a4)
  3e:	3731                	jal	ffffff4a <_stack_start+0xffefff4a>
  40:	3920                	fld	fs0,112(a0)
  42:	322e                	fld	ft4,232(sp)
  44:	302e                	fld	ft0,232(sp)
  46:	2d20                	fld	fs0,88(a0)
  48:	616d                	addi	sp,sp,240
  4a:	6372                	flw	ft6,28(sp)
  4c:	3d68                	fld	fa0,248(a0)
  4e:	7672                	flw	fa2,60(sp)
  50:	63693233          	0x63693233
  54:	2d20                	fld	fs0,88(a0)
  56:	616d                	addi	sp,sp,240
  58:	6962                	flw	fs2,24(sp)
  5a:	693d                	lui	s2,0xf
  5c:	706c                	flw	fa1,100(s0)
  5e:	2d203233          	0x2d203233
  62:	636d                	lui	t1,0x1b
  64:	6f6d                	lui	t5,0x1b
  66:	6564                	flw	fs1,76(a0)
  68:	3d6c                	fld	fa1,248(a0)
  6a:	656d                	lui	a0,0x1b
  6c:	6164                	flw	fs1,68(a0)
  6e:	796e                	flw	fs2,248(sp)
  70:	2d20                	fld	fs0,88(a0)
  72:	746d                	lui	s0,0xffffb
  74:	6e75                	lui	t3,0x1d
  76:	3d65                	jal	ffffff2e <_stack_start+0xffefff2e>
  78:	6f72                	flw	ft10,28(sp)
  7a:	74656b63          	bltu	a0,t1,7d0 <SubBytes+0x28>
  7e:	2d20                	fld	fs0,88(a0)
  jal x0, reset_handler
  80:	4f2d2067          	0x4f2d2067
int putchar(int c) {
  84:	2030                	fld	fa2,64(s0)
  86:	662d                	lui	a2,0xb
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	6976                	flw	fs2,92(sp)
  8a:	69626973          	csrrsi	s2,0x696,4
  8e:	696c                	flw	fa1,84(a0)
  90:	7974                	flw	fa3,116(a0)
  92:	683d                	lui	a6,0xf
  return c;
  94:	6469                	lui	s0,0x1a
}
  96:	6564                	flw	fs1,76(a0)
  98:	206e                	fld	ft0,216(sp)
  9a:	662d                	lui	a2,0xb
int puts(const char *str) {
  9c:	7266                	flw	ft4,120(sp)
  9e:	6565                	lui	a0,0x19
  a0:	6e617473          	csrrci	s0,0x6e6,2
    putchar(*str++);
  a4:	6964                	flw	fs1,84(a0)
  a6:	676e                	flw	fa4,216(sp)
  a8:	2d20                	fld	fs0,88(a0)
  aa:	6f66                	flw	ft10,88(sp)
  ac:	696d                	lui	s2,0x1b
  ae:	2d74                	fld	fa3,216(a0)
  b0:	7266                	flw	ft4,120(sp)
  b2:	6d61                	lui	s10,0x18
  while (*str) {
  b4:	2d65                	jal	76c <AddRoundKey+0x5c>
  b6:	6f70                	flw	fa2,92(a4)
  b8:	6e69                	lui	t3,0x1a
  ba:	6574                	flw	fa3,76(a0)
  return 0;
  bc:	0072                	c.slli	zero,0x1c
}
  be:	6d6f682f          	0x6d6f682f
  c2:	2f65                	jal	87a <ShiftRows+0x5a>
  c4:	6e61                	lui	t3,0x18
void puthex(uint32_t h) {
  c6:	6874                	flw	fa3,84(s0)
  c8:	2f796e6f          	jal	t3,96bbe <_stack_len+0x8ebbe>
  for (int i = 0; i < 8; i++) {
  cc:	75656f43          	0x75656f43
    cur_digit = h >> 28;
  d0:	7372                	flw	ft6,60(sp)
  d2:	522d                	li	tp,-21
  d4:	7369                	lui	t1,0xffffa
    if (cur_digit < 10)
  d6:	692f5663          	bge	t5,s2,762 <AddRoundKey+0x52>
  da:	6562                	flw	fa0,24(sp)
  dc:	5f78                	lw	a4,124(a4)
      putchar('0' + cur_digit);
  de:	6f6d                	lui	t5,0x1b
  e0:	6964                	flw	fs1,84(a0)
  e2:	5f66                	lw	t5,120(sp)
  e4:	6976                	flw	fs2,92(sp)
  e6:	6e65                	lui	t3,0x19
  e8:	656e                	flw	fa0,216(sp)
      putchar('A' - 10 + cur_digit);
  ea:	355f 652f 6178      	0x6178652f355f
  f0:	706d                	c.lui	zero,0xffffb
  f2:	656c                	flw	fa1,76(a0)
    h <<= 4;
  f4:	77732f73          	csrrs	t5,0x777,t1
  f8:	6d69732f          	0x6d69732f
  for (int i = 0; i < 8; i++) {
  fc:	6c70                	flw	fa2,92(s0)
  fe:	5f65                	li	t5,-7
 100:	74737973          	csrrci	s2,0x747,6
 104:	6d65                	lui	s10,0x19
 106:	6d6f632f          	0x6d6f632f
}
 10a:	6f6d                	lui	t5,0x1b
 10c:	2f6e                	fld	ft10,216(sp)
 10e:	706d6973          	csrrsi	s2,0x706,26
void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	656c                	flw	fa1,76(a0)
 114:	735f 7379 6574      	0x65747379735f
 11a:	5f6d                	li	t5,-5
 11c:	6d6d6f63          	bltu	s10,s6,7fa <SubBytes+0x52>
  asm volatile(
 120:	632e6e6f          	jal	t3,e6752 <_stack_len+0xde752>
 124:	7400                	flw	fs0,40(s0)
 126:	6d69                	lui	s10,0x1a
 128:	7265                	lui	tp,0xffff9
 12a:	655f 616e 6c62      	0x6c62616e655f
 130:	0065                	c.nop	25
 132:	6975                	lui	s2,0x1d
 134:	746e                	flw	fs0,248(sp)
 136:	3436                	fld	fs0,360(sp)
 138:	745f 7300 6d69      	0x6d697300745f
 13e:	685f 6c61 0074      	0x746c61685f
 144:	6e69                	lui	t3,0x1a
 146:	6968                	flw	fa0,84(a0)
 148:	6962                	flw	fs2,24(sp)
 14a:	5f74                	lw	a3,124(a4)
 14c:	6176                	flw	ft2,92(sp)
 14e:	006c                	addi	a1,sp,12
 150:	6e75                	lui	t3,0x1d
 152:	6e676973          	csrrsi	s2,0x6e6,14
 156:	6465                	lui	s0,0x19
 158:	6320                	flw	fs0,64(a4)
 15a:	6168                	flw	fa0,68(a0)
 15c:	0072                	c.slli	zero,0x1c
 15e:	726f6873          	csrrsi	a6,0x726,30
 162:	2074                	fld	fa3,192(s0)
 164:	6e75                	lui	t3,0x1d
 166:	6e676973          	csrrsi	s2,0x6e6,14
 16a:	6465                	lui	s0,0x19
 16c:	6920                	flw	fs0,80(a0)
 16e:	746e                	flw	fs0,248(sp)
 170:	7000                	flw	fs0,32(s0)
 172:	7475                	lui	s0,0xffffd
 174:	72616863          	bltu	sp,t1,8a4 <ShiftRows+0x84>
 178:	7400                	flw	fs0,40(s0)
 17a:	6d69                	lui	s10,0x1a
 17c:	6365                	lui	t1,0x19
 17e:	706d                	c.lui	zero,0xffffb
 180:	755f 6470 7461      	0x74616470755f
 186:	0065                	c.nop	25
 188:	6966                	flw	fs2,88(sp)
 18a:	616e                	flw	ft2,216(sp)
 18c:	5f6c                	lw	a1,124(a4)
 18e:	6974                	flw	fa3,84(a0)
 190:	656d                	lui	a0,0x1b
 192:	6900                	flw	fs0,16(a0)
 194:	636e                	flw	ft6,216(sp)
 196:	6572                	flw	fa0,28(sp)
 198:	656d                	lui	a0,0x1b
 19a:	746e                	flw	fs0,248(sp)
 19c:	745f 6d69 6365      	0x63656d69745f
 1a2:	706d                	c.lui	zero,0xffffb
 1a4:	7400                	flw	fs0,40(s0)
 1a6:	6d69                	lui	s10,0x1a
 1a8:	5f65                	li	t5,-7
 1aa:	6162                	flw	ft2,24(sp)
 1ac:	6c006573          	csrrsi	a0,0x6c0,0
 1b0:	20676e6f          	jal	t3,763b6 <_stack_len+0x6e3b6>
 1b4:	6f6c                	flw	fa1,92(a4)
 1b6:	676e                	flw	fa4,216(sp)
 1b8:	7520                	flw	fs0,104(a0)
 1ba:	736e                	flw	ft6,248(sp)
 1bc:	6769                	lui	a4,0x1a
 1be:	656e                	flw	fa0,216(sp)
 1c0:	2064                	fld	fs1,192(s0)
 1c2:	6e69                	lui	t3,0x1a
 1c4:	0074                	addi	a3,sp,12
 1c6:	6572                	flw	fa0,28(sp)
 1c8:	746c7573          	csrrci	a0,0x746,24
 1cc:	6300                	flw	fs0,0(a4)
 1ce:	7275                	lui	tp,0xffffd
 1d0:	6572                	flw	fa0,28(sp)
 1d2:	746e                	flw	fs0,248(sp)
 1d4:	745f 6d69 6865      	0x68656d69745f
 1da:	7400                	flw	fs0,40(s0)
 1dc:	6d69                	lui	s10,0x1a
 1de:	7265                	lui	tp,0xffff9
 1e0:	645f 7369 6261      	0x62617369645f
 1e6:	656c                	flw	fa1,76(a0)
 1e8:	2f00                	fld	fs0,24(a4)
 1ea:	6f68                	flw	fa0,92(a4)
 1ec:	656d                	lui	a0,0x1b
 1ee:	746e612f          	0x746e612f
 1f2:	6f68                	flw	fa0,92(a4)
 1f4:	796e                	flw	fs2,248(sp)
 1f6:	656f432f          	0x656f432f
 1fa:	7275                	lui	tp,0xffffd
 1fc:	69522d73          	csrrs	s10,0x695,tp
 200:	2f566373          	csrrsi	t1,0x2f5,12
 204:	6269                	lui	tp,0x1a
 206:	7865                	lui	a6,0xffff9
 208:	6d5f 646f 6669      	0x6669646f6d5f
 20e:	765f 6569 6e6e      	0x6e6e6569765f
 214:	5f65                	li	t5,-7
 216:	2f35                	jal	952 <MixColumns+0x36>
}
 218:	7865                	lui	a6,0xffff9
 21a:	6d61                	lui	s10,0x18
void pcount_enable(int enable) {
 21c:	6c70                	flw	fa2,92(s0)
 21e:	7365                	lui	t1,0xffff9
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	2f77732f          	0x2f77732f
 224:	706d6973          	csrrsi	s2,0x706,26
 228:	656c                	flw	fa1,76(a0)
 22a:	735f 7379 6574      	0x65747379735f
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 230:	2f6d                	jal	9ea <MixColumns+0xce>
}
 232:	6561                	lui	a0,0x18
 234:	69740073          	0x69740073
unsigned int get_mepc() {
 238:	656d                	lui	a0,0x1b
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23a:	695f 636e 6572      	0x6572636e695f
  return result;
 240:	656d                	lui	a0,0x1b
}
 242:	746e                	flw	fs0,248(sp)
 244:	6c00                	flw	fs0,24(s0)
 246:	20676e6f          	jal	t3,7644c <_stack_len+0x6e44c>
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24a:	6f6c                	flw	fa1,92(a4)
 24c:	676e                	flw	fa4,216(sp)
 24e:	6920                	flw	fs0,80(a0)
  return result;
 250:	746e                	flw	fs0,248(sp)
}
 252:	7400                	flw	fs0,40(s0)
 254:	6d69                	lui	s10,0x1a
 256:	5f65                	li	t5,-7
unsigned int get_mtval() {
 258:	6c65                	lui	s8,0x19
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25a:	7061                	c.lui	zero,0xffff8
 25c:	00646573          	csrrsi	a0,0x6,8
  return result;
 260:	6974                	flw	fa3,84(a0)
}
 262:	656d                	lui	a0,0x1b
 264:	5f72                	lw	t5,60(sp)
 266:	6572                	flw	fa0,28(sp)
void simple_exc_handler(void) {
 268:	6461                	lui	s0,0x18
 26a:	6e00                	flw	fs0,24(a2)
  puts("EXCEPTION!!!\n");
 26c:	7765                	lui	a4,0xffff9
 26e:	745f 6d69 0065      	0x656d69745f
 274:	726f6873          	csrrsi	a6,0x726,30
  puts("============\n");
 278:	2074                	fld	fa3,192(s0)
 27a:	6e69                	lui	t3,0x1a
 27c:	0074                	addi	a3,sp,12
 27e:	5f746567          	0x5f746567
  puts("MEPC:   0x%0X");puthex(get_mepc());
 282:	6c65                	lui	s8,0x19
 284:	7061                	c.lui	zero,0xffff8
 286:	5f646573          	csrrsi	a0,0x5f6,8
 28a:	6974                	flw	fa3,84(a0)
 28c:	656d                	lui	a0,0x1b
 28e:	6300                	flw	fs0,0(a4)
 290:	7275                	lui	tp,0xffffd
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	645f 6769 7469      	0x74696769645f
 298:	7500                	flw	fs0,40(a0)
 29a:	6e69                	lui	t3,0x1a
 29c:	3374                	fld	fa3,224(a4)
 29e:	5f32                	lw	t5,44(sp)
 2a0:	0074                	addi	a3,sp,12
 2a2:	7570                	flw	fa2,108(a0)
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a4:	7374                	flw	fa3,100(a4)
 2a6:	6700                	flw	fs0,8(a4)
 2a8:	7465                	lui	s0,0xffff9
 2aa:	6d5f 7065 0063      	0x6370656d5f
 2b0:	5f746567          	0x5f746567
 2b4:	746d                	lui	s0,0xffffb
  putchar('\n');
 2b6:	6176                	flw	ft2,92(sp)
 2b8:	006c                	addi	a1,sp,12
  sim_halt();
 2ba:	706d6973          	csrrsi	s2,0x706,26
inline static void increment_timecmp(uint64_t time_base) {
 2be:	656c                	flw	fa1,76(a0)
 2c0:	745f 6d69 7265      	0x72656d69745f
  uint64_t current_time = timer_read();
 2c6:	685f 6e61 6c64      	0x6c646e61685f
  current_time += time_base;
 2cc:	7265                	lui	tp,0xffff9
 2ce:	7000                	flw	fs0,32(s0)
 2d0:	6e756f63          	bltu	a0,t2,9ce <MixColumns+0xb2>
 2d4:	5f74                	lw	a3,124(a4)
 2d6:	6572                	flw	fa0,28(sp)
 2d8:	00746573          	csrrsi	a0,0x7,8
 2dc:	7570                	flw	fa2,108(a0)
 2de:	6874                	flw	fa3,84(s0)
 2e0:	7865                	lui	a6,0xffff9
 2e2:	6400                	flw	fs0,8(s0)
 2e4:	7461                	lui	s0,0xffff8
 2e6:	5f61                	li	t5,-8
 2e8:	6974                	flw	fa3,84(a0)
 2ea:	796e                	flw	fs2,248(sp)
  timecmp_update(current_time);
 2ec:	6d00                	flw	fs0,24(a0)
 2ee:	6961                	lui	s2,0x18
 2f0:	006e                	c.slli	zero,0x1b
}
 2f2:	6975                	lui	s2,0x1d
 2f4:	746e                	flw	fs0,248(sp)
 2f6:	5f38                	lw	a4,120(a4)
 2f8:	0074                	addi	a3,sp,12
void timer_enable(uint64_t time_base) {
 2fa:	4541                	li	a0,16
 2fc:	74635f53          	0x74635f53
 300:	0078                	addi	a4,sp,12
  time_elapsed = 0;
 302:	5f79656b          	0x5f79656b
 306:	6974                	flw	fa3,84(a0)
 308:	796e                	flw	fs2,248(sp)
 30a:	4300                	lw	s0,0(a4)
 30c:	665f 6c69 7365      	0x73656c69665f
  time_increment = time_base;
 312:	7365612f          	0x7365612f
 316:	632e                	flw	ft6,200(sp)
 318:	7300                	flw	fs0,32(a4)
 31a:	6174                	flw	fa3,68(a0)
 31c:	6574                	flw	fa3,76(a0)
 31e:	4100                	lw	s0,0(a0)
 320:	5345                	li	t1,-15
  increment_timecmp(time_base);
 322:	455f 4243 655f      	0x655f4243455f
  asm volatile("csrs  mie, %0\n" : : "r"(0x80));
 328:	636e                	flw	ft6,216(sp)
 32a:	7972                	flw	fs2,60(sp)
 32c:	7470                	flw	fa2,108(s0)
 32e:	7400                	flw	fs0,40(s0)
  asm volatile("csrs  mstatus, %0\n" : : "r"(0x8));
 330:	6d65                	lui	s10,0x19
 332:	6170                	flw	fa2,68(a0)
 334:	4b00                	lw	s0,16(a4)
}
 336:	7965                	lui	s2,0xffff9
 338:	7845                	lui	a6,0xffff1
 33a:	6170                	flw	fa2,68(a0)
 33c:	736e                	flw	ft6,248(sp)
void timer_disable(void) { asm volatile("csrc  mie, %0\n" : : "r"(0x80)); }
 33e:	6f69                	lui	t5,0x1a
 340:	006e                	c.slli	zero,0x1b
 342:	786f6273          	csrrsi	tp,0x786,30
 346:	7400                	flw	fs0,40(s0)
 348:	6d65                	lui	s10,0x19
uint64_t timer_read(void) {
 34a:	0070                	addi	a2,sp,12
    current_timeh = DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0);
 34c:	63727363          	bgeu	tp,s7,972 <MixColumns+0x56>
 350:	5300                	lw	s0,32(a4)
 352:	6275                	lui	tp,0x1d
 354:	7942                	flw	fs2,48(sp)
 356:	6574                	flw	fa3,76(a0)
    current_time = DEV_READ(TIMER_BASE + TIMER_MTIME, 0);
 358:	74730073          	0x74730073
 35c:	7461                	lui	s0,0xffff8
 35e:	5f65                	li	t5,-7
 360:	0074                	addi	a3,sp,12
  } while (current_timeh != DEV_READ(TIMER_BASE + TIMER_MTIMEH, 0));
 362:	4541                	li	a0,16
 364:	6e695f53          	0x6e695f53
 368:	7469                	lui	s0,0xffffa
 36a:	635f 7874 7200      	0x72007874635f
 370:	646e756f          	jal	a0,e79b6 <_stack_len+0xdf9b6>
  uint64_t final_time = ((uint64_t)current_timeh << 32) | current_time;
 374:	5300                	lw	s0,32(a4)
 376:	6968                	flw	fa0,84(a0)
 378:	7466                	flw	fs0,120(sp)
 37a:	6f52                	flw	ft10,20(sp)
 37c:	41007377          	0x41007377
 380:	6464                	flw	fs1,76(s0)
 382:	6f52                	flw	ft10,20(sp)
 384:	6e75                	lui	t3,0x1d
 386:	4b64                	lw	s1,84(a4)
 388:	7965                	lui	s2,0xffff9
 38a:	4d00                	lw	s0,24(a0)
 38c:	7869                	lui	a6,0xffffa
  return final_time;
 38e:	756c6f43          	0x756c6f43
}
 392:	6e6d                	lui	t3,0x1b
 394:	656d0073          	0x656d0073
 398:	636d                	lui	t1,0x1b
void timecmp_update(uint64_t new_time) {
 39a:	7970                	flw	fa2,116(a0)
 39c:	7500                	flw	fs0,40(a0)
 39e:	7438                	flw	fa4,104(s0)
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, -1);
 3a0:	706d                	c.lui	zero,0xffffb
 3a2:	4300                	lw	s0,0(a4)
 3a4:	665f 6c69 7365      	0x73656c69665f
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMPH, new_time >> 32);
 3aa:	7365612f          	0x7365612f
 3ae:	735f 6d74 745f      	0x745f6d74735f
 3b4:	6e69                	lui	t3,0x1a
 3b6:	2e79                	jal	754 <AddRoundKey+0x44>
 3b8:	64630063          	beq	t1,t1,9f8 <MixColumns+0xdc>
  DEV_WRITE(TIMER_BASE + TIMER_MTIMECMP, new_time);
 3bc:	7365                	lui	t1,0xffff9
 3be:	0074                	addi	a3,sp,12
 3c0:	6352                	flw	ft6,20(sp)
 3c2:	78006e6f          	jal	t3,6b42 <_min_stack+0x4b42>
}
 3c6:	6974                	flw	fa3,84(a0)
 3c8:	656d                	lui	a0,0x1b
 3ca:	4300                	lw	s0,0(a4)
uint64_t get_elapsed_time(void) { return time_elapsed; }
 3cc:	7069                	c.lui	zero,0xffffa
 3ce:	6568                	flw	fa0,76(a0)
 3d0:	0072                	c.slli	zero,0x1c
 3d2:	6d6f682f          	0x6d6f682f
 3d6:	2f65                	jal	b8e <AES_ECB_encrypt+0x16>
 3d8:	6e61                	lui	t3,0x18
 3da:	6874                	flw	fa3,84(s0)
 3dc:	2f796e6f          	jal	t3,96ed2 <_stack_len+0x8eed2>
void simple_timer_handler(void) {
 3e0:	75656f43          	0x75656f43
 3e4:	7372                	flw	ft6,60(sp)
 3e6:	522d                	li	tp,-21
 3e8:	7369                	lui	t1,0xffffa
 3ea:	692f5663          	bge	t5,s2,a76 <MixColumns+0x15a>
 3ee:	6562                	flw	fa0,24(sp)
 3f0:	5f78                	lw	a4,124(a4)
 3f2:	6f6d                	lui	t5,0x1b
 3f4:	6964                	flw	fs1,84(a0)
 3f6:	5f66                	lw	t5,120(sp)
 3f8:	6976                	flw	fs2,92(sp)
 3fa:	6e65                	lui	t3,0x19
 3fc:	656e                	flw	fa0,216(sp)
 3fe:	355f 652f 6178      	0x6178652f355f
  increment_timecmp(time_increment);
 404:	706d                	c.lui	zero,0xffffb
 406:	656c                	flw	fa1,76(a0)
 408:	77732f73          	csrrs	t5,0x777,t1
 40c:	6d69732f          	0x6d69732f
 410:	6c70                	flw	fa2,92(s0)
  time_elapsed++;
 412:	5f65                	li	t5,-7
 414:	74737973          	csrrci	s2,0x747,6
 418:	6d65                	lui	s10,0x19
 41a:	6d6f632f          	0x6d6f632f
 41e:	6f6d                	lui	t5,0x1b
 420:	2f6e                	fld	ft10,216(sp)
 422:	30747263          	bgeu	s0,t2,726 <AddRoundKey+0x16>
 426:	532e                	lw	t1,232(sp)
 428:	4700                	lw	s0,8(a4)
 42a:	554e                	lw	a0,240(sp)
 42c:	4120                	lw	s0,64(a0)
 42e:	2e322053          	0x2e322053
 432:	          	snez	tp,zero

Déassemblage de la section .comment :

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Déassemblage de la section .riscv.attributes :

00000000 <.riscv.attributes>:
   0:	2041                	jal	80 <putchar-0x4>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <putchar-0x70>
   c:	0016                	c.slli	zero,0x5
   e:	0000                	unimp
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  jal x0, timer_handler
  1c:	30703263          	0x30703263
	...

Déassemblage de la section .debug_frame :

00000000 <.debug_frame>:
  .endr
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	0014                	0x14
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	0084                	addi	s1,sp,64
  1a:	0000                	unimp
  jal x0, timer_handler
  1c:	0018                	0x18
  1e:	0000                	unimp
  .endr
  20:	0e42                	slli	t3,t3,0x10
  22:	5410                	lw	a2,40(s0)
  24:	000e                	c.slli	zero,0x3
  26:	0000                	unimp
  28:	0018                	0x18
  2a:	0000                	unimp
  2c:	0000                	unimp
  2e:	0000                	unimp
  30:	009c                	addi	a5,sp,64
  32:	0000                	unimp
  34:	002a                	c.slli	zero,0xa
  36:	0000                	unimp
  38:	0e42                	slli	t3,t3,0x10
  3a:	4220                	lw	s0,64(a2)
  3c:	0181                	addi	gp,gp,0
  3e:	c162                	sw	s8,128(sp)
  40:	0e42                	slli	t3,t3,0x10
  42:	0000                	unimp
  44:	0018                	0x18
  46:	0000                	unimp
  48:	0000                	unimp
  4a:	0000                	unimp
  4c:	00c6                	slli	ra,ra,0x11
  4e:	0000                	unimp
  50:	004c                	addi	a1,sp,4
  52:	0000                	unimp
  54:	0e42                	slli	t3,t3,0x10
  56:	4230                	lw	a2,64(a2)
  58:	0181                	addi	gp,gp,0
  5a:	4402                	lw	s0,0(sp)
  5c:	42c1                	li	t0,16
  5e:	000e                	c.slli	zero,0x3
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	0112                	slli	sp,sp,0x4
  6a:	0000                	unimp
  6c:	000e                	c.slli	zero,0x3
  6e:	0000                	unimp
  70:	000c                	0xc
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0120                	addi	s0,sp,136
  7a:	0000                	unimp
  7c:	00fc                	addi	a5,sp,76
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0014                	0x14
  82:	0000                	unimp
int putchar(int c) {
  84:	0000                	unimp
  86:	0000                	unimp
  DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_OUT, (unsigned char)c);
  88:	021c                	addi	a5,sp,256
  8a:	0000                	unimp
  8c:	001c                	0x1c
  8e:	0000                	unimp
  90:	0e42                	slli	t3,t3,0x10
  92:	5820                	lw	s0,112(s0)
  return c;
  94:	000e                	c.slli	zero,0x3
}
  96:	0000                	unimp
  98:	0014                	0x14
  9a:	0000                	unimp
int puts(const char *str) {
  9c:	0000                	unimp
  9e:	0000                	unimp
  a0:	0238                	addi	a4,sp,264
  while (*str) {
  a2:	0000                	unimp
    putchar(*str++);
  a4:	0010                	0x10
  a6:	0000                	unimp
  a8:	0e42                	slli	t3,t3,0x10
  aa:	4c10                	lw	a2,24(s0)
  ac:	000e                	c.slli	zero,0x3
  ae:	0000                	unimp
  b0:	0014                	0x14
  b2:	0000                	unimp
  while (*str) {
  b4:	0000                	unimp
  b6:	0000                	unimp
  b8:	0248                	addi	a0,sp,260
  ba:	0000                	unimp
  return 0;
  bc:	0010                	0x10
}
  be:	0000                	unimp
  c0:	0e42                	slli	t3,t3,0x10
  c2:	4c10                	lw	a2,24(s0)
  c4:	000e                	c.slli	zero,0x3
void puthex(uint32_t h) {
  c6:	0000                	unimp
  c8:	0014                	0x14
  ca:	0000                	unimp
  for (int i = 0; i < 8; i++) {
  cc:	0000                	unimp
  ce:	0000                	unimp
    cur_digit = h >> 28;
  d0:	0258                	addi	a4,sp,260
  d2:	0000                	unimp
  d4:	0010                	0x10
    if (cur_digit < 10)
  d6:	0000                	unimp
  d8:	0e42                	slli	t3,t3,0x10
  da:	4c10                	lw	a2,24(s0)
  dc:	000e                	c.slli	zero,0x3
      putchar('0' + cur_digit);
  de:	0000                	unimp
  e0:	0014                	0x14
  e2:	0000                	unimp
  e4:	0000                	unimp
  e6:	0000                	unimp
  e8:	0268                	addi	a0,sp,268
      putchar('A' - 10 + cur_digit);
  ea:	0000                	unimp
  ec:	0056                	c.slli	zero,0x15
  ee:	0000                	unimp
  f0:	0e42                	slli	t3,t3,0x10
  f2:	4210                	lw	a2,0(a2)
    h <<= 4;
  f4:	0181                	addi	gp,gp,0
  f6:	0000                	unimp
  f8:	0018                	0x18
  for (int i = 0; i < 8; i++) {
  fa:	0000                	unimp
  fc:	0000                	unimp
  fe:	0000                	unimp
 100:	02be                	slli	t0,t0,0xf
 102:	0000                	unimp
 104:	003c                	addi	a5,sp,8
 106:	0000                	unimp
}
 108:	0e42                	slli	t3,t3,0x10
 10a:	4230                	lw	a2,64(a2)
 10c:	0181                	addi	gp,gp,0
 10e:	3402                	fld	fs0,32(sp)
 110:	42c1                	li	t0,16
void sim_halt() { DEV_WRITE(SIM_CTRL_BASE + SIM_CTRL_CTRL, 1); }
 112:	000e                	c.slli	zero,0x3
 114:	0018                	0x18
 116:	0000                	unimp
 118:	0000                	unimp
 11a:	0000                	unimp
 11c:	02fa                	slli	t0,t0,0x1e
 11e:	0000                	unimp
  asm volatile(
 120:	0044                	addi	s1,sp,4
 122:	0000                	unimp
 124:	0e42                	slli	t3,t3,0x10
 126:	4220                	lw	s0,64(a2)
 128:	0181                	addi	gp,gp,0
 12a:	3c02                	fld	fs8,32(sp)
 12c:	42c1                	li	t0,16
 12e:	000e                	c.slli	zero,0x3
 130:	000c                	0xc
 132:	0000                	unimp
 134:	0000                	unimp
 136:	0000                	unimp
 138:	033e                	slli	t1,t1,0xf
 13a:	0000                	unimp
 13c:	000c                	0xc
 13e:	0000                	unimp
 140:	0014                	0x14
 142:	0000                	unimp
 144:	0000                	unimp
 146:	0000                	unimp
 148:	034a                	slli	t1,t1,0x12
 14a:	0000                	unimp
 14c:	0050                	addi	a2,sp,4
 14e:	0000                	unimp
 150:	0e42                	slli	t3,t3,0x10
 152:	0210                	addi	a2,sp,256
 154:	0e4c                	addi	a1,sp,788
 156:	0000                	unimp
 158:	0014                	0x14
 15a:	0000                	unimp
 15c:	0000                	unimp
 15e:	0000                	unimp
 160:	039a                	slli	t2,t2,0x6
 162:	0000                	unimp
 164:	0032                	c.slli	zero,0xc
 166:	0000                	unimp
 168:	0e42                	slli	t3,t3,0x10
 16a:	6e10                	flw	fa2,24(a2)
 16c:	000e                	c.slli	zero,0x3
 16e:	0000                	unimp
 170:	000c                	0xc
 172:	0000                	unimp
 174:	0000                	unimp
 176:	0000                	unimp
 178:	03cc                	addi	a1,sp,452
 17a:	0000                	unimp
 17c:	0012                	c.slli	zero,0x4
 17e:	0000                	unimp
 180:	0054                	addi	a3,sp,4
 182:	0000                	unimp
 184:	0000                	unimp
 186:	0000                	unimp
 188:	03de                	slli	t2,t2,0x17
 18a:	0000                	unimp
 18c:	0090                	addi	a2,sp,64
 18e:	0000                	unimp
 190:	0e42                	slli	t3,t3,0x10
 192:	6040                	flw	fs0,4(s0)
 194:	0181                	addi	gp,gp,0
 196:	0285                	addi	t0,t0,1
 198:	0386                	slli	t2,t2,0x1
 19a:	058a0487          	0x58a0487
 19e:	078c068b          	0x78c068b
 1a2:	088d                	addi	a7,a7,3
 1a4:	098e                	slli	s3,s3,0x3
 1a6:	0b900a8f          	0xb900a8f
 1aa:	0c91                	addi	s9,s9,4
 1ac:	0d9c                	addi	a5,sp,720
 1ae:	0e9d                	addi	t4,t4,7
 1b0:	0f9e                	slli	t6,t6,0x7
 1b2:	109f 4a02 42c1      	0x42c14a02109f
 1b8:	42c5                	li	t0,17
 1ba:	42c6                	lw	t0,80(sp)
 1bc:	42ca42c7          	fmsub.d	ft5,fs4,fa2,fs0,rmm
 1c0:	42cc42cb          	fnmsub.d	ft5,fs8,fa2,fs0,rmm
 1c4:	42cd                	li	t0,19
 1c6:	42ce                	lw	t0,208(sp)
 1c8:	42d042cf          	fnmadd.d	ft5,ft0,fa3,fs0,rmm
 1cc:	42d1                	li	t0,20
 1ce:	42dc                	lw	a5,4(a3)
 1d0:	42dd                	li	t0,23
 1d2:	42de                	lw	t0,212(sp)
 1d4:	42df 000e 000c      	0xc000e42df
 1da:	0000                	unimp
 1dc:	ffff                	0xffff
 1de:	ffff                	0xffff
 1e0:	0001                	nop
 1e2:	7c01                	lui	s8,0xfffe0
 1e4:	0d01                	addi	s10,s10,0
 1e6:	0002                	c.slli64	zero
 1e8:	001c                	0x1c
 1ea:	0000                	unimp
 1ec:	01d8                	addi	a4,sp,196
 1ee:	0000                	unimp
 1f0:	046e                	slli	s0,s0,0x1b
 1f2:	0000                	unimp
 1f4:	0062                	c.slli	zero,0x18
 1f6:	0000                	unimp
 1f8:	0e42                	slli	t3,t3,0x10
 1fa:	01e0                	addi	s0,sp,204
 1fc:	8142                	mv	sp,a6
 1fe:	0201                	addi	tp,tp,0
 200:	c15a                	sw	s6,128(sp)
 202:	0e42                	slli	t3,t3,0x10
 204:	0000                	unimp
 206:	0000                	unimp
 208:	000c                	0xc
 20a:	0000                	unimp
 20c:	ffff                	0xffff
 20e:	ffff                	0xffff
 210:	0001                	nop
 212:	7c01                	lui	s8,0xfffe0
 214:	0d01                	addi	s10,s10,0
 216:	0002                	c.slli64	zero
}
 218:	0014                	0x14
 21a:	0000                	unimp
void pcount_enable(int enable) {
 21c:	0208                	addi	a0,sp,256
 21e:	0000                	unimp
  unsigned int inhibit_val = enable ? 0x0 : 0xFFFFFFFF;
 220:	04d0                	addi	a2,sp,580
 222:	0000                	unimp
 224:	0228                	addi	a0,sp,264
 226:	0000                	unimp
 228:	0e42                	slli	t3,t3,0x10
 22a:	0330                	addi	a2,sp,392
  asm volatile("csrw  mucounteren, %0\n" : : "r"(inhibit_val));
 22c:	0224                	addi	s1,sp,264
 22e:	000e                	c.slli	zero,0x3
 230:	0018                	0x18
}
 232:	0000                	unimp
 234:	0208                	addi	a0,sp,256
 236:	0000                	unimp
unsigned int get_mepc() {
 238:	06f8                	addi	a4,sp,844
  __asm__ volatile("csrr %0, mepc;" : "=r"(result));
 23a:	0000                	unimp
 23c:	0018                	0x18
 23e:	0000                	unimp
  return result;
 240:	0e42                	slli	t3,t3,0x10
}
 242:	4220                	lw	s0,64(a2)
 244:	0181                	addi	gp,gp,0
 246:	c150                	sw	a2,4(a0)
unsigned int get_mcause() {
 248:	0e42                	slli	t3,t3,0x10
  __asm__ volatile("csrr %0, mcause;" : "=r"(result));
 24a:	0000                	unimp
 24c:	0014                	0x14
 24e:	0000                	unimp
  return result;
 250:	0208                	addi	a0,sp,256
}
 252:	0000                	unimp
 254:	0710                	addi	a2,sp,896
 256:	0000                	unimp
unsigned int get_mtval() {
 258:	0098                	addi	a4,sp,64
  __asm__ volatile("csrr %0, mtval;" : "=r"(result));
 25a:	0000                	unimp
 25c:	0e42                	slli	t3,t3,0x10
 25e:	0220                	addi	s0,sp,264
  return result;
 260:	0e94                	addi	a3,sp,848
}
 262:	0000                	unimp
 264:	0014                	0x14
 266:	0000                	unimp
void simple_exc_handler(void) {
 268:	0208                	addi	a0,sp,256
 26a:	0000                	unimp
  puts("EXCEPTION!!!\n");
 26c:	07a8                	addi	a0,sp,968
 26e:	0000                	unimp
 270:	0078                	addi	a4,sp,12
 272:	0000                	unimp
 274:	0e42                	slli	t3,t3,0x10
  puts("============\n");
 276:	0220                	addi	s0,sp,264
 278:	0e74                	addi	a3,sp,796
 27a:	0000                	unimp
 27c:	0014                	0x14
 27e:	0000                	unimp
  puts("MEPC:   0x%0X");puthex(get_mepc());
 280:	0208                	addi	a0,sp,256
 282:	0000                	unimp
 284:	0820                	addi	s0,sp,24
 286:	0000                	unimp
 288:	00ba                	slli	ra,ra,0xe
 28a:	0000                	unimp
 28c:	0e42                	slli	t3,t3,0x10
 28e:	0220                	addi	s0,sp,264
 290:	0eb6                	slli	t4,t4,0xd
  puts("\nMCAUSE: 0x%0X");puthex(get_mcause());
 292:	0000                	unimp
 294:	0014                	0x14
 296:	0000                	unimp
 298:	0208                	addi	a0,sp,256
 29a:	0000                	unimp
 29c:	08da                	slli	a7,a7,0x16
 29e:	0000                	unimp
 2a0:	0042                	c.slli	zero,0x10
 2a2:	0000                	unimp
  puts("\nMTVAL:  0x%0X");puthex(get_mtval());
 2a4:	0e42                	slli	t3,t3,0x10
 2a6:	7e10                	flw	fa2,56(a2)
 2a8:	000e                	c.slli	zero,0x3
 2aa:	0000                	unimp
 2ac:	001c                	0x1c
 2ae:	0000                	unimp
 2b0:	0208                	addi	a0,sp,256
 2b2:	0000                	unimp
 2b4:	091c                	addi	a5,sp,144
  putchar('\n');
 2b6:	0000                	unimp
 2b8:	01fc                	addi	a5,sp,204
  sim_halt();
 2ba:	0000                	unimp
  while(1);
 2bc:	0e42                	slli	t3,t3,0x10
inline static void increment_timecmp(uint64_t time_base) {
 2be:	4230                	lw	a2,64(a2)
 2c0:	0181                	addi	gp,gp,0
 2c2:	c101f403          	0xc101f403
  uint64_t current_time = timer_read();
 2c6:	0e42                	slli	t3,t3,0x10
 2c8:	0000                	unimp
 2ca:	0000                	unimp
  current_time += time_base;
 2cc:	0018                	0x18
 2ce:	0000                	unimp
 2d0:	0208                	addi	a0,sp,256
 2d2:	0000                	unimp
 2d4:	0b18                	addi	a4,sp,400
 2d6:	0000                	unimp
 2d8:	0060                	addi	s0,sp,12
 2da:	0000                	unimp
 2dc:	0e42                	slli	t3,t3,0x10
 2de:	4230                	lw	a2,64(a2)
 2e0:	0181                	addi	gp,gp,0
 2e2:	5802                	lw	a6,32(sp)
 2e4:	42c1                	li	t0,16
 2e6:	000e                	c.slli	zero,0x3
 2e8:	0018                	0x18
 2ea:	0000                	unimp
  timecmp_update(current_time);
 2ec:	0208                	addi	a0,sp,256
 2ee:	0000                	unimp
 2f0:	0b78                	addi	a4,sp,412
}
 2f2:	0000                	unimp
 2f4:	0018                	0x18
 2f6:	0000                	unimp
 2f8:	0e42                	slli	t3,t3,0x10
void timer_enable(uint64_t time_base) {
 2fa:	4220                	lw	s0,64(a2)
 2fc:	0181                	addi	gp,gp,0
 2fe:	c150                	sw	a2,4(a0)
 300:	0e42                	slli	t3,t3,0x10
  time_elapsed = 0;
 302:	0000                	unimp
 304:	0014                	0x14
 306:	0000                	unimp
 308:	0208                	addi	a0,sp,256
 30a:	0000                	unimp
 30c:	0b90                	addi	a2,sp,464
 30e:	0000                	unimp
 310:	003e                	c.slli	zero,0xf
  time_increment = time_base;
 312:	0000                	unimp
 314:	0e42                	slli	t3,t3,0x10
 316:	7a20                	flw	fs0,112(a2)
 318:	000e                	c.slli	zero,0x3
	...

Déassemblage de la section .debug_ranges :

00000000 <.debug_ranges>:
  .endr
   0:	ffff                	0xffff
   2:	ffff                	0xffff
   4:	0000                	unimp
   6:	0000                	unimp
   8:	0bce                	slli	s7,s7,0x13
   a:	0000                	unimp
   c:	0c5c                	addi	a5,sp,532
   e:	0000                	unimp
  10:	0000                	unimp
  12:	0000                	unimp
  14:	0084                	addi	s1,sp,64
	...
